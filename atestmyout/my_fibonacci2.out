; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
;Symbol table GLOBAL
; return type: null
; subscope local var size: 0
;scope type: GLOBAL_TYPE 
;name input type STRING value "Please input an integer number: " local slot location: -1
;name space type STRING value " " local slot location: -2
;name eol type STRING value "\n" local slot location: -3


;Symbol table F
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name n type INT parameter slot location: 7
;name ret1 type INT local slot location: -1
;name ret2 type INT local slot location: -2


;Symbol table BLOCK 1
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 2
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 3
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 4
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 5
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 6
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table main
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name i type INT local slot location: -1
;name end type INT local slot location: -2
;name result type INT local slot location: -3


;Symbol table BLOCK 7
; return type: null
; subscope local var size: 0
;scope type: FOR_TYPE 


; SUBSCOPE for function scope: F
; SUBSCOPE block ID: 1 scopeType: IF

; searching slot location for -- n -- in function scope F and get location 7

;exit Cond: > :: n :: 2
; searching slot location for -- n -- in function scope F and get location 7

; searching slot location for -- n -- in function scope F and get location 7

; pre-conversion assignOutputID: ret1
; searching slot location for -- ret1 -- in function scope F and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- n -- in function scope F and get location 7

; pre-conversion assignOutputID: ret2
; searching slot location for -- ret2 -- in function scope F and get location -2

; post-conversion assignOutputID: $-2
; searching slot location for -- ret1 -- in function scope F and get location -1

; searching slot location for -- ret2 -- in function scope F and get location -2

;OPT BUG
; SUBSCOPE for function scope: F
; SUBSCOPE block ID: 1 scopeType: IF

;return assignExpr: ret1+ret2
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: F
; SUBSCOPE block ID: 2 scopeType: ELSE

; SUBSCOPE for function scope: F
; SUBSCOPE block ID: 2 scopeType: ELSE
; SUBSCOPE block ID: 3 scopeType: IF

; searching slot location for -- n -- in function scope F and get location 7

;exit Cond: = :: n :: 0
; searching slot location for -- n -- in function scope F and get location 7

;OPT BUG
; SUBSCOPE for function scope: F
; SUBSCOPE block ID: 2 scopeType: ELSE
; SUBSCOPE block ID: 3 scopeType: IF

;return assignExpr: 0
;left: 0
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: F
; SUBSCOPE block ID: 2 scopeType: ELSE
; SUBSCOPE block ID: 4 scopeType: ELSE

; SUBSCOPE for function scope: F
; SUBSCOPE block ID: 2 scopeType: ELSE
; SUBSCOPE block ID: 4 scopeType: ELSE
; SUBSCOPE block ID: 5 scopeType: IF

; searching slot location for -- n -- in function scope F and get location 7

;exit Cond: = :: n :: 1
; searching slot location for -- n -- in function scope F and get location 7

;OPT BUG
; SUBSCOPE for function scope: F
; SUBSCOPE block ID: 2 scopeType: ELSE
; SUBSCOPE block ID: 4 scopeType: ELSE
; SUBSCOPE block ID: 5 scopeType: IF

;return assignExpr: 1
;left: 1
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: F
; SUBSCOPE block ID: 2 scopeType: ELSE
; SUBSCOPE block ID: 4 scopeType: ELSE
; SUBSCOPE block ID: 6 scopeType: ELSE

;OPT BUG
; SUBSCOPE for function scope: F
; SUBSCOPE block ID: 2 scopeType: ELSE
; SUBSCOPE block ID: 4 scopeType: ELSE
; SUBSCOPE block ID: 6 scopeType: ELSE

;return assignExpr: 1
;left: 1
;right: 1
;IRAction.isIF_ELSE_sameReturn(): true
; searching slot location for -- end -- in function scope main and get location -2

; SUBSCOPE for function scope: main
; SUBSCOPE block ID: 7 scopeType: FOR

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope main and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope main and get location -1

;exit Cond: != :: i :: end
; searching slot location for -- i -- in function scope main and get location -1

; searching slot location for -- end -- in function scope main and get location -2

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope main and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope main and get location -1

; searching slot location for -- i -- in function scope main and get location -1

; searching slot location for -- i -- in function scope main and get location -1

; pre-conversion assignOutputID: result
; searching slot location for -- result -- in function scope main and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- i -- in function scope main and get location -1

; searching slot location for -- result -- in function scope main and get location -3

;OPT BUG
; SUBSCOPE for function scope: main

;return assignExpr: 0
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false

;IR code
;PUSH
;JSR main
;HALT

;LABEL F		 Under Func Scope: F
;LINK 3			 Under Func Scope: F
;STOREI 2 $T1		 Under Func Scope: F
;LEI $7 $T1 label1	 Under Func Scope: F
;STOREI 1 $T2		 Under Func Scope: F
;SUBI $7 $T2 $T3	 Under Func Scope: F
;PUSH $T3		 Under Func Scope: F
;PUSH 			 Under Func Scope: F
;PUSHREG		 Under Func Scope: F
;JSR F			 Under Func Scope: F
;POPREG			 Under Func Scope: F
;POP $T4		 Under Func Scope: F
;POP 			 Under Func Scope: F
;STOREI $T4 $-1		 Under Func Scope: F
;STOREI 2 $T5		 Under Func Scope: F
;SUBI $7 $T5 $T6	 Under Func Scope: F
;PUSH $T6		 Under Func Scope: F
;PUSH 			 Under Func Scope: F
;PUSHREG		 Under Func Scope: F
;JSR F			 Under Func Scope: F
;POPREG			 Under Func Scope: F
;POP $T7		 Under Func Scope: F
;POP 			 Under Func Scope: F
;STOREI $T7 $-2		 Under Func Scope: F
;ADDI $-1 $-2 $T8	 Under Func Scope: F
;STOREI $T8 $6		 Under Func Scope: F
;UNLINK			 Under Func Scope: F
;RET			 Under Func Scope: F
;JUMP label2		 Under Func Scope: F
;LABEL label1		 Under Func Scope: F
;STOREI 0 $T9		 Under Func Scope: F
;NEI $7 $T9 label3	 Under Func Scope: F
;STOREI 0 $T10		 Under Func Scope: F
;STOREI $T10 $6		 Under Func Scope: F
;UNLINK			 Under Func Scope: F
;RET			 Under Func Scope: F
;JUMP label4		 Under Func Scope: F
;LABEL label3		 Under Func Scope: F
;STOREI 1 $T13		 Under Func Scope: F
;STOREI $T13 $6		 Under Func Scope: F
;UNLINK			 Under Func Scope: F
;RET			 Under Func Scope: F
;LABEL label6		 Under Func Scope: F
;LABEL label4		 Under Func Scope: F
;LABEL label2		 Under Func Scope: F

;LABEL main		 Under Func Scope: main
;LINK 4			 Under Func Scope: main
;WRITES input		 Under Func Scope: main
;READI $-2		 Under Func Scope: main
;STOREI 0 $T14		 Under Func Scope: main
;STOREI $T14 $-1	 Under Func Scope: main
;LABEL label7		 Under Func Scope: main
;STOREI $-2 $T15	 Under Func Scope: main
;EQI $-1 $T15 label9	 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR F			 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T18		 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREI $T18 $-3	 Under Func Scope: main
;WRITEI $-1		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEI $-3		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;STOREI 1 $T16		 Under Func Scope: main
;ADDI $-1 $T16 $T17	 Under Func Scope: main
;STOREI $T17 $-1	 Under Func Scope: main
;JUMP label7		 Under Func Scope: main
;LABEL label9		 Under Func Scope: main
;STOREI 0 $T19		 Under Func Scope: main
;STOREI $T19 $6		 Under Func Scope: main
;UNLINK			 Under Func Scope: main
;RET			 Under Func Scope: main

; ========= CFG IR NODE =========

;LABEL F		P: 					S: ;LINK 3		 <== BB leader
;LINK 3			P: ;LABEL F			S: ;STOREI 2 $T1	
;STOREI 2 $T1		P: ;LINK 3				S: ;LEI $7 $T1 label1	
;LEI $7 $T1 label1	P: ;STOREI 2 $T1			S: ;STOREI 1 $T2	;LABEL label1	
;STOREI 1 $T2		P: ;LEI $7 $T1 label1		S: ;SUBI $7 $T2 $T3		 <== BB leader
;SUBI $7 $T2 $T3	P: ;STOREI 1 $T2			S: ;PUSH $T3	
;PUSH $T3		P: ;SUBI $7 $T2 $T3			S: ;PUSH 	
;PUSH 			P: ;PUSH $T3			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR F	
;JSR F			P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR F			S: ;POP $T4	
;POP $T4		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T4			S: ;STOREI $T4 $-1	
;STOREI $T4 $-1		P: ;POP 				S: ;STOREI 2 $T5	
;STOREI 2 $T5		P: ;STOREI $T4 $-1			S: ;SUBI $7 $T5 $T6	
;SUBI $7 $T5 $T6	P: ;STOREI 2 $T5			S: ;PUSH $T6	
;PUSH $T6		P: ;SUBI $7 $T5 $T6			S: ;PUSH 	
;PUSH 			P: ;PUSH $T6			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR F	
;JSR F			P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR F			S: ;POP $T7	
;POP $T7		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T7			S: ;STOREI $T7 $-2	
;STOREI $T7 $-2		P: ;POP 				S: ;ADDI $-1 $-2 $T8	
;ADDI $-1 $-2 $T8	P: ;STOREI $T7 $-2			S: ;STOREI $T8 $6	
;STOREI $T8 $6		P: ;ADDI $-1 $-2 $T8		S: ;UNLINK	
;UNLINK			P: ;STOREI $T8 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label2		P: ;RET				S: ;LABEL label2	
;LABEL label1		P: ;LEI $7 $T1 label1		S: ;STOREI 0 $T9		 <== BB leader
;STOREI 0 $T9		P: ;LABEL label1			S: ;NEI $7 $T9 label3	
;NEI $7 $T9 label3	P: ;STOREI 0 $T9			S: ;STOREI 0 $T10	;LABEL label3	
;STOREI 0 $T10		P: ;NEI $7 $T9 label3		S: ;STOREI $T10 $6		 <== BB leader
;STOREI $T10 $6		P: ;STOREI 0 $T10		S: ;UNLINK	
;UNLINK			P: ;STOREI $T10 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label4		P: ;RET				S: ;LABEL label4	
;LABEL label3		P: ;NEI $7 $T9 label3		S: ;STOREI 1 $T13		 <== BB leader
;STOREI 1 $T13		P: ;LABEL label3			S: ;STOREI $T13 $6	
;STOREI $T13 $6		P: ;STOREI 1 $T13		S: ;UNLINK	
;UNLINK			P: ;STOREI $T13 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;LABEL label6		P: ;RET				S: ;LABEL label4	
;LABEL label4		P: ;LABEL label6	;JUMP label4		S: ;LABEL label2		 <== BB leader
;LABEL label2		P: ;LABEL label4	;JUMP label2		S: 	 <== BB leader

;LABEL main		P: 					S: ;LINK 4		 <== BB leader
;LINK 4			P: ;LABEL main			S: ;WRITES input	
;WRITES input		P: ;LINK 4				S: ;READI $-2	
;READI $-2		P: ;WRITES input			S: ;STOREI 0 $T14	
;STOREI 0 $T14		P: ;READI $-2			S: ;STOREI $T14 $-1	
;STOREI $T14 $-1	P: ;STOREI 0 $T14			S: ;LABEL label7	
;LABEL label7		P: ;STOREI $T14 $-1	;JUMP label7		S: ;STOREI $-2 $T15		 <== BB leader
;STOREI $-2 $T15	P: ;LABEL label7			S: ;EQI $-1 $T15 label9	
;EQI $-1 $T15 label9	P: ;STOREI $-2 $T15			S: ;PUSH $-1	;LABEL label9	
;PUSH $-1		P: ;EQI $-1 $T15 label9		S: ;PUSH 		 <== BB leader
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR F	
;JSR F			P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR F			S: ;POP $T18	
;POP $T18		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T18			S: ;STOREI $T18 $-3	
;STOREI $T18 $-3	P: ;POP 				S: ;WRITEI $-1	
;WRITEI $-1		P: ;STOREI $T18 $-3			S: ;WRITES space	
;WRITES space		P: ;WRITEI $-1			S: ;WRITEI $-3	
;WRITEI $-3		P: ;WRITES space			S: ;WRITES eol	
;WRITES eol		P: ;WRITEI $-3			S: ;STOREI 1 $T16	
;STOREI 1 $T16		P: ;WRITES eol			S: ;ADDI $-1 $T16 $T17	
;ADDI $-1 $T16 $T17	P: ;STOREI 1 $T16			S: ;STOREI $T17 $-1	
;STOREI $T17 $-1	P: ;ADDI $-1 $T16 $T17			S: ;JUMP label7	
;JUMP label7		P: ;STOREI $T17 $-1			S: ;LABEL label7	
;LABEL label9		P: ;EQI $-1 $T15 label9		S: ;STOREI 0 $T19		 <== BB leader
;STOREI 0 $T19		P: ;LABEL label9			S: ;STOREI $T19 $6	
;STOREI $T19 $6		P: ;STOREI 0 $T19		S: ;UNLINK	
;UNLINK			P: ;STOREI $T19 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

; ========= CFG IR NODE / KILL/ GEN =========

;LABEL F		Kill: 					Gen: 
;LINK 3			Kill: 				Gen: 
;STOREI 2 $T1		Kill: $T1, 			Gen: 
;LEI $7 $T1 label1	Kill: 				Gen: $T1, $7, 
;STOREI 1 $T2		Kill: $T2, 			Gen: 
;SUBI $7 $T2 $T3	Kill: $T3, 				Gen: $T2, $7, 
;PUSH $T3		Kill: 					Gen: $T3, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR F			Kill: 				Gen: 
;POPREG			Kill: 				Gen: 
;POP $T4		Kill: $T4, 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T4 $-1		Kill: $-1, 			Gen: $T4, 
;STOREI 2 $T5		Kill: $T5, 			Gen: 
;SUBI $7 $T5 $T6	Kill: $T6, 				Gen: $7, $T5, 
;PUSH $T6		Kill: 					Gen: $T6, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR F			Kill: 				Gen: 
;POPREG			Kill: 				Gen: 
;POP $T7		Kill: $T7, 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T7 $-2		Kill: $-2, 			Gen: $T7, 
;ADDI $-1 $-2 $T8	Kill: $T8, 				Gen: $-2, $-1, 
;STOREI $T8 $6		Kill: $6, 			Gen: $T8, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label2		Kill: 				Gen: 
;LABEL label1		Kill: 				Gen: 
;STOREI 0 $T9		Kill: $T9, 			Gen: 
;NEI $7 $T9 label3	Kill: 				Gen: $7, $T9, 
;STOREI 0 $T10		Kill: $T10, 			Gen: 
;STOREI $T10 $6		Kill: $6, 			Gen: $T10, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label4		Kill: 				Gen: 
;LABEL label3		Kill: 				Gen: 
;STOREI 1 $T13		Kill: $T13, 			Gen: 
;STOREI $T13 $6		Kill: $6, 			Gen: $T13, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;LABEL label6		Kill: 				Gen: 
;LABEL label4		Kill: 				Gen: 
;LABEL label2		Kill: 				Gen: 

;LABEL main		Kill: 				Gen: 
;LINK 4			Kill: 				Gen: 
;WRITES input		Kill: 				Gen: 
;READI $-2		Kill: $-2, 				Gen: 
;STOREI 0 $T14		Kill: $T14, 			Gen: 
;STOREI $T14 $-1	Kill: $-1, 				Gen: $T14, 
;LABEL label7		Kill: 				Gen: 
;STOREI $-2 $T15	Kill: $T15, 				Gen: $-2, 
;EQI $-1 $T15 label9	Kill: 				Gen: $-1, $T15, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR F			Kill: 				Gen: 
;POPREG			Kill: 				Gen: 
;POP $T18		Kill: $T18, 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T18 $-3	Kill: $-3, 				Gen: $T18, 
;WRITEI $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;WRITEI $-3		Kill: 				Gen: $-3, 
;WRITES eol		Kill: 				Gen: 
;STOREI 1 $T16		Kill: $T16, 			Gen: 
;ADDI $-1 $T16 $T17	Kill: $T17, 				Gen: $-1, $T16, 
;STOREI $T17 $-1	Kill: $-1, 				Gen: $T17, 
;JUMP label7		Kill: 				Gen: 
;LABEL label9		Kill: 				Gen: 
;STOREI 0 $T19		Kill: $T19, 			Gen: 
;STOREI $T19 $6		Kill: $6, 			Gen: $T19, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

; ========= CFG IR NODE / LIVE IN / LIVE OUT =========

;LABEL F		Live IN: $7, 				Live OUT: $7, 
;LINK 3			Live IN: $7, 			Live OUT: $7, 
;STOREI 2 $T1		Live IN: $7, 			Live OUT: $T1, $7, 
;LEI $7 $T1 label1	Live IN: $T1, $7, 			Live OUT: $7, 
;STOREI 1 $T2		Live IN: $7, 			Live OUT: $T2, $7, 
;SUBI $7 $T2 $T3	Live IN: $T2, $7, 			Live OUT: $T3, $7, 
;PUSH $T3		Live IN: $T3, $7, 			Live OUT: $7, 
;PUSH 			Live IN: $7, 			Live OUT: $7, 
;PUSHREG		Live IN: $7, 				Live OUT: $7, 
;JSR F			Live IN: $7, 			Live OUT: $7, 
;POPREG			Live IN: $7, 			Live OUT: $7, 
;POP $T4		Live IN: $7, 				Live OUT: $7, $T4, 
;POP 			Live IN: $T4, $7, 			Live OUT: $7, $T4, 
;STOREI $T4 $-1		Live IN: $T4, $7, 		Live OUT: $7, $-1, 
;STOREI 2 $T5		Live IN: $-1, $7, 			Live OUT: $7, $-1, $T5, 
;SUBI $7 $T5 $T6	Live IN: $-1, $T5, $7, 			Live OUT: $T6, $-1, 
;PUSH $T6		Live IN: $T6, $-1, 			Live OUT: $-1, 
;PUSH 			Live IN: $-1, 			Live OUT: $-1, 
;PUSHREG		Live IN: $-1, 				Live OUT: $-1, 
;JSR F			Live IN: $-1, 			Live OUT: $-1, 
;POPREG			Live IN: $-1, 			Live OUT: $-1, 
;POP $T7		Live IN: $-1, 				Live OUT: $-1, $T7, 
;POP 			Live IN: $T7, $-1, 		Live OUT: $-1, $T7, 
;STOREI $T7 $-2		Live IN: $T7, $-1, 		Live OUT: $-2, $-1, 
;ADDI $-1 $-2 $T8	Live IN: $-2, $-1, 			Live OUT: $T8, 
;STOREI $T8 $6		Live IN: $T8, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 
;JUMP label2		Live IN: 				Live OUT: 
;LABEL label1		Live IN: $7, 			Live OUT: $7, 
;STOREI 0 $T9		Live IN: $7, 			Live OUT: $7, $T9, 
;NEI $7 $T9 label3	Live IN: $7, $T9, 			Live OUT: 
;STOREI 0 $T10		Live IN: 				Live OUT: $T10, 
;STOREI $T10 $6		Live IN: $T10, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 
;JUMP label4		Live IN: 				Live OUT: 
;LABEL label3		Live IN: 				Live OUT: 
;STOREI 1 $T13		Live IN: 				Live OUT: $T13, 
;STOREI $T13 $6		Live IN: $T13, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 
;LABEL label6		Live IN: 				Live OUT: 
;LABEL label4		Live IN: 				Live OUT: 
;LABEL label2		Live IN: 				Live OUT: 

;LABEL main		Live IN: 				Live OUT: 
;LINK 4			Live IN: 			Live OUT: 
;WRITES input		Live IN: 				Live OUT: 
;READI $-2		Live IN: 				Live OUT: $-2, 
;STOREI 0 $T14		Live IN: $-2, 			Live OUT: $-2, $T14, 
;STOREI $T14 $-1	Live IN: $T14, $-2, 			Live OUT: $-2, $-1, 
;LABEL label7		Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;STOREI $-2 $T15	Live IN: $-2, $-1, 			Live OUT: $-2, $-1, $T15, 
;EQI $-1 $T15 label9	Live IN: $-2, $-1, $T15, 		Live OUT: $-2, $-1, 
;PUSH $-1		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH 			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;PUSHREG		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;JSR F			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POPREG			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POP $T18		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, $T18, 
;POP 			Live IN: $T18, $-2, $-1, 		Live OUT: $-2, $-1, $T18, 
;STOREI $T18 $-3	Live IN: $T18, $-2, $-1, 		Live OUT: $-2, $-1, $-3, 
;WRITEI $-1		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES space		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITEI $-3		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, 
;WRITES eol		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;STOREI 1 $T16		Live IN: $-2, $-1, 		Live OUT: $-2, $-1, $T16, 
;ADDI $-1 $T16 $T17	Live IN: $-2, $-1, $T16, 		Live OUT: $-2, $T17, 
;STOREI $T17 $-1	Live IN: $-2, $T17, 			Live OUT: $-2, $-1, 
;JUMP label7		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;LABEL label9		Live IN: 				Live OUT: 
;STOREI 0 $T19		Live IN: 				Live OUT: $T19, 
;STOREI $T19 $6		Live IN: $T19, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 
;str input "Please input an integer number: " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str space " " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str eol "\n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;jsr main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;sys halt 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL F liveout: ; { $7  }
;label F 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 3 liveout: ; { $7  }
;link 22 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 2 $T1 liveout: ; { $T1 $7  }
; ensure(): $T1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
; loading $-3 to register r3
;move $-3 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;move 2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;LEI $7 $T1 label1 liveout: ; { $7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; ensure(): $T1 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; spilling registers at the end of Basic Block
; spilling varialbe $T1
;move r3 $-3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jle label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREI 1 $T2 liveout: ; { $T2 $7  }
; ensure(): $T2 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T2 }
; loading $-4 to register r3
;move $-4 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T2 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T2 }
;SUBI $7 $T2 $T3 liveout: ; { $T3 $7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T2* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T2* }
; ensure(): $T2 has register r3
; switching owner of register $7 to $T3 { r0-><null> || r1-><null> || r2->$7 || r3->$T2* }
;subi r3 r2 	; { r0-><null> || r1-><null> || r2->$T3 || r3->$T2* }
; freeing unused variable r3
; spilling varialbe $T2
;move r3 $-4 	; { r0-><null> || r1-><null> || r2->$T3* || r3->$T2* }
;PUSH $T3 liveout: ; { $7  }
; ensure(): $T3 has register r2
;push r2 	; { r0-><null> || r1-><null> || r2->$T3* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T3
;move r2 $-5 	; { r0-><null> || r1-><null> || r2->$T3* || r3-><null> }
;PUSH  liveout: ; { $7  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSHREG liveout: ; { $7  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JSR F liveout: ; { $7  }
; writing back global variables prior a function call
;jsr F 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { $7  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T4 liveout: ; { $7 $T4  }
; ensure(): $T4 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T4 }
; loading $-6 to register r3
;move $-6 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T4 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T4 }
;POP  liveout: ; { $7 $T4  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T4* }
;STOREI $T4 $-1 liveout: ; { $7 $-1  }
; ensure(): $T4 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T4* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T4* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T4* }
; freeing unused variable r3
; spilling varialbe $T4
;move r3 $-6 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T4* }
;STOREI 2 $T5 liveout: ; { $7 $-1 $T5  }
; ensure(): $T5 gets register r3 { r0-><null> || r1-><null> || r2->$-1* || r3->$T5 }
; loading $-7 to register r3
;move $-7 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T5 }
;move 2 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T5 }
;SUBI $7 $T5 $T6 liveout: ; { $T6 $-1  }
; ensure(): $7 gets register r1 { r0-><null> || r1->$7 || r2->$-1* || r3->$T5* }
; loading $7 to register r1
;move $7 r1 	; { r0-><null> || r1->$7 || r2->$-1* || r3->$T5* }
; ensure(): $T5 has register r3
; switching owner of register $7 to $T6 { r0-><null> || r1->$7 || r2->$-1* || r3->$T5* }
;subi r3 r1 	; { r0-><null> || r1->$T6 || r2->$-1* || r3->$T5* }
; freeing unused variable r3
; spilling varialbe $T5
;move r3 $-7 	; { r0-><null> || r1->$T6* || r2->$-1* || r3->$T5* }
;PUSH $T6 liveout: ; { $-1  }
; ensure(): $T6 has register r1
;push r1 	; { r0-><null> || r1->$T6* || r2->$-1* || r3-><null> }
; freeing unused variable r1
; spilling varialbe $T6
;move r1 $-8 	; { r0-><null> || r1->$T6* || r2->$-1* || r3-><null> }
;PUSH  liveout: ; { $-1  }
;push 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;PUSHREG liveout: ; { $-1  }
;push r0 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;JSR F liveout: ; { $-1  }
; writing back global variables prior a function call
;jsr F 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;POPREG liveout: ; { $-1  }
;pop r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;POP $T7 liveout: ; { $-1 $T7  }
; ensure(): $T7 gets register r3 { r0-><null> || r1-><null> || r2->$-1* || r3->$T7 }
; loading $-9 to register r3
;move $-9 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T7 }
;pop r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T7 }
;POP  liveout: ; { $-1 $T7  }
;pop 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T7* }
;STOREI $T7 $-2 liveout: ; { $-2 $-1  }
; ensure(): $T7 has register r3
; ensure(): $-2 gets register r1 { r0-><null> || r1->$-2 || r2->$-1* || r3->$T7* }
; loading $-2 to register r1
;move $-2 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T7* }
;move r3 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T7* }
; freeing unused variable r3
; spilling varialbe $T7
;move r3 $-9 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T7* }
;ADDI $-1 $-2 $T8 liveout: ; { $T8  }
; ensure(): $-1 has register r2
; ensure(): $-2 has register r1
; switching owner of register $-1 to $T8 { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;addi r1 r2 	; { r0-><null> || r1->$-2* || r2->$T8 || r3-><null> }
; freeing unused variable r1
; spilling varialbe $-2
;move r1 $-2 	; { r0-><null> || r1->$-2* || r2->$T8* || r3-><null> }
;STOREI $T8 $6 liveout: ; {  }
; ensure(): $T8 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T8* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T8
;move r2 $-10 	; { r0-><null> || r1-><null> || r2->$T8* || r3-><null> }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label2 liveout: ; {  }
; spilling registers at the end of Basic Block
;jmp label2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label1 liveout: ; { $7  }
; spilling registers at the end of Basic Block
;label label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T9 liveout: ; { $7 $T9  }
; ensure(): $T9 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T9 }
; loading $-11 to register r3
;move $-11 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T9 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T9 }
;NEI $7 $T9 label3 liveout: ; {  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T9* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T9* }
; ensure(): $T9 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T9* }
; spilling registers at the end of Basic Block
; spilling varialbe $T9
;move r3 $-11 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T9* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREI 0 $T10 liveout: ; { $T10  }
; ensure(): $T10 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T10 }
; loading $-12 to register r3
;move $-12 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T10 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T10 }
;STOREI $T10 $6 liveout: ; {  }
; ensure(): $T10 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T10* }
; freeing unused variable r3
; spilling varialbe $T10
;move r3 $-12 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T10* }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label4 liveout: ; {  }
; spilling registers at the end of Basic Block
;jmp label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label3 liveout: ; {  }
; spilling registers at the end of Basic Block
;label label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T13 liveout: ; { $T13  }
; ensure(): $T13 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T13 }
; loading $-15 to register r3
;move $-15 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T13 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T13 }
;STOREI $T13 $6 liveout: ; {  }
; ensure(): $T13 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T13* }
; freeing unused variable r3
; spilling varialbe $T13
;move r3 $-15 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T13* }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label6 liveout: ; {  }
; spilling registers at the end of Basic Block
;label label6 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label4 liveout: ; {  }
; spilling registers at the end of Basic Block
;label label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label2 liveout: ; {  }
; spilling registers at the end of Basic Block
;label label2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL main liveout: ; {  }
;label main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 4 liveout: ; {  }
;link 23 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;WRITES input liveout: ; {  }
;sys writes input 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;READI $-2 liveout: ; { $-2  }
; ensure(): $-2 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; loading $-2 to register r3
;move $-2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
;sys readi r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
;STOREI 0 $T14 liveout: ; { $-2 $T14  }
; ensure(): $T14 gets register r2 { r0-><null> || r1-><null> || r2->$T14 || r3->$-2* }
; loading $-17 to register r2
;move $-17 r2 	; { r0-><null> || r1-><null> || r2->$T14 || r3->$-2* }
;move 0 r2 	; { r0-><null> || r1-><null> || r2->$T14 || r3->$-2* }
;STOREI $T14 $-1 liveout: ; { $-2 $-1  }
; ensure(): $T14 has register r2
; ensure(): $-1 gets register r1 { r0-><null> || r1->$-1 || r2->$T14* || r3->$-2* }
; loading $-1 to register r1
;move $-1 r1 	; { r0-><null> || r1->$-1 || r2->$T14* || r3->$-2* }
;move r2 r1 	; { r0-><null> || r1->$-1 || r2->$T14* || r3->$-2* }
; freeing unused variable r2
; spilling varialbe $T14
;move r2 $-17 	; { r0-><null> || r1->$-1* || r2->$T14* || r3->$-2* }
;LABEL label7 liveout: ; { $-2 $-1  }
; spilling registers at the end of Basic Block
; spilling varialbe $-2
;move r3 $-2 	; { r0-><null> || r1->$-1* || r2-><null> || r3->$-2* }
; spilling varialbe $-1
;move r1 $-1 	; { r0-><null> || r1->$-1* || r2-><null> || r3-><null> }
;label label7 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI $-2 $T15 liveout: ; { $-2 $-1 $T15  }
; ensure(): $-2 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; loading $-2 to register r3
;move $-2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; ensure(): $T15 gets register r2 { r0-><null> || r1-><null> || r2->$T15 || r3->$-2 }
; loading $-18 to register r2
;move $-18 r2 	; { r0-><null> || r1-><null> || r2->$T15 || r3->$-2 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T15 || r3->$-2 }
;EQI $-1 $T15 label9 liveout: ; { $-2 $-1  }
; ensure(): $-1 gets register r1 { r0-><null> || r1->$-1 || r2->$T15* || r3->$-2 }
; loading $-1 to register r1
;move $-1 r1 	; { r0-><null> || r1->$-1 || r2->$T15* || r3->$-2 }
; ensure(): $T15 has register r2
;cmpi r1 r2 	; { r0-><null> || r1->$-1 || r2->$T15* || r3->$-2 }
; spilling registers at the end of Basic Block
; spilling varialbe $-2
;move r3 $-2 	; { r0-><null> || r1->$-1 || r2->$T15* || r3->$-2 }
; spilling varialbe $T15
;move r2 $-18 	; { r0-><null> || r1->$-1 || r2->$T15* || r3-><null> }
; spilling varialbe $-1
;move r1 $-1 	; { r0-><null> || r1->$-1 || r2-><null> || r3-><null> }
;jeq label9 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r1
; freeing unused variable r2
;PUSH $-1 liveout: ; { $-2 $-1  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;PUSH  liveout: ; { $-2 $-1  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;PUSHREG liveout: ; { $-2 $-1  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;JSR F liveout: ; { $-2 $-1  }
; writing back global variables prior a function call
;jsr F 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;POPREG liveout: ; { $-2 $-1  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;POP $T18 liveout: ; { $-2 $-1 $T18  }
; ensure(): $T18 gets register r2 { r0-><null> || r1-><null> || r2->$T18 || r3->$-1 }
; loading $-21 to register r2
;move $-21 r2 	; { r0-><null> || r1-><null> || r2->$T18 || r3->$-1 }
;pop r2 	; { r0-><null> || r1-><null> || r2->$T18 || r3->$-1 }
;POP  liveout: ; { $-2 $-1 $T18  }
;pop 	; { r0-><null> || r1-><null> || r2->$T18* || r3->$-1 }
;STOREI $T18 $-3 liveout: ; { $-2 $-1 $-3  }
; ensure(): $T18 has register r2
; ensure(): $-3 gets register r1 { r0-><null> || r1->$-3 || r2->$T18* || r3->$-1 }
; loading $-3 to register r1
;move $-3 r1 	; { r0-><null> || r1->$-3 || r2->$T18* || r3->$-1 }
;move r2 r1 	; { r0-><null> || r1->$-3 || r2->$T18* || r3->$-1 }
; freeing unused variable r2
; spilling varialbe $T18
;move r2 $-21 	; { r0-><null> || r1->$-3* || r2->$T18* || r3->$-1 }
;WRITEI $-1 liveout: ; { $-2 $-1 $-3  }
; ensure(): $-1 has register r3
;sys writei r3 	; { r0-><null> || r1->$-3* || r2-><null> || r3->$-1 }
;WRITES space liveout: ; { $-2 $-1 $-3  }
;sys writes space 	; { r0-><null> || r1->$-3* || r2-><null> || r3->$-1 }
;WRITEI $-3 liveout: ; { $-2 $-1  }
; ensure(): $-3 has register r1
;sys writei r1 	; { r0-><null> || r1->$-3* || r2-><null> || r3->$-1 }
; freeing unused variable r1
; spilling varialbe $-3
;move r1 $-3 	; { r0-><null> || r1->$-3* || r2-><null> || r3->$-1 }
;WRITES eol liveout: ; { $-2 $-1  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;STOREI 1 $T16 liveout: ; { $-2 $-1 $T16  }
; ensure(): $T16 gets register r2 { r0-><null> || r1-><null> || r2->$T16 || r3->$-1 }
; loading $-19 to register r2
;move $-19 r2 	; { r0-><null> || r1-><null> || r2->$T16 || r3->$-1 }
;move 1 r2 	; { r0-><null> || r1-><null> || r2->$T16 || r3->$-1 }
;ADDI $-1 $T16 $T17 liveout: ; { $-2 $T17  }
; ensure(): $-1 has register r3
; ensure(): $T16 has register r2
; switching owner of register $-1 to $T17 { r0-><null> || r1-><null> || r2->$T16* || r3->$-1 }
;addi r2 r3 	; { r0-><null> || r1-><null> || r2->$T16* || r3->$T17 }
; freeing unused variable r2
; spilling varialbe $T16
;move r2 $-19 	; { r0-><null> || r1-><null> || r2->$T16* || r3->$T17* }
;STOREI $T17 $-1 liveout: ; { $-2 $-1  }
; ensure(): $T17 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T17* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T17* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T17* }
; freeing unused variable r3
; spilling varialbe $T17
;move r3 $-20 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T17* }
;JUMP label7 liveout: ; { $-2 $-1  }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;jmp label7 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label9 liveout: ; {  }
; spilling registers at the end of Basic Block
;label label9 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T19 liveout: ; { $T19  }
; ensure(): $T19 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T19 }
; loading $-22 to register r3
;move $-22 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T19 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T19 }
;STOREI $T19 $6 liveout: ; {  }
; ensure(): $T19 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T19* }
; freeing unused variable r3
; spilling varialbe $T19
;move r3 $-22 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T19* }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }

str input "Please input an integer number: "
str space " "
str eol "\n"
push
push
push
push
push
jsr main
sys halt
label F
link 22
move $-3 r3
move 2 r3
move $7 r2
cmpi r2 r3
move r3 $-3
move r2 $7
jle label1
move $-4 r3
move 1 r3
move $7 r2
subi r3 r2
move r3 $-4
push r2
move r2 $-5
push
push r0
push r1
push r2
push r3
jsr F
pop r3
pop r2
pop r1
pop r0
move $-6 r3
pop r3
pop
move $-1 r2
move r3 r2
move r3 $-6
move $-7 r3
move 2 r3
move $7 r1
subi r3 r1
move r3 $-7
push r1
move r1 $-8
push
push r0
push r1
push r2
push r3
jsr F
pop r3
pop r2
pop r1
pop r0
move $-9 r3
pop r3
pop
move $-2 r1
move r3 r1
move r3 $-9
move r2 $-1
addi r1 r2
move r1 $-2
move r2 $6
move r2 $-10
unlnk
ret
jmp label2
label label1
move $-11 r3
move 0 r3
move $7 r2
cmpi r2 r3
move r3 $-11
move r2 $7
jne label3
move $-12 r3
move 0 r3
move r3 $6
move r3 $-12
unlnk
ret
jmp label4
label label3
move $-15 r3
move 1 r3
move r3 $6
move r3 $-15
unlnk
ret
label label6
label label4
label label2
label main
link 23
sys writes input
move $-2 r3
sys readi r3
move $-17 r2
move 0 r2
move $-1 r1
move r2 r1
move r2 $-17
move r3 $-2
move r1 $-1
label label7
move $-2 r3
move $-18 r2
move r3 r2
move $-1 r1
cmpi r1 r2
move r3 $-2
move r2 $-18
move r1 $-1
jeq label9
move $-1 r3
push r3
push
push r0
push r1
push r2
push r3
jsr F
pop r3
pop r2
pop r1
pop r0
move $-21 r2
pop r2
pop
move $-3 r1
move r2 r1
move r2 $-21
sys writei r3
sys writes space
sys writei r1
move r1 $-3
sys writes eol
move $-19 r2
move 1 r2
addi r2 r3
move r2 $-19
move $-1 r2
move r3 r2
move r3 $-20
move r2 $-1
jmp label7
label label9
move $-22 r3
move 0 r3
move r3 $6
move r3 $-22
unlnk
ret
