; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
;Symbol table GLOBAL
; return type: null
; subscope local var size: 0
;scope type: GLOBAL_TYPE 
;name space type STRING value " " local slot location: -1
;name eol type STRING value "\n" local slot location: -2
;name tab type STRING value "        " local slot location: -3
;name smS type STRING value " is smaller than " local slot location: -4
;name leS type STRING value " is larger than or equal to " local slot location: -5
;name minis type STRING value " min: " local slot location: -6
;name maxis type STRING value " max: " local slot location: -7
;name a0 type FLOAT local slot location: -8
;name a1 type FLOAT local slot location: -9
;name a2 type FLOAT local slot location: -10
;name a3 type FLOAT local slot location: -11
;name a4 type FLOAT local slot location: -12
;name a5 type FLOAT local slot location: -13
;name a6 type FLOAT local slot location: -14
;name a7 type FLOAT local slot location: -15


;Symbol table main
; return type: VOID
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name b type FLOAT local slot location: -1
;name c type FLOAT local slot location: -2
;name aget type FLOAT local slot location: -3
;name avget type FLOAT local slot location: -4
;name min type FLOAT local slot location: -5
;name max type FLOAT local slot location: -6
;name res type INT local slot location: -7
;name i type INT local slot location: -8
;name j type INT local slot location: -9


;Symbol table BLOCK 1
; return type: null
; subscope local var size: 0
;scope type: FOR_TYPE 


;Symbol table BLOCK 2
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 3
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table IsLargerThanOrEqualTo
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name j type FLOAT parameter slot location: 7
;name k type FLOAT parameter slot location: 8


;Symbol table BLOCK 4
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table IsSmallerThan
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name j type FLOAT parameter slot location: 7
;name k type FLOAT parameter slot location: 8


;Symbol table BLOCK 5
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table GetValue
; return type: FLOAT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name ind type INT parameter slot location: 7
;name p0 type FLOAT parameter slot location: 8
;name p1 type FLOAT parameter slot location: 9
;name p2 type FLOAT parameter slot location: 10
;name p3 type FLOAT parameter slot location: 11
;name p4 type FLOAT parameter slot location: 12
;name p5 type FLOAT parameter slot location: 13
;name p6 type FLOAT parameter slot location: 14
;name p7 type FLOAT parameter slot location: 15


;Symbol table BLOCK 6
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 7
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 8
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 9
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 10
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 11
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 12
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 13
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 14
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 15
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 16
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 17
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 18
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 19
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 20
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 21
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


; pre-conversion assignOutputID: max
; searching slot location for -- max -- in function scope main and get location -6

; post-conversion assignOutputID: $-6
; SUBSCOPE for function scope: main
; SUBSCOPE block ID: 1 scopeType: FOR

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope main and get location -8

; post-conversion assignOutputID: $-8
; searching slot location for -- i -- in function scope main and get location -8

;exit Cond: < :: i :: 4
; searching slot location for -- i -- in function scope main and get location -8

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope main and get location -8

; post-conversion assignOutputID: $-8
; searching slot location for -- i -- in function scope main and get location -8

; pre-conversion assignOutputID: j
; searching slot location for -- j -- in function scope main and get location -9

; post-conversion assignOutputID: $-9
; searching slot location for -- i -- in function scope main and get location -8

; searching slot location for -- i -- in function scope main and get location -8

; searching slot location for -- i -- in function scope main and get location -8

; pre-conversion assignOutputID: aget
; searching slot location for -- aget -- in function scope main and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- j -- in function scope main and get location -9

; searching slot location for -- j -- in function scope main and get location -9

; pre-conversion assignOutputID: avget
; searching slot location for -- avget -- in function scope main and get location -4

; post-conversion assignOutputID: $-4
; SUBSCOPE for function scope: main
; SUBSCOPE block ID: 1 scopeType: FOR
; SUBSCOPE block ID: 2 scopeType: IF

; searching slot location for -- i -- in function scope main and get location -8

; searching slot location for -- i -- in function scope main and get location -8

; searching slot location for -- j -- in function scope main and get location -9

; searching slot location for -- j -- in function scope main and get location -9

;exit Cond: > :: GetValue(i,a0,a1,a2,a3,a4,a5,a6,a7) :: GetValue(j,a0,a1,a2,a3,a4,a5,a6,a7)
; searching slot location for -- i -- in function scope main and get location -8

; searching slot location for -- j -- in function scope main and get location -9

; searching slot location for -- aget -- in function scope main and get location -3

; searching slot location for -- avget -- in function scope main and get location -4

; searching slot location for -- aget -- in function scope main and get location -3

; SUBSCOPE for function scope: main
; SUBSCOPE block ID: 1 scopeType: FOR
; SUBSCOPE block ID: 3 scopeType: ELSE

; searching slot location for -- i -- in function scope main and get location -8

; searching slot location for -- j -- in function scope main and get location -9

; searching slot location for -- aget -- in function scope main and get location -3

; searching slot location for -- avget -- in function scope main and get location -4

; searching slot location for -- avget -- in function scope main and get location -4

; SUBSCOPE for function scope: IsLargerThanOrEqualTo
; SUBSCOPE block ID: 4 scopeType: IF

; searching slot location for -- j -- in function scope IsLargerThanOrEqualTo and get location 7

;exit Cond: >= :: j :: k
; searching slot location for -- j -- in function scope IsLargerThanOrEqualTo and get location 7

; searching slot location for -- k -- in function scope IsLargerThanOrEqualTo and get location 8

;OPT BUG
; SUBSCOPE for function scope: IsLargerThanOrEqualTo
; SUBSCOPE block ID: 4 scopeType: IF

;return assignExpr: 1
;left: 1
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsLargerThanOrEqualTo
; SUBSCOPE block ID: 5 scopeType: ELSE

;OPT BUG
; SUBSCOPE for function scope: IsLargerThanOrEqualTo

;return assignExpr: 0
;left: 1
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsSmallerThan
; SUBSCOPE block ID: 6 scopeType: IF

; searching slot location for -- j -- in function scope IsSmallerThan and get location 7

; searching slot location for -- j -- in function scope IsSmallerThan and get location 7

; searching slot location for -- k -- in function scope IsSmallerThan and get location 8

; searching slot location for -- k -- in function scope IsSmallerThan and get location 8

;exit Cond: != :: IsLargerThanOrEqualTo(j,k) :: 0
;OPT BUG
; SUBSCOPE for function scope: IsSmallerThan
; SUBSCOPE block ID: 6 scopeType: IF

;return assignExpr: 0
;left: 0
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsSmallerThan
; SUBSCOPE block ID: 7 scopeType: ELSE

;OPT BUG
; SUBSCOPE for function scope: IsSmallerThan

;return assignExpr: 1
;left: 0
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 8 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 0
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p0 -- in function scope GetValue and get location 8

; searching slot location for -- p0 -- in function scope GetValue and get location 8

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 8 scopeType: IF

;return assignExpr: p0
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 10 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 1
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p1 -- in function scope GetValue and get location 9

; searching slot location for -- p1 -- in function scope GetValue and get location 9

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 10 scopeType: IF

;return assignExpr: p1
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 12 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 2
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p2 -- in function scope GetValue and get location 10

; searching slot location for -- p2 -- in function scope GetValue and get location 10

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 12 scopeType: IF

;return assignExpr: p2
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 14 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 3
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p3 -- in function scope GetValue and get location 11

; searching slot location for -- p3 -- in function scope GetValue and get location 11

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 14 scopeType: IF

;return assignExpr: p3
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 16 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 4
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p4 -- in function scope GetValue and get location 12

; searching slot location for -- p4 -- in function scope GetValue and get location 12

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 16 scopeType: IF

;return assignExpr: p4
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 18 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 5
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p5 -- in function scope GetValue and get location 13

; searching slot location for -- p5 -- in function scope GetValue and get location 13

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 18 scopeType: IF

;return assignExpr: p5
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 20 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 6
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p6 -- in function scope GetValue and get location 14

; searching slot location for -- p6 -- in function scope GetValue and get location 14

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 20 scopeType: IF

;return assignExpr: p6
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE
; SUBSCOPE block ID: 22 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 7
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p7 -- in function scope GetValue and get location 15

; searching slot location for -- p7 -- in function scope GetValue and get location 15

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE
; SUBSCOPE block ID: 22 scopeType: IF

;return assignExpr: p7
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE
; SUBSCOPE block ID: 23 scopeType: ELSE

;OPT BUG
; SUBSCOPE for function scope: GetValue

;return assignExpr: 0
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false

;IR code
;PUSH
;JSR main
;HALT

;LABEL main		 Under Func Scope: main
;LINK 10		 Under Func Scope: main
;STOREF 20.5 $T1	 Under Func Scope: main
;STOREF $T1 a0		 Under Func Scope: main
;STOREF 16.5 $T2	 Under Func Scope: main
;STOREF $T2 a1		 Under Func Scope: main
;STOREF 12.0 $T3	 Under Func Scope: main
;STOREF $T3 a2		 Under Func Scope: main
;STOREF 1.2 $T4		 Under Func Scope: main
;STOREF $T4 a3		 Under Func Scope: main
;STOREF 1.3 $T5		 Under Func Scope: main
;STOREF $T5 a4		 Under Func Scope: main
;STOREF 12.1 $T6	 Under Func Scope: main
;STOREF $T6 a5		 Under Func Scope: main
;STOREF 15.1 $T7	 Under Func Scope: main
;STOREF $T7 a6		 Under Func Scope: main
;STOREF 10.1 $T8	 Under Func Scope: main
;STOREF $T8 a7		 Under Func Scope: main
;STOREF a0 $T9		 Under Func Scope: main
;STOREF $T9 $-6		 Under Func Scope: main
;STOREI 0 $T10		 Under Func Scope: main
;STOREI $T10 $-8	 Under Func Scope: main
;LABEL label1		 Under Func Scope: main
;STOREI 4 $T11		 Under Func Scope: main
;GEI $-8 $T11 label3	 Under Func Scope: main
;STOREI 7 $T14		 Under Func Scope: main
;SUBI $T14 $-8 $T15	 Under Func Scope: main
;STOREI $T15 $-9	 Under Func Scope: main
;PUSH a7		 Under Func Scope: main
;PUSH a6		 Under Func Scope: main
;PUSH a5		 Under Func Scope: main
;PUSH a4		 Under Func Scope: main
;PUSH a3		 Under Func Scope: main
;PUSH a2		 Under Func Scope: main
;PUSH a1		 Under Func Scope: main
;PUSH a0		 Under Func Scope: main
;PUSH $-8		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR GetValue		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T16		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREF $T16 $-3	 Under Func Scope: main
;PUSH a7		 Under Func Scope: main
;PUSH a6		 Under Func Scope: main
;PUSH a5		 Under Func Scope: main
;PUSH a4		 Under Func Scope: main
;PUSH a3		 Under Func Scope: main
;PUSH a2		 Under Func Scope: main
;PUSH a1		 Under Func Scope: main
;PUSH a0		 Under Func Scope: main
;PUSH $-9		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR GetValue		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T17		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREF $T17 $-4	 Under Func Scope: main
;PUSH a7		 Under Func Scope: main
;PUSH a6		 Under Func Scope: main
;PUSH a5		 Under Func Scope: main
;PUSH a4		 Under Func Scope: main
;PUSH a3		 Under Func Scope: main
;PUSH a2		 Under Func Scope: main
;PUSH a1		 Under Func Scope: main
;PUSH a0		 Under Func Scope: main
;PUSH $-8		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR GetValue		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T18		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;PUSH a7		 Under Func Scope: main
;PUSH a6		 Under Func Scope: main
;PUSH a5		 Under Func Scope: main
;PUSH a4		 Under Func Scope: main
;PUSH a3		 Under Func Scope: main
;PUSH a2		 Under Func Scope: main
;PUSH a1		 Under Func Scope: main
;PUSH a0		 Under Func Scope: main
;PUSH $-9		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR GetValue		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T19		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;LEF $T18 $T19 label4	 Under Func Scope: main
;WRITEI $-8		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEI $-9		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-3		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-4		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-3		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;JUMP label5		 Under Func Scope: main
;LABEL label4		 Under Func Scope: main
;WRITEI $-8		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEI $-9		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-3		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-4		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-4		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;LABEL label5		 Under Func Scope: main
;STOREI 1 $T12		 Under Func Scope: main
;ADDI $-8 $T12 $T13	 Under Func Scope: main
;STOREI $T13 $-8	 Under Func Scope: main
;JUMP label1		 Under Func Scope: main
;LABEL label3		 Under Func Scope: main
;UNLINK			 Under Func Scope: main
;RET			 Under Func Scope: main

;LABEL IsLargerThanOrEqualTo	 Under Func Scope: IsLargerThanOrEqualTo
;LINK 1			 Under Func Scope: IsLargerThanOrEqualTo
;STOREF $8 $T20		 Under Func Scope: IsLargerThanOrEqualTo
;LTF $7 $T20 label6	 Under Func Scope: IsLargerThanOrEqualTo
;STOREI 1 $T21		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI $T21 $6		 Under Func Scope: IsLargerThanOrEqualTo
;UNLINK			 Under Func Scope: IsLargerThanOrEqualTo
;RET			 Under Func Scope: IsLargerThanOrEqualTo
;JUMP label7		 Under Func Scope: IsLargerThanOrEqualTo
;LABEL label6		 Under Func Scope: IsLargerThanOrEqualTo
;LABEL label7		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI 0 $T22		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI $T22 $6		 Under Func Scope: IsLargerThanOrEqualTo
;UNLINK			 Under Func Scope: IsLargerThanOrEqualTo
;RET			 Under Func Scope: IsLargerThanOrEqualTo

;LABEL IsSmallerThan	 Under Func Scope: IsSmallerThan
;LINK 1			 Under Func Scope: IsSmallerThan
;PUSH $8		 Under Func Scope: IsSmallerThan
;PUSH $7		 Under Func Scope: IsSmallerThan
;PUSH 			 Under Func Scope: IsSmallerThan
;PUSHREG		 Under Func Scope: IsSmallerThan
;JSR IsLargerThanOrEqualTo	 Under Func Scope: IsSmallerThan
;POPREG			 Under Func Scope: IsSmallerThan
;POP $T23		 Under Func Scope: IsSmallerThan
;POP 			 Under Func Scope: IsSmallerThan
;POP 			 Under Func Scope: IsSmallerThan
;STOREI 0 $T24		 Under Func Scope: IsSmallerThan
;EQI $T23 $T24 label8	 Under Func Scope: IsSmallerThan
;STOREI 0 $T25		 Under Func Scope: IsSmallerThan
;STOREI $T25 $6		 Under Func Scope: IsSmallerThan
;UNLINK			 Under Func Scope: IsSmallerThan
;RET			 Under Func Scope: IsSmallerThan
;JUMP label9		 Under Func Scope: IsSmallerThan
;LABEL label8		 Under Func Scope: IsSmallerThan
;LABEL label9		 Under Func Scope: IsSmallerThan
;STOREI 1 $T26		 Under Func Scope: IsSmallerThan
;STOREI $T26 $6		 Under Func Scope: IsSmallerThan
;UNLINK			 Under Func Scope: IsSmallerThan
;RET			 Under Func Scope: IsSmallerThan

;LABEL GetValue		 Under Func Scope: GetValue
;LINK 1			 Under Func Scope: GetValue
;STOREI 0 $T27		 Under Func Scope: GetValue
;NEI $7 $T27 label10	 Under Func Scope: GetValue
;STOREF $8 $T28		 Under Func Scope: GetValue
;STOREF $T28 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label11		 Under Func Scope: GetValue
;LABEL label10		 Under Func Scope: GetValue
;STOREI 1 $T29		 Under Func Scope: GetValue
;NEI $7 $T29 label12	 Under Func Scope: GetValue
;STOREF $9 $T30		 Under Func Scope: GetValue
;STOREF $T30 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label13		 Under Func Scope: GetValue
;LABEL label12		 Under Func Scope: GetValue
;STOREI 2 $T31		 Under Func Scope: GetValue
;NEI $7 $T31 label14	 Under Func Scope: GetValue
;STOREF $10 $T32	 Under Func Scope: GetValue
;STOREF $T32 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label15		 Under Func Scope: GetValue
;LABEL label14		 Under Func Scope: GetValue
;STOREI 3 $T33		 Under Func Scope: GetValue
;NEI $7 $T33 label16	 Under Func Scope: GetValue
;STOREF $11 $T34	 Under Func Scope: GetValue
;STOREF $T34 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label17		 Under Func Scope: GetValue
;LABEL label16		 Under Func Scope: GetValue
;STOREI 4 $T35		 Under Func Scope: GetValue
;NEI $7 $T35 label18	 Under Func Scope: GetValue
;STOREF $12 $T36	 Under Func Scope: GetValue
;STOREF $T36 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label19		 Under Func Scope: GetValue
;LABEL label18		 Under Func Scope: GetValue
;STOREI 5 $T37		 Under Func Scope: GetValue
;NEI $7 $T37 label20	 Under Func Scope: GetValue
;STOREF $13 $T38	 Under Func Scope: GetValue
;STOREF $T38 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label21		 Under Func Scope: GetValue
;LABEL label20		 Under Func Scope: GetValue
;STOREI 6 $T39		 Under Func Scope: GetValue
;NEI $7 $T39 label22	 Under Func Scope: GetValue
;STOREF $14 $T40	 Under Func Scope: GetValue
;STOREF $T40 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label23		 Under Func Scope: GetValue
;LABEL label22		 Under Func Scope: GetValue
;STOREI 7 $T41		 Under Func Scope: GetValue
;NEI $7 $T41 label24	 Under Func Scope: GetValue
;STOREF $15 $T42	 Under Func Scope: GetValue
;STOREF $T42 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label25		 Under Func Scope: GetValue
;LABEL label24		 Under Func Scope: GetValue
;LABEL label25		 Under Func Scope: GetValue
;LABEL label23		 Under Func Scope: GetValue
;LABEL label21		 Under Func Scope: GetValue
;LABEL label19		 Under Func Scope: GetValue
;LABEL label17		 Under Func Scope: GetValue
;LABEL label15		 Under Func Scope: GetValue
;LABEL label13		 Under Func Scope: GetValue
;LABEL label11		 Under Func Scope: GetValue
;STOREI 0 $T43		 Under Func Scope: GetValue
;STOREI $T43 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue

; ========= CFG IR NODE =========

;LABEL main		P: 					S: ;LINK 10		 <== BB leader
;LINK 10		P: ;LABEL main				S: ;STOREF 20.5 $T1	
;STOREF 20.5 $T1	P: ;LINK 10				S: ;STOREF $T1 a0	
;STOREF $T1 a0		P: ;STOREF 20.5 $T1		S: ;STOREF 16.5 $T2	
;STOREF 16.5 $T2	P: ;STOREF $T1 a0			S: ;STOREF $T2 a1	
;STOREF $T2 a1		P: ;STOREF 16.5 $T2		S: ;STOREF 12.0 $T3	
;STOREF 12.0 $T3	P: ;STOREF $T2 a1			S: ;STOREF $T3 a2	
;STOREF $T3 a2		P: ;STOREF 12.0 $T3		S: ;STOREF 1.2 $T4	
;STOREF 1.2 $T4		P: ;STOREF $T3 a2		S: ;STOREF $T4 a3	
;STOREF $T4 a3		P: ;STOREF 1.2 $T4		S: ;STOREF 1.3 $T5	
;STOREF 1.3 $T5		P: ;STOREF $T4 a3		S: ;STOREF $T5 a4	
;STOREF $T5 a4		P: ;STOREF 1.3 $T5		S: ;STOREF 12.1 $T6	
;STOREF 12.1 $T6	P: ;STOREF $T5 a4			S: ;STOREF $T6 a5	
;STOREF $T6 a5		P: ;STOREF 12.1 $T6		S: ;STOREF 15.1 $T7	
;STOREF 15.1 $T7	P: ;STOREF $T6 a5			S: ;STOREF $T7 a6	
;STOREF $T7 a6		P: ;STOREF 15.1 $T7		S: ;STOREF 10.1 $T8	
;STOREF 10.1 $T8	P: ;STOREF $T7 a6			S: ;STOREF $T8 a7	
;STOREF $T8 a7		P: ;STOREF 10.1 $T8		S: ;STOREF a0 $T9	
;STOREF a0 $T9		P: ;STOREF $T8 a7			S: ;STOREF $T9 $-6	
;STOREF $T9 $-6		P: ;STOREF a0 $T9		S: ;STOREI 0 $T10	
;STOREI 0 $T10		P: ;STOREF $T9 $-6		S: ;STOREI $T10 $-8	
;STOREI $T10 $-8	P: ;STOREI 0 $T10			S: ;LABEL label1	
;LABEL label1		P: ;STOREI $T10 $-8	;JUMP label1		S: ;STOREI 4 $T11		 <== BB leader
;STOREI 4 $T11		P: ;LABEL label1			S: ;GEI $-8 $T11 label3	
;GEI $-8 $T11 label3	P: ;STOREI 4 $T11			S: ;STOREI 7 $T14	;LABEL label3	
;STOREI 7 $T14		P: ;GEI $-8 $T11 label3		S: ;SUBI $T14 $-8 $T15		 <== BB leader
;SUBI $T14 $-8 $T15	P: ;STOREI 7 $T14			S: ;STOREI $T15 $-9	
;STOREI $T15 $-9	P: ;SUBI $T14 $-8 $T15			S: ;PUSH a7	
;PUSH a7		P: ;STOREI $T15 $-9			S: ;PUSH a6	
;PUSH a6		P: ;PUSH a7				S: ;PUSH a5	
;PUSH a5		P: ;PUSH a6				S: ;PUSH a4	
;PUSH a4		P: ;PUSH a5				S: ;PUSH a3	
;PUSH a3		P: ;PUSH a4				S: ;PUSH a2	
;PUSH a2		P: ;PUSH a3				S: ;PUSH a1	
;PUSH a1		P: ;PUSH a2				S: ;PUSH a0	
;PUSH a0		P: ;PUSH a1				S: ;PUSH $-8	
;PUSH $-8		P: ;PUSH a0				S: ;PUSH 	
;PUSH 			P: ;PUSH $-8			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T16	
;POP $T16		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T16			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREF $T16 $-3	
;STOREF $T16 $-3	P: ;POP 				S: ;PUSH a7	
;PUSH a7		P: ;STOREF $T16 $-3			S: ;PUSH a6	
;PUSH a6		P: ;PUSH a7				S: ;PUSH a5	
;PUSH a5		P: ;PUSH a6				S: ;PUSH a4	
;PUSH a4		P: ;PUSH a5				S: ;PUSH a3	
;PUSH a3		P: ;PUSH a4				S: ;PUSH a2	
;PUSH a2		P: ;PUSH a3				S: ;PUSH a1	
;PUSH a1		P: ;PUSH a2				S: ;PUSH a0	
;PUSH a0		P: ;PUSH a1				S: ;PUSH $-9	
;PUSH $-9		P: ;PUSH a0				S: ;PUSH 	
;PUSH 			P: ;PUSH $-9			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T17	
;POP $T17		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T17			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREF $T17 $-4	
;STOREF $T17 $-4	P: ;POP 				S: ;PUSH a7	
;PUSH a7		P: ;STOREF $T17 $-4			S: ;PUSH a6	
;PUSH a6		P: ;PUSH a7				S: ;PUSH a5	
;PUSH a5		P: ;PUSH a6				S: ;PUSH a4	
;PUSH a4		P: ;PUSH a5				S: ;PUSH a3	
;PUSH a3		P: ;PUSH a4				S: ;PUSH a2	
;PUSH a2		P: ;PUSH a3				S: ;PUSH a1	
;PUSH a1		P: ;PUSH a2				S: ;PUSH a0	
;PUSH a0		P: ;PUSH a1				S: ;PUSH $-8	
;PUSH $-8		P: ;PUSH a0				S: ;PUSH 	
;PUSH 			P: ;PUSH $-8			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T18	
;POP $T18		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T18			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;PUSH a7	
;PUSH a7		P: ;POP 				S: ;PUSH a6	
;PUSH a6		P: ;PUSH a7				S: ;PUSH a5	
;PUSH a5		P: ;PUSH a6				S: ;PUSH a4	
;PUSH a4		P: ;PUSH a5				S: ;PUSH a3	
;PUSH a3		P: ;PUSH a4				S: ;PUSH a2	
;PUSH a2		P: ;PUSH a3				S: ;PUSH a1	
;PUSH a1		P: ;PUSH a2				S: ;PUSH a0	
;PUSH a0		P: ;PUSH a1				S: ;PUSH $-9	
;PUSH $-9		P: ;PUSH a0				S: ;PUSH 	
;PUSH 			P: ;PUSH $-9			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T19	
;POP $T19		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T19			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;LEF $T18 $T19 label4	
;LEF $T18 $T19 label4	P: ;POP 				S: ;WRITEI $-8	;LABEL label4	
;WRITEI $-8		P: ;LEF $T18 $T19 label4		S: ;WRITES space		 <== BB leader
;WRITES space		P: ;WRITEI $-8			S: ;WRITEI $-9	
;WRITEI $-9		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEI $-9			S: ;WRITEF $-3	
;WRITEF $-3		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-3			S: ;WRITEF $-4	
;WRITEF $-4		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-4			S: ;WRITEF $-3	
;WRITEF $-3		P: ;WRITES space			S: ;WRITES eol	
;WRITES eol		P: ;WRITEF $-3			S: ;JUMP label5	
;JUMP label5		P: ;WRITES eol			S: ;LABEL label5	
;LABEL label4		P: ;LEF $T18 $T19 label4		S: ;WRITEI $-8		 <== BB leader
;WRITEI $-8		P: ;LABEL label4			S: ;WRITES space	
;WRITES space		P: ;WRITEI $-8			S: ;WRITEI $-9	
;WRITEI $-9		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEI $-9			S: ;WRITEF $-3	
;WRITEF $-3		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-3			S: ;WRITEF $-4	
;WRITEF $-4		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-4			S: ;WRITEF $-4	
;WRITEF $-4		P: ;WRITES space			S: ;WRITES eol	
;WRITES eol		P: ;WRITEF $-4			S: ;LABEL label5	
;LABEL label5		P: ;WRITES eol	;JUMP label5		S: ;STOREI 1 $T12		 <== BB leader
;STOREI 1 $T12		P: ;LABEL label5			S: ;ADDI $-8 $T12 $T13	
;ADDI $-8 $T12 $T13	P: ;STOREI 1 $T12			S: ;STOREI $T13 $-8	
;STOREI $T13 $-8	P: ;ADDI $-8 $T12 $T13			S: ;JUMP label1	
;JUMP label1		P: ;STOREI $T13 $-8			S: ;LABEL label1	
;LABEL label3		P: ;GEI $-8 $T11 label3		S: ;UNLINK		 <== BB leader
;UNLINK			P: ;LABEL label3			S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL IsLargerThanOrEqualTo	P: 				S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL IsLargerThanOrEqualTo		S: ;STOREF $8 $T20	
;STOREF $8 $T20		P: ;LINK 1			S: ;LTF $7 $T20 label6	
;LTF $7 $T20 label6	P: ;STOREF $8 $T20			S: ;STOREI 1 $T21	;LABEL label6	
;STOREI 1 $T21		P: ;LTF $7 $T20 label6		S: ;STOREI $T21 $6		 <== BB leader
;STOREI $T21 $6		P: ;STOREI 1 $T21		S: ;UNLINK	
;UNLINK			P: ;STOREI $T21 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label7		P: ;RET				S: ;LABEL label7	
;LABEL label6		P: ;LTF $7 $T20 label6		S: ;LABEL label7		 <== BB leader
;LABEL label7		P: ;LABEL label6	;JUMP label7		S: ;STOREI 0 $T22		 <== BB leader
;STOREI 0 $T22		P: ;LABEL label7			S: ;STOREI $T22 $6	
;STOREI $T22 $6		P: ;STOREI 0 $T22		S: ;UNLINK	
;UNLINK			P: ;STOREI $T22 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL IsSmallerThan	P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL IsSmallerThan		S: ;PUSH $8	
;PUSH $8		P: ;LINK 1				S: ;PUSH $7	
;PUSH $7		P: ;PUSH $8				S: ;PUSH 	
;PUSH 			P: ;PUSH $7			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsLargerThanOrEqualTo	
;JSR IsLargerThanOrEqualTo	P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR IsLargerThanOrEqualTo		S: ;POP $T23	
;POP $T23		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T23			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI 0 $T24	
;STOREI 0 $T24		P: ;POP 				S: ;EQI $T23 $T24 label8	
;EQI $T23 $T24 label8	P: ;STOREI 0 $T24			S: ;STOREI 0 $T25	;LABEL label8	
;STOREI 0 $T25		P: ;EQI $T23 $T24 label8		S: ;STOREI $T25 $6		 <== BB leader
;STOREI $T25 $6		P: ;STOREI 0 $T25		S: ;UNLINK	
;UNLINK			P: ;STOREI $T25 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label9		P: ;RET				S: ;LABEL label9	
;LABEL label8		P: ;EQI $T23 $T24 label8		S: ;LABEL label9		 <== BB leader
;LABEL label9		P: ;LABEL label8	;JUMP label9		S: ;STOREI 1 $T26		 <== BB leader
;STOREI 1 $T26		P: ;LABEL label9			S: ;STOREI $T26 $6	
;STOREI $T26 $6		P: ;STOREI 1 $T26		S: ;UNLINK	
;UNLINK			P: ;STOREI $T26 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL GetValue		P: 				S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL GetValue		S: ;STOREI 0 $T27	
;STOREI 0 $T27		P: ;LINK 1			S: ;NEI $7 $T27 label10	
;NEI $7 $T27 label10	P: ;STOREI 0 $T27			S: ;STOREF $8 $T28	;LABEL label10	
;STOREF $8 $T28		P: ;NEI $7 $T27 label10		S: ;STOREF $T28 $6		 <== BB leader
;STOREF $T28 $6		P: ;STOREF $8 $T28		S: ;UNLINK	
;UNLINK			P: ;STOREF $T28 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label11		P: ;RET				S: ;LABEL label11	
;LABEL label10		P: ;NEI $7 $T27 label10		S: ;STOREI 1 $T29		 <== BB leader
;STOREI 1 $T29		P: ;LABEL label10			S: ;NEI $7 $T29 label12	
;NEI $7 $T29 label12	P: ;STOREI 1 $T29			S: ;STOREF $9 $T30	;LABEL label12	
;STOREF $9 $T30		P: ;NEI $7 $T29 label12		S: ;STOREF $T30 $6		 <== BB leader
;STOREF $T30 $6		P: ;STOREF $9 $T30		S: ;UNLINK	
;UNLINK			P: ;STOREF $T30 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label13		P: ;RET				S: ;LABEL label13	
;LABEL label12		P: ;NEI $7 $T29 label12		S: ;STOREI 2 $T31		 <== BB leader
;STOREI 2 $T31		P: ;LABEL label12			S: ;NEI $7 $T31 label14	
;NEI $7 $T31 label14	P: ;STOREI 2 $T31			S: ;STOREF $10 $T32	;LABEL label14	
;STOREF $10 $T32	P: ;NEI $7 $T31 label14			S: ;STOREF $T32 $6		 <== BB leader
;STOREF $T32 $6		P: ;STOREF $10 $T32		S: ;UNLINK	
;UNLINK			P: ;STOREF $T32 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label15		P: ;RET				S: ;LABEL label15	
;LABEL label14		P: ;NEI $7 $T31 label14		S: ;STOREI 3 $T33		 <== BB leader
;STOREI 3 $T33		P: ;LABEL label14			S: ;NEI $7 $T33 label16	
;NEI $7 $T33 label16	P: ;STOREI 3 $T33			S: ;STOREF $11 $T34	;LABEL label16	
;STOREF $11 $T34	P: ;NEI $7 $T33 label16			S: ;STOREF $T34 $6		 <== BB leader
;STOREF $T34 $6		P: ;STOREF $11 $T34		S: ;UNLINK	
;UNLINK			P: ;STOREF $T34 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label17		P: ;RET				S: ;LABEL label17	
;LABEL label16		P: ;NEI $7 $T33 label16		S: ;STOREI 4 $T35		 <== BB leader
;STOREI 4 $T35		P: ;LABEL label16			S: ;NEI $7 $T35 label18	
;NEI $7 $T35 label18	P: ;STOREI 4 $T35			S: ;STOREF $12 $T36	;LABEL label18	
;STOREF $12 $T36	P: ;NEI $7 $T35 label18			S: ;STOREF $T36 $6		 <== BB leader
;STOREF $T36 $6		P: ;STOREF $12 $T36		S: ;UNLINK	
;UNLINK			P: ;STOREF $T36 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label19		P: ;RET				S: ;LABEL label19	
;LABEL label18		P: ;NEI $7 $T35 label18		S: ;STOREI 5 $T37		 <== BB leader
;STOREI 5 $T37		P: ;LABEL label18			S: ;NEI $7 $T37 label20	
;NEI $7 $T37 label20	P: ;STOREI 5 $T37			S: ;STOREF $13 $T38	;LABEL label20	
;STOREF $13 $T38	P: ;NEI $7 $T37 label20			S: ;STOREF $T38 $6		 <== BB leader
;STOREF $T38 $6		P: ;STOREF $13 $T38		S: ;UNLINK	
;UNLINK			P: ;STOREF $T38 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label21		P: ;RET				S: ;LABEL label21	
;LABEL label20		P: ;NEI $7 $T37 label20		S: ;STOREI 6 $T39		 <== BB leader
;STOREI 6 $T39		P: ;LABEL label20			S: ;NEI $7 $T39 label22	
;NEI $7 $T39 label22	P: ;STOREI 6 $T39			S: ;STOREF $14 $T40	;LABEL label22	
;STOREF $14 $T40	P: ;NEI $7 $T39 label22			S: ;STOREF $T40 $6		 <== BB leader
;STOREF $T40 $6		P: ;STOREF $14 $T40		S: ;UNLINK	
;UNLINK			P: ;STOREF $T40 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label23		P: ;RET				S: ;LABEL label23	
;LABEL label22		P: ;NEI $7 $T39 label22		S: ;STOREI 7 $T41		 <== BB leader
;STOREI 7 $T41		P: ;LABEL label22			S: ;NEI $7 $T41 label24	
;NEI $7 $T41 label24	P: ;STOREI 7 $T41			S: ;STOREF $15 $T42	;LABEL label24	
;STOREF $15 $T42	P: ;NEI $7 $T41 label24			S: ;STOREF $T42 $6		 <== BB leader
;STOREF $T42 $6		P: ;STOREF $15 $T42		S: ;UNLINK	
;UNLINK			P: ;STOREF $T42 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label25		P: ;RET				S: ;LABEL label25	
;LABEL label24		P: ;NEI $7 $T41 label24		S: ;LABEL label25		 <== BB leader
;LABEL label25		P: ;LABEL label24	;JUMP label25		S: ;LABEL label23		 <== BB leader
;LABEL label23		P: ;LABEL label25	;JUMP label23		S: ;LABEL label21		 <== BB leader
;LABEL label21		P: ;LABEL label23	;JUMP label21		S: ;LABEL label19		 <== BB leader
;LABEL label19		P: ;LABEL label21	;JUMP label19		S: ;LABEL label17		 <== BB leader
;LABEL label17		P: ;LABEL label19	;JUMP label17		S: ;LABEL label15		 <== BB leader
;LABEL label15		P: ;LABEL label17	;JUMP label15		S: ;LABEL label13		 <== BB leader
;LABEL label13		P: ;LABEL label15	;JUMP label13		S: ;LABEL label11		 <== BB leader
;LABEL label11		P: ;LABEL label13	;JUMP label11		S: ;STOREI 0 $T43		 <== BB leader
;STOREI 0 $T43		P: ;LABEL label11			S: ;STOREI $T43 $6	
;STOREI $T43 $6		P: ;STOREI 0 $T43		S: ;UNLINK	
;UNLINK			P: ;STOREI $T43 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

; ========= CFG IR NODE / KILL/ GEN =========

;LABEL main		Kill: 				Gen: 
;LINK 10		Kill: 					Gen: 
;STOREF 20.5 $T1	Kill: $T1, 				Gen: 
;STOREF $T1 a0		Kill: a0, 			Gen: $T1, 
;STOREF 16.5 $T2	Kill: $T2, 				Gen: 
;STOREF $T2 a1		Kill: a1, 			Gen: $T2, 
;STOREF 12.0 $T3	Kill: $T3, 				Gen: 
;STOREF $T3 a2		Kill: a2, 			Gen: $T3, 
;STOREF 1.2 $T4		Kill: $T4, 			Gen: 
;STOREF $T4 a3		Kill: a3, 			Gen: $T4, 
;STOREF 1.3 $T5		Kill: $T5, 			Gen: 
;STOREF $T5 a4		Kill: a4, 			Gen: $T5, 
;STOREF 12.1 $T6	Kill: $T6, 				Gen: 
;STOREF $T6 a5		Kill: a5, 			Gen: $T6, 
;STOREF 15.1 $T7	Kill: $T7, 				Gen: 
;STOREF $T7 a6		Kill: a6, 			Gen: $T7, 
;STOREF 10.1 $T8	Kill: $T8, 				Gen: 
;STOREF $T8 a7		Kill: a7, 			Gen: $T8, 
;STOREF a0 $T9		Kill: $T9, 			Gen: a0, 
;STOREF $T9 $-6		Kill: $-6, 			Gen: $T9, 
;STOREI 0 $T10		Kill: $T10, 			Gen: 
;STOREI $T10 $-8	Kill: $-8, 				Gen: $T10, 
;LABEL label1		Kill: 				Gen: 
;STOREI 4 $T11		Kill: $T11, 			Gen: 
;GEI $-8 $T11 label3	Kill: 				Gen: $-8, $T11, 
;STOREI 7 $T14		Kill: $T14, 			Gen: 
;SUBI $T14 $-8 $T15	Kill: $T15, 				Gen: $-8, $T14, 
;STOREI $T15 $-9	Kill: $-9, 				Gen: $T15, 
;PUSH a7		Kill: 					Gen: a7, 
;PUSH a6		Kill: 					Gen: a6, 
;PUSH a5		Kill: 					Gen: a5, 
;PUSH a4		Kill: 					Gen: a4, 
;PUSH a3		Kill: 					Gen: a3, 
;PUSH a2		Kill: 					Gen: a2, 
;PUSH a1		Kill: 					Gen: a1, 
;PUSH a0		Kill: 					Gen: a0, 
;PUSH $-8		Kill: 					Gen: $-8, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: a0, a1, a2, a3, a4, a5, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T16		Kill: $T16, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREF $T16 $-3	Kill: $-3, 				Gen: $T16, 
;PUSH a7		Kill: 					Gen: a7, 
;PUSH a6		Kill: 					Gen: a6, 
;PUSH a5		Kill: 					Gen: a5, 
;PUSH a4		Kill: 					Gen: a4, 
;PUSH a3		Kill: 					Gen: a3, 
;PUSH a2		Kill: 					Gen: a2, 
;PUSH a1		Kill: 					Gen: a1, 
;PUSH a0		Kill: 					Gen: a0, 
;PUSH $-9		Kill: 					Gen: $-9, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: a0, a1, a2, a3, a4, a5, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T17		Kill: $T17, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREF $T17 $-4	Kill: $-4, 				Gen: $T17, 
;PUSH a7		Kill: 					Gen: a7, 
;PUSH a6		Kill: 					Gen: a6, 
;PUSH a5		Kill: 					Gen: a5, 
;PUSH a4		Kill: 					Gen: a4, 
;PUSH a3		Kill: 					Gen: a3, 
;PUSH a2		Kill: 					Gen: a2, 
;PUSH a1		Kill: 					Gen: a1, 
;PUSH a0		Kill: 					Gen: a0, 
;PUSH $-8		Kill: 					Gen: $-8, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: a0, a1, a2, a3, a4, a5, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T18		Kill: $T18, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;PUSH a7		Kill: 					Gen: a7, 
;PUSH a6		Kill: 					Gen: a6, 
;PUSH a5		Kill: 					Gen: a5, 
;PUSH a4		Kill: 					Gen: a4, 
;PUSH a3		Kill: 					Gen: a3, 
;PUSH a2		Kill: 					Gen: a2, 
;PUSH a1		Kill: 					Gen: a1, 
;PUSH a0		Kill: 					Gen: a0, 
;PUSH $-9		Kill: 					Gen: $-9, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: a0, a1, a2, a3, a4, a5, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T19		Kill: $T19, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;LEF $T18 $T19 label4	Kill: 				Gen: $T19, $T18, 
;WRITEI $-8		Kill: 				Gen: $-8, 
;WRITES space		Kill: 				Gen: 
;WRITEI $-9		Kill: 				Gen: $-9, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-3		Kill: 				Gen: $-3, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-4		Kill: 				Gen: $-4, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-3		Kill: 				Gen: $-3, 
;WRITES eol		Kill: 				Gen: 
;JUMP label5		Kill: 				Gen: 
;LABEL label4		Kill: 				Gen: 
;WRITEI $-8		Kill: 				Gen: $-8, 
;WRITES space		Kill: 				Gen: 
;WRITEI $-9		Kill: 				Gen: $-9, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-3		Kill: 				Gen: $-3, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-4		Kill: 				Gen: $-4, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-4		Kill: 				Gen: $-4, 
;WRITES eol		Kill: 				Gen: 
;LABEL label5		Kill: 				Gen: 
;STOREI 1 $T12		Kill: $T12, 			Gen: 
;ADDI $-8 $T12 $T13	Kill: $T13, 				Gen: $-8, $T12, 
;STOREI $T13 $-8	Kill: $-8, 				Gen: $T13, 
;JUMP label1		Kill: 				Gen: 
;LABEL label3		Kill: 				Gen: 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL IsLargerThanOrEqualTo	Kill: 			Gen: 
;LINK 1			Kill: 				Gen: 
;STOREF $8 $T20		Kill: $T20, 			Gen: $8, 
;LTF $7 $T20 label6	Kill: 				Gen: $7, $T20, 
;STOREI 1 $T21		Kill: $T21, 			Gen: 
;STOREI $T21 $6		Kill: $6, 			Gen: $T21, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label7		Kill: 				Gen: 
;LABEL label6		Kill: 				Gen: 
;LABEL label7		Kill: 				Gen: 
;STOREI 0 $T22		Kill: $T22, 			Gen: 
;STOREI $T22 $6		Kill: $6, 			Gen: $T22, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL IsSmallerThan	Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;PUSH $8		Kill: 					Gen: $8, 
;PUSH $7		Kill: 					Gen: $7, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsLargerThanOrEqualTo	Kill: 			Gen: a0, a1, a2, a3, a4, a5, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T23		Kill: $T23, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI 0 $T24		Kill: $T24, 			Gen: 
;EQI $T23 $T24 label8	Kill: 				Gen: $T23, $T24, 
;STOREI 0 $T25		Kill: $T25, 			Gen: 
;STOREI $T25 $6		Kill: $6, 			Gen: $T25, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label9		Kill: 				Gen: 
;LABEL label8		Kill: 				Gen: 
;LABEL label9		Kill: 				Gen: 
;STOREI 1 $T26		Kill: $T26, 			Gen: 
;STOREI $T26 $6		Kill: $6, 			Gen: $T26, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL GetValue		Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;STOREI 0 $T27		Kill: $T27, 			Gen: 
;NEI $7 $T27 label10	Kill: 				Gen: $7, $T27, 
;STOREF $8 $T28		Kill: $T28, 			Gen: $8, 
;STOREF $T28 $6		Kill: $6, 			Gen: $T28, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label11		Kill: 				Gen: 
;LABEL label10		Kill: 				Gen: 
;STOREI 1 $T29		Kill: $T29, 			Gen: 
;NEI $7 $T29 label12	Kill: 				Gen: $7, $T29, 
;STOREF $9 $T30		Kill: $T30, 			Gen: $9, 
;STOREF $T30 $6		Kill: $6, 			Gen: $T30, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label13		Kill: 				Gen: 
;LABEL label12		Kill: 				Gen: 
;STOREI 2 $T31		Kill: $T31, 			Gen: 
;NEI $7 $T31 label14	Kill: 				Gen: $7, $T31, 
;STOREF $10 $T32	Kill: $T32, 				Gen: $10, 
;STOREF $T32 $6		Kill: $6, 			Gen: $T32, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label15		Kill: 				Gen: 
;LABEL label14		Kill: 				Gen: 
;STOREI 3 $T33		Kill: $T33, 			Gen: 
;NEI $7 $T33 label16	Kill: 				Gen: $7, $T33, 
;STOREF $11 $T34	Kill: $T34, 				Gen: $11, 
;STOREF $T34 $6		Kill: $6, 			Gen: $T34, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label17		Kill: 				Gen: 
;LABEL label16		Kill: 				Gen: 
;STOREI 4 $T35		Kill: $T35, 			Gen: 
;NEI $7 $T35 label18	Kill: 				Gen: $7, $T35, 
;STOREF $12 $T36	Kill: $T36, 				Gen: $12, 
;STOREF $T36 $6		Kill: $6, 			Gen: $T36, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label19		Kill: 				Gen: 
;LABEL label18		Kill: 				Gen: 
;STOREI 5 $T37		Kill: $T37, 			Gen: 
;NEI $7 $T37 label20	Kill: 				Gen: $T37, $7, 
;STOREF $13 $T38	Kill: $T38, 				Gen: $13, 
;STOREF $T38 $6		Kill: $6, 			Gen: $T38, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label21		Kill: 				Gen: 
;LABEL label20		Kill: 				Gen: 
;STOREI 6 $T39		Kill: $T39, 			Gen: 
;NEI $7 $T39 label22	Kill: 				Gen: $T39, $7, 
;STOREF $14 $T40	Kill: $T40, 				Gen: $14, 
;STOREF $T40 $6		Kill: $6, 			Gen: $T40, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label23		Kill: 				Gen: 
;LABEL label22		Kill: 				Gen: 
;STOREI 7 $T41		Kill: $T41, 			Gen: 
;NEI $7 $T41 label24	Kill: 				Gen: $7, $T41, 
;STOREF $15 $T42	Kill: $T42, 				Gen: $15, 
;STOREF $T42 $6		Kill: $6, 			Gen: $T42, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label25		Kill: 				Gen: 
;LABEL label24		Kill: 				Gen: 
;LABEL label25		Kill: 				Gen: 
;LABEL label23		Kill: 				Gen: 
;LABEL label21		Kill: 				Gen: 
;LABEL label19		Kill: 				Gen: 
;LABEL label17		Kill: 				Gen: 
;LABEL label15		Kill: 				Gen: 
;LABEL label13		Kill: 				Gen: 
;LABEL label11		Kill: 				Gen: 
;STOREI 0 $T43		Kill: $T43, 			Gen: 
;STOREI $T43 $6		Kill: $6, 			Gen: $T43, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

; ========= CFG IR NODE / LIVE IN / LIVE OUT =========

;LABEL main		Live IN: 				Live OUT: 
;LINK 10		Live IN: 				Live OUT: 
;STOREF 20.5 $T1	Live IN: 				Live OUT: $T1, 
;STOREF $T1 a0		Live IN: $T1, 			Live OUT: a0, 
;STOREF 16.5 $T2	Live IN: a0, 				Live OUT: $T2, a0, 
;STOREF $T2 a1		Live IN: $T2, a0, 		Live OUT: a0, a1, 
;STOREF 12.0 $T3	Live IN: a1, a0, 			Live OUT: $T3, a0, a1, 
;STOREF $T3 a2		Live IN: a1, $T3, a0, 		Live OUT: a0, a1, a2, 
;STOREF 1.2 $T4		Live IN: a1, a2, a0, 		Live OUT: a0, $T4, a1, a2, 
;STOREF $T4 a3		Live IN: a1, a2, $T4, a0, 	Live OUT: a0, a1, a2, a3, 
;STOREF 1.3 $T5		Live IN: a1, a2, a3, a0, 	Live OUT: a0, $T5, a1, a2, a3, 
;STOREF $T5 a4		Live IN: a1, a2, a3, a0, $T5, 	Live OUT: a0, a1, a2, a3, a4, 
;STOREF 12.1 $T6	Live IN: a1, a2, a3, a4, a0, 		Live OUT: $T6, a0, a1, a2, a3, a4, 
;STOREF $T6 a5		Live IN: a1, a2, a3, a4, $T6, a0, 	Live OUT: a0, a1, a2, a3, a4, a5, 
;STOREF 15.1 $T7	Live IN: a0, a1, a2, a3, a4, a5, 	Live OUT: $T7, a0, a1, a2, a3, a4, a5, 
;STOREF $T7 a6		Live IN: $T7, a0, a1, a2, a3, a4, a5, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, 
;STOREF 10.1 $T8	Live IN: a0, a1, a2, a3, a4, a5, a6, 	Live OUT: a0, a1, a2, a3, $T8, a4, a5, a6, 
;STOREF $T8 a7		Live IN: a0, a1, a2, $T8, a3, a4, a5, a6, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREF a0 $T9		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, $T9, a5, a6, a7, 
;STOREF $T9 $-6		Live IN: a0, a1, a2, a3, $T9, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 0 $T10		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $T10, a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREI $T10 $-8	Live IN: $T10, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label1		Live IN: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 4 $T11		Live IN: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $T11, a5, a6, a7, 
;GEI $-8 $T11 label3	Live IN: $-8, a0, a1, a2, a3, $T11, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 7 $T14		Live IN: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, $T14, a2, a3, a4, a5, a6, a7, 
;SUBI $T14 $-8 $T15	Live IN: $-8, a0, $T14, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, $T15, 
;STOREI $T15 $-9	Live IN: $-8, a0, a1, a2, a3, a4, a5, a6, a7, $T15, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a7		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a6		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a5		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a4		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a3		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a2		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a1		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a0		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH $-8		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH 			Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSHREG		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;JSR GetValue		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;POPREG			Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, 
;POP $T16		Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, $T16, 
;POP 			Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, $T16, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, $T16, 
;POP 			Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, $T16, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, $T16, 
;POP 			Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, $T16, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, $T16, 
;POP 			Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, $T16, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, $T16, 
;POP 			Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, $T16, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, $T16, 
;POP 			Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, $T16, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, $T16, 
;POP 			Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, $T16, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, $T16, 
;POP 			Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, $T16, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, $T16, 
;POP 			Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, $T16, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, $-9, a5, a6, a7, $T16, 
;STOREF $T16 $-3	Live IN: $-8, a0, a1, a2, a3, a4, a5, $-9, a6, $T16, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a7		Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a6		Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a5		Live IN: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;PUSH a4		Live IN: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;PUSH a3		Live IN: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;PUSH a2		Live IN: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;PUSH a1		Live IN: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;PUSH a0		Live IN: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;PUSH $-9		Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH 			Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSHREG		Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;JSR GetValue		Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;POPREG			Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;POP $T17		Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, $T17, a7, 
;POP 			Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, $T17, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, $T17, a7, 
;POP 			Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, $T17, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, $T17, a7, 
;POP 			Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, $T17, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, $T17, a7, 
;POP 			Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, $T17, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, $T17, a7, 
;POP 			Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, $T17, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, $T17, a7, 
;POP 			Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, $T17, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, $T17, a7, 
;POP 			Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, $T17, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, $T17, a7, 
;POP 			Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, $T17, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, $T17, a7, 
;POP 			Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, $T17, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, $T17, a7, 
;STOREF $T17 $-4	Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, $-9, $T17, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a7		Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a6		Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a5		Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a4		Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a3		Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a2		Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a1		Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH a0		Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH $-8		Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSH 			Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;PUSHREG		Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;JSR GetValue		Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;POPREG			Live IN: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 	Live OUT: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 
;POP $T18		Live IN: a0, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;POP 			Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;POP 			Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;POP 			Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;POP 			Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;POP 			Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;POP 			Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;POP 			Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;POP 			Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;POP 			Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;PUSH a7		Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;PUSH a6		Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;PUSH a5		Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;PUSH a4		Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;PUSH a3		Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;PUSH a2		Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;PUSH a1		Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;PUSH a0		Live IN: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;PUSH $-9		Live IN: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;PUSH 			Live IN: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;PUSHREG		Live IN: a0, $-9, $T18, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;JSR GetValue		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;POPREG			Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;POP $T19		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, $T19, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;POP 			Live IN: $-8, $T19, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, $T19, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;POP 			Live IN: $-8, $T19, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, $T19, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;POP 			Live IN: $-8, $T19, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, $T19, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;POP 			Live IN: $-8, $T19, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, $T19, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;POP 			Live IN: $-8, $T19, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, $T19, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;POP 			Live IN: $-8, $T19, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, $T19, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;POP 			Live IN: $-8, $T19, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, $T19, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;POP 			Live IN: $-8, $T19, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, $T19, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;POP 			Live IN: $-8, $T19, $-4, a0, $-3, a1, a2, a3, a4, $T18, $-9, a5, a6, a7, 	Live OUT: $-8, $T19, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, $T18, a6, a7, 
;LEF $T18 $T19 label4	Live IN: $T19, a0, $T18, $-9, $-8, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;WRITEI $-8		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;WRITES space		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;WRITEI $-9		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;WRITES space		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;WRITEF $-3		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;WRITES space		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;WRITEF $-4		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, a5, a6, a7, 
;WRITES space		Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, $-3, a1, a2, a3, a4, a5, a6, a7, 
;WRITEF $-3		Live IN: $-8, a0, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 
;WRITES eol		Live IN: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label5		Live IN: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label4		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;WRITEI $-8		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;WRITES space		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, $-9, a6, a7, 
;WRITEI $-9		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, $-9, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;WRITES space		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, $-4, $-3, a1, a2, a3, a4, a5, a6, a7, 
;WRITEF $-3		Live IN: $-8, $-4, a0, $-3, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, $-4, a1, a2, a3, a4, a5, a6, a7, 
;WRITES space		Live IN: $-8, $-4, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, $-4, a1, a2, a3, a4, a5, a6, a7, 
;WRITEF $-4		Live IN: $-8, $-4, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, $-4, a1, a2, a3, a4, a5, a6, a7, 
;WRITES space		Live IN: $-8, $-4, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, $-4, a1, a2, a3, a4, a5, a6, a7, 
;WRITEF $-4		Live IN: $-8, $-4, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 
;WRITES eol		Live IN: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label5		Live IN: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 1 $T12		Live IN: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, $T12, a4, a5, a6, a7, 
;ADDI $-8 $T12 $T13	Live IN: $-8, a0, a1, a2, $T12, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, $T13, a3, a4, a5, a6, a7, 
;STOREI $T13 $-8	Live IN: a0, a1, $T13, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label1		Live IN: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $-8, a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label3		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 

;LABEL IsLargerThanOrEqualTo	Live IN: $7, $8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, a6, a7, 
;LINK 1			Live IN: $7, $8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREF $8 $T20		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $7, a0, $T20, a1, a2, a3, a4, a5, a6, a7, 
;LTF $7 $T20 label6	Live IN: $7, $T20, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 1 $T21		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $T21, a1, a2, a3, a4, a5, a6, a7, 
;STOREI $T21 $6		Live IN: a0, $T21, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label7		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label6		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label7		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 0 $T22		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, $T22, a3, a4, a5, a6, a7, 
;STOREI $T22 $6		Live IN: a0, a1, $T22, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 

;LABEL IsSmallerThan	Live IN: $7, $8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, a6, a7, 
;LINK 1			Live IN: $7, $8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, a6, a7, 
;PUSH $8		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $7, a0, a1, a2, a3, a4, a5, a6, a7, 
;PUSH $7		Live IN: $7, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;PUSH 			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;PUSHREG		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;JSR IsLargerThanOrEqualTo	Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;POPREG			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;POP $T23		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, $T23, a2, a3, a4, a5, a6, a7, 
;POP 			Live IN: a0, $T23, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, $T23, a2, a3, a4, a5, a6, a7, 
;POP 			Live IN: a0, $T23, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, $T23, a2, a3, a4, a5, a6, a7, 
;STOREI 0 $T24		Live IN: a0, $T23, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, $T23, a2, a3, a4, $T24, a5, a6, a7, 
;EQI $T23 $T24 label8	Live IN: a0, $T23, a1, a2, a3, $T24, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 0 $T25		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, $T25, a4, a5, a6, a7, 
;STOREI $T25 $6		Live IN: a0, a1, a2, $T25, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label9		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label8		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label9		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 1 $T26		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, $T26, a7, 
;STOREI $T26 $6		Live IN: a0, a1, a2, a3, a4, a5, $T26, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 

;LABEL GetValue		Live IN: $13, $14, $11, $12, $10, a0, $15, $7, $8, $9, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, $7, $8, $9, a1, a2, a3, a4, a5, a6, a7, 
;LINK 1			Live IN: $13, $14, $11, $12, $10, a0, $15, $7, $8, $9, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, $7, $8, $9, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 0 $T27		Live IN: $13, $14, $11, $12, $10, a0, $15, $7, $8, $9, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T27, $15, $7, $8, $9, a1, a2, a3, a4, a5, a6, a7, 
;NEI $7 $T27 label10	Live IN: $13, $14, $11, $12, $10, a0, $T27, $15, $7, $8, $9, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, $7, $8, $9, a1, a2, a3, a4, a5, a6, a7, 
;STOREF $8 $T28		Live IN: $8, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, $T28, 
;STOREF $T28 $6		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, $T28, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label11		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label10		Live IN: $13, $14, $11, $12, $10, a0, $15, $7, $9, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, $7, $9, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 1 $T29		Live IN: $13, $14, $11, $12, $10, a0, $15, $7, $9, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, $T29, $7, $9, a1, a2, a3, a4, a5, a6, a7, 
;NEI $7 $T29 label12	Live IN: $13, $14, $11, $12, $10, a0, $T29, $15, $7, $9, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, $7, $9, a1, a2, a3, a4, a5, a6, a7, 
;STOREF $9 $T30		Live IN: $9, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, $T30, a2, a3, a4, a5, a6, a7, 
;STOREF $T30 $6		Live IN: a0, $T30, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label13		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label12		Live IN: $13, $14, $11, $12, $10, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 2 $T31		Live IN: $13, $14, $11, $12, $10, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T31, $15, $7, a1, a2, a3, a4, a5, a6, a7, 
;NEI $7 $T31 label14	Live IN: $13, $14, $11, $12, $10, a0, $T31, $15, $7, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 
;STOREF $10 $T32	Live IN: $10, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, $T32, a4, a5, a6, a7, 
;STOREF $T32 $6		Live IN: a0, a1, a2, $T32, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label15		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label14		Live IN: $13, $14, $11, $12, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 3 $T33		Live IN: $13, $14, $11, $12, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, a0, $15, $7, $T33, a1, a2, a3, a4, a5, a6, a7, 
;NEI $7 $T33 label16	Live IN: $13, $14, $11, $12, a0, $15, $7, $T33, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 
;STOREF $11 $T34	Live IN: $11, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $T34, a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREF $T34 $6		Live IN: $T34, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label17		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label16		Live IN: $13, $14, $12, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $12, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 4 $T35		Live IN: $13, $14, $12, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $12, a0, $15, $7, $T35, a1, a2, a3, a4, a5, a6, a7, 
;NEI $7 $T35 label18	Live IN: $13, $14, $12, a0, $15, $7, $T35, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $12, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 
;STOREF $12 $T36	Live IN: $12, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, $T36, a1, a2, a3, a4, a5, a6, a7, 
;STOREF $T36 $6		Live IN: a0, $T36, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label19		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label18		Live IN: $13, $14, $7, a0, a1, a2, a3, a4, a5, a6, a7, $15, 	Live OUT: $13, $14, $7, a0, a1, a2, a3, a4, a5, a6, $15, a7, 
;STOREI 5 $T37		Live IN: $13, $14, a0, $15, $7, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, a0, $15, $T37, $7, a1, a2, a3, a4, a5, a6, a7, 
;NEI $7 $T37 label20	Live IN: $13, $14, a0, $15, $T37, $7, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $13, $14, $7, a0, a1, a2, a3, a4, a5, a6, $15, a7, 
;STOREF $13 $T38	Live IN: $13, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: $T38, a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREF $T38 $6		Live IN: $T38, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label21		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label20		Live IN: $14, $7, a0, a1, a2, a3, a4, a5, a6, a7, $15, 	Live OUT: $14, $7, a0, a1, a2, a3, a4, a5, a6, $15, a7, 
;STOREI 6 $T39		Live IN: $14, $7, a0, a1, a2, a3, a4, a5, a6, a7, $15, 	Live OUT: $14, $T39, $7, a0, a1, a2, a3, a4, a5, a6, $15, a7, 
;NEI $7 $T39 label22	Live IN: $14, $T39, $7, a0, a1, a2, a3, a4, a5, a6, a7, $15, 	Live OUT: $14, $7, a0, a1, a2, a3, a4, a5, a6, $15, a7, 
;STOREF $14 $T40	Live IN: $14, a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, $T40, a5, a6, a7, 
;STOREF $T40 $6		Live IN: a0, a1, a2, a3, $T40, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label23		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label22		Live IN: $7, a0, a1, a2, a3, a4, a5, a6, $15, a7, 	Live OUT: $7, a0, a1, a2, a3, a4, a5, a6, a7, $15, 
;STOREI 7 $T41		Live IN: $7, a0, a1, a2, a3, a4, a5, a6, $15, a7, 	Live OUT: $7, a0, a1, a2, a3, $T41, a4, a5, a6, a7, $15, 
;NEI $7 $T41 label24	Live IN: $7, a0, a1, a2, $T41, a3, a4, a5, a6, $15, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, $15, 
;STOREF $15 $T42	Live IN: a0, a1, a2, a3, a4, a5, a6, $15, a7, 	Live OUT: a0, a1, a2, $T42, a3, a4, a5, a6, a7, 
;STOREF $T42 $6		Live IN: a0, a1, $T42, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;JUMP label25		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label24		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label25		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label23		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label21		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label19		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label17		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label15		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label13		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;LABEL label11		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;STOREI 0 $T43		Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, $T43, a2, a3, a4, a5, a6, a7, 
;STOREI $T43 $6		Live IN: a0, $T43, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, a6, a7, 	Live OUT: a0, a1, a2, a3, a4, a5, a6, a7, 
;str space " " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str eol "\n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str tab "        " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str smS " is smaller than " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str leS " is larger than or equal to " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str minis " min: " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str maxis " max: " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a5 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a6 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a7 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;jsr main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;sys halt 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL main liveout: ; {  }
;label main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 10 liveout: ; {  }
;link 53 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF 20.5 $T1 liveout: ; { $T1  }
; ensure(): $T1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
; loading $-10 to register r3
;move $-10 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;move 20.5 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;STOREF $T1 a0 liveout: ; { a0  }
; ensure(): $T1 has register r3
; ensure(): a0 gets register r2 { r0-><null> || r1-><null> || r2->a0 || r3->$T1* }
; loading a0 to register r2
;move a0 r2 	; { r0-><null> || r1-><null> || r2->a0 || r3->$T1* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->a0 || r3->$T1* }
; freeing unused variable r3
; spilling varialbe $T1
;move r3 $-10 	; { r0-><null> || r1-><null> || r2->a0* || r3->$T1* }
;STOREF 16.5 $T2 liveout: ; { $T2 a0  }
; ensure(): $T2 gets register r3 { r0-><null> || r1-><null> || r2->a0* || r3->$T2 }
; loading $-11 to register r3
;move $-11 r3 	; { r0-><null> || r1-><null> || r2->a0* || r3->$T2 }
;move 16.5 r3 	; { r0-><null> || r1-><null> || r2->a0* || r3->$T2 }
;STOREF $T2 a1 liveout: ; { a0 a1  }
; ensure(): $T2 has register r3
; ensure(): a1 gets register r1 { r0-><null> || r1->a1 || r2->a0* || r3->$T2* }
; loading a1 to register r1
;move a1 r1 	; { r0-><null> || r1->a1 || r2->a0* || r3->$T2* }
;move r3 r1 	; { r0-><null> || r1->a1 || r2->a0* || r3->$T2* }
; freeing unused variable r3
; spilling varialbe $T2
;move r3 $-11 	; { r0-><null> || r1->a1* || r2->a0* || r3->$T2* }
;STOREF 12.0 $T3 liveout: ; { $T3 a0 a1  }
; ensure(): $T3 gets register r3 { r0-><null> || r1->a1* || r2->a0* || r3->$T3 }
; loading $-12 to register r3
;move $-12 r3 	; { r0-><null> || r1->a1* || r2->a0* || r3->$T3 }
;move 12.0 r3 	; { r0-><null> || r1->a1* || r2->a0* || r3->$T3 }
;STOREF $T3 a2 liveout: ; { a0 a1 a2  }
; ensure(): $T3 has register r3
; ensure(): a2 gets register r0 { r0->a2 || r1->a1* || r2->a0* || r3->$T3* }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->a1* || r2->a0* || r3->$T3* }
;move r3 r0 	; { r0->a2 || r1->a1* || r2->a0* || r3->$T3* }
; freeing unused variable r3
; spilling varialbe $T3
;move r3 $-12 	; { r0->a2* || r1->a1* || r2->a0* || r3->$T3* }
;STOREF 1.2 $T4 liveout: ; { a0 $T4 a1 a2  }
; ensure(): $T4 gets register r3 { r0->a2* || r1->a1* || r2->a0* || r3->$T4 }
; loading $-13 to register r3
;move $-13 r3 	; { r0->a2* || r1->a1* || r2->a0* || r3->$T4 }
;move 1.2 r3 	; { r0->a2* || r1->a1* || r2->a0* || r3->$T4 }
;STOREF $T4 a3 liveout: ; { a0 a1 a2 a3  }
; ensure(): $T4 has register r3
; freeing unused variable r0
; spilling varialbe a2
;move r0 a2 	; { r0->a2* || r1->a1* || r2->a0* || r3->$T4* }
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->a1* || r2->a0* || r3->$T4* }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->a1* || r2->a0* || r3->$T4* }
;move r3 r0 	; { r0->a3 || r1->a1* || r2->a0* || r3->$T4* }
; freeing unused variable r3
; spilling varialbe $T4
;move r3 $-13 	; { r0->a3* || r1->a1* || r2->a0* || r3->$T4* }
;STOREF 1.3 $T5 liveout: ; { a0 $T5 a1 a2 a3  }
; ensure(): $T5 gets register r3 { r0->a3* || r1->a1* || r2->a0* || r3->$T5 }
; loading $-14 to register r3
;move $-14 r3 	; { r0->a3* || r1->a1* || r2->a0* || r3->$T5 }
;move 1.3 r3 	; { r0->a3* || r1->a1* || r2->a0* || r3->$T5 }
;STOREF $T5 a4 liveout: ; { a0 a1 a2 a3 a4  }
; ensure(): $T5 has register r3
; freeing unused variable r0
; spilling varialbe a3
;move r0 a3 	; { r0->a3* || r1->a1* || r2->a0* || r3->$T5* }
; allocate() has to spill a4
; ensure(): a4 gets register r0 { r0->a4 || r1->a1* || r2->a0* || r3->$T5* }
; loading a4 to register r0
;move a4 r0 	; { r0->a4 || r1->a1* || r2->a0* || r3->$T5* }
;move r3 r0 	; { r0->a4 || r1->a1* || r2->a0* || r3->$T5* }
; freeing unused variable r3
; spilling varialbe $T5
;move r3 $-14 	; { r0->a4* || r1->a1* || r2->a0* || r3->$T5* }
;STOREF 12.1 $T6 liveout: ; { $T6 a0 a1 a2 a3 a4  }
; ensure(): $T6 gets register r3 { r0->a4* || r1->a1* || r2->a0* || r3->$T6 }
; loading $-15 to register r3
;move $-15 r3 	; { r0->a4* || r1->a1* || r2->a0* || r3->$T6 }
;move 12.1 r3 	; { r0->a4* || r1->a1* || r2->a0* || r3->$T6 }
;STOREF $T6 a5 liveout: ; { a0 a1 a2 a3 a4 a5  }
; ensure(): $T6 has register r3
; freeing unused variable r0
; spilling varialbe a4
;move r0 a4 	; { r0->a4* || r1->a1* || r2->a0* || r3->$T6* }
; allocate() has to spill a5
; ensure(): a5 gets register r0 { r0->a5 || r1->a1* || r2->a0* || r3->$T6* }
; loading a5 to register r0
;move a5 r0 	; { r0->a5 || r1->a1* || r2->a0* || r3->$T6* }
;move r3 r0 	; { r0->a5 || r1->a1* || r2->a0* || r3->$T6* }
; freeing unused variable r3
; spilling varialbe $T6
;move r3 $-15 	; { r0->a5* || r1->a1* || r2->a0* || r3->$T6* }
;STOREF 15.1 $T7 liveout: ; { $T7 a0 a1 a2 a3 a4 a5  }
; ensure(): $T7 gets register r3 { r0->a5* || r1->a1* || r2->a0* || r3->$T7 }
; loading $-16 to register r3
;move $-16 r3 	; { r0->a5* || r1->a1* || r2->a0* || r3->$T7 }
;move 15.1 r3 	; { r0->a5* || r1->a1* || r2->a0* || r3->$T7 }
;STOREF $T7 a6 liveout: ; { a0 a1 a2 a3 a4 a5 a6  }
; ensure(): $T7 has register r3
; freeing unused variable r0
; spilling varialbe a5
;move r0 a5 	; { r0->a5* || r1->a1* || r2->a0* || r3->$T7* }
; allocate() has to spill a6
; ensure(): a6 gets register r0 { r0->a6 || r1->a1* || r2->a0* || r3->$T7* }
; loading a6 to register r0
;move a6 r0 	; { r0->a6 || r1->a1* || r2->a0* || r3->$T7* }
;move r3 r0 	; { r0->a6 || r1->a1* || r2->a0* || r3->$T7* }
; freeing unused variable r3
; spilling varialbe $T7
;move r3 $-16 	; { r0->a6* || r1->a1* || r2->a0* || r3->$T7* }
;STOREF 10.1 $T8 liveout: ; { a0 a1 a2 a3 $T8 a4 a5 a6  }
; ensure(): $T8 gets register r3 { r0->a6* || r1->a1* || r2->a0* || r3->$T8 }
; loading $-17 to register r3
;move $-17 r3 	; { r0->a6* || r1->a1* || r2->a0* || r3->$T8 }
;move 10.1 r3 	; { r0->a6* || r1->a1* || r2->a0* || r3->$T8 }
;STOREF $T8 a7 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T8 has register r3
; freeing unused variable r0
; spilling varialbe a6
;move r0 a6 	; { r0->a6* || r1->a1* || r2->a0* || r3->$T8* }
; allocate() has to spill a7
; ensure(): a7 gets register r0 { r0->a7 || r1->a1* || r2->a0* || r3->$T8* }
; loading a7 to register r0
;move a7 r0 	; { r0->a7 || r1->a1* || r2->a0* || r3->$T8* }
;move r3 r0 	; { r0->a7 || r1->a1* || r2->a0* || r3->$T8* }
; freeing unused variable r3
; spilling varialbe $T8
;move r3 $-17 	; { r0->a7* || r1->a1* || r2->a0* || r3->$T8* }
;STOREF a0 $T9 liveout: ; { a0 a1 a2 a3 a4 $T9 a5 a6 a7  }
; ensure(): a0 has register r2
; ensure(): $T9 gets register r3 { r0->a7* || r1->a1* || r2->a0* || r3->$T9 }
; loading $-18 to register r3
;move $-18 r3 	; { r0->a7* || r1->a1* || r2->a0* || r3->$T9 }
;move r2 r3 	; { r0->a7* || r1->a1* || r2->a0* || r3->$T9 }
;STOREF $T9 $-6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T9 has register r3
; freeing unused variable r0
; spilling varialbe a7
;move r0 a7 	; { r0->a7* || r1->a1* || r2->a0* || r3->$T9* }
; allocate() has to spill $-6
; ensure(): $-6 gets register r0 { r0->$-6 || r1->a1* || r2->a0* || r3->$T9* }
; loading $-6 to register r0
;move $-6 r0 	; { r0->$-6 || r1->a1* || r2->a0* || r3->$T9* }
;move r3 r0 	; { r0->$-6 || r1->a1* || r2->a0* || r3->$T9* }
; freeing unused variable r3
; spilling varialbe $T9
;move r3 $-18 	; { r0->$-6* || r1->a1* || r2->a0* || r3->$T9* }
; freeing unused variable r0
; spilling varialbe $-6
;move r0 $-6 	; { r0->$-6* || r1->a1* || r2->a0* || r3-><null> }
;STOREI 0 $T10 liveout: ; { $T10 a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T10 gets register r3 { r0-><null> || r1->a1* || r2->a0* || r3->$T10 }
; loading $-19 to register r3
;move $-19 r3 	; { r0-><null> || r1->a1* || r2->a0* || r3->$T10 }
;move 0 r3 	; { r0-><null> || r1->a1* || r2->a0* || r3->$T10 }
;STOREI $T10 $-8 liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T10 has register r3
; ensure(): $-8 gets register r0 { r0->$-8 || r1->a1* || r2->a0* || r3->$T10* }
; loading $-8 to register r0
;move $-8 r0 	; { r0->$-8 || r1->a1* || r2->a0* || r3->$T10* }
;move r3 r0 	; { r0->$-8 || r1->a1* || r2->a0* || r3->$T10* }
; freeing unused variable r3
; spilling varialbe $T10
;move r3 $-19 	; { r0->$-8* || r1->a1* || r2->a0* || r3->$T10* }
;LABEL label1 liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
; spilling varialbe a0
;move r2 a0 	; { r0->$-8* || r1->a1* || r2->a0* || r3-><null> }
; spilling varialbe a1
;move r1 a1 	; { r0->$-8* || r1->a1* || r2-><null> || r3-><null> }
; spilling varialbe $-8
;move r0 $-8 	; { r0->$-8* || r1-><null> || r2-><null> || r3-><null> }
;label label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 4 $T11 liveout: ; { $-8 a0 a1 a2 a3 a4 $T11 a5 a6 a7  }
; ensure(): $T11 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T11 }
; loading $-20 to register r3
;move $-20 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T11 }
;move 4 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T11 }
;GEI $-8 $T11 label3 liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $-8 gets register r2 { r0-><null> || r1-><null> || r2->$-8 || r3->$T11* }
; loading $-8 to register r2
;move $-8 r2 	; { r0-><null> || r1-><null> || r2->$-8 || r3->$T11* }
; ensure(): $T11 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$-8 || r3->$T11* }
; spilling registers at the end of Basic Block
; spilling varialbe $T11
;move r3 $-20 	; { r0-><null> || r1-><null> || r2->$-8 || r3->$T11* }
; spilling varialbe $-8
;move r2 $-8 	; { r0-><null> || r1-><null> || r2->$-8 || r3-><null> }
;jge label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREI 7 $T14 liveout: ; { $-8 a0 a1 $T14 a2 a3 a4 a5 a6 a7  }
; ensure(): $T14 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T14 }
; loading $-23 to register r3
;move $-23 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T14 }
;move 7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T14 }
;SUBI $T14 $-8 $T15 liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7 $T15  }
; ensure(): $T14 has register r3
; ensure(): $-8 gets register r2 { r0-><null> || r1-><null> || r2->$-8 || r3->$T14* }
; loading $-8 to register r2
;move $-8 r2 	; { r0-><null> || r1-><null> || r2->$-8 || r3->$T14* }
; switching owner of register $T14 to $T15 { r0-><null> || r1-><null> || r2->$-8 || r3->$T14* }
; spilling varialbe $T14
;move r3 $-23 	; { r0-><null> || r1-><null> || r2->$-8 || r3->$T14* }
;subi r2 r3 	; { r0-><null> || r1-><null> || r2->$-8 || r3->$T15 }
;STOREI $T15 $-9 liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
; ensure(): $T15 has register r3
; ensure(): $-9 gets register r1 { r0-><null> || r1->$-9 || r2->$-8 || r3->$T15* }
; loading $-9 to register r1
;move $-9 r1 	; { r0-><null> || r1->$-9 || r2->$-8 || r3->$T15* }
;move r3 r1 	; { r0-><null> || r1->$-9 || r2->$-8 || r3->$T15* }
; freeing unused variable r3
; spilling varialbe $T15
;move r3 $-24 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T15* }
;PUSH a7 liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
; ensure(): a7 gets register r3 { r0-><null> || r1->$-9* || r2->$-8 || r3->a7 }
; loading a7 to register r3
;move a7 r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->a7 }
;push r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a6 liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
; ensure(): a6 gets register r0 { r0->a6 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a6 to register r0
;move a6 r0 	; { r0->a6 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a6 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a5 liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a5
; ensure(): a5 gets register r0 { r0->a5 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a5 to register r0
;move a5 r0 	; { r0->a5 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a5 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a4 liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a4
; ensure(): a4 gets register r0 { r0->a4 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a4 to register r0
;move a4 r0 	; { r0->a4 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a4 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a3 liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a3 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a2 liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a2
; ensure(): a2 gets register r0 { r0->a2 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a2 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a1 liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a1
; ensure(): a1 gets register r0 { r0->a1 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a1 to register r0
;move a1 r0 	; { r0->a1 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a1 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a0 liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a0
; ensure(): a0 gets register r0 { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a0 to register r0
;move a0 r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH $-8 liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
; ensure(): $-8 has register r2
;push r2 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH  liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
;push 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSHREG liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
;push r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r1 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r2 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r3 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;JSR GetValue liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
; writing back global variables prior a function call
; spilling varialbe a7
;move r3 a7 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
; spilling varialbe a0
;move r0 a0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3-><null> }
;jsr GetValue 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;POPREG liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7  }
;pop r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;POP $T16 liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7 $T16  }
; ensure(): $T16 gets register r3 { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16 }
; loading $-25 to register r3
;move $-25 r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16 }
;pop r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16 }
;POP  liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7 $T16  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16* }
;POP  liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7 $T16  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16* }
;POP  liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7 $T16  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16* }
;POP  liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7 $T16  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16* }
;POP  liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7 $T16  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16* }
;POP  liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7 $T16  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16* }
;POP  liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7 $T16  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16* }
;POP  liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7 $T16  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16* }
;POP  liveout: ; { $-8 a0 a1 a2 a3 a4 $-9 a5 a6 a7 $T16  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T16* }
;STOREF $T16 $-3 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; ensure(): $T16 has register r3
; ensure(): $-3 gets register r0 { r0->$-3 || r1->$-9* || r2->$-8 || r3->$T16* }
; loading $-3 to register r0
;move $-3 r0 	; { r0->$-3 || r1->$-9* || r2->$-8 || r3->$T16* }
;move r3 r0 	; { r0->$-3 || r1->$-9* || r2->$-8 || r3->$T16* }
; freeing unused variable r3
; spilling varialbe $T16
;move r3 $-25 	; { r0->$-3* || r1->$-9* || r2->$-8 || r3->$T16* }
;PUSH a7 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; ensure(): a7 gets register r3 { r0->$-3* || r1->$-9* || r2->$-8 || r3->a7 }
; loading a7 to register r3
;move a7 r3 	; { r0->$-3* || r1->$-9* || r2->$-8 || r3->a7 }
;push r3 	; { r0->$-3* || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a6 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; spilling varialbe $-3
;move r0 $-3 	; { r0->$-3* || r1->$-9* || r2->$-8 || r3->a7 }
; allocate() has to spill a6
; ensure(): a6 gets register r0 { r0->a6 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a6 to register r0
;move a6 r0 	; { r0->a6 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a6 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a5 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a5
; ensure(): a5 gets register r0 { r0->a5 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a5 to register r0
;move a5 r0 	; { r0->a5 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a5 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a4 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a4
; ensure(): a4 gets register r0 { r0->a4 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a4 to register r0
;move a4 r0 	; { r0->a4 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a4 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a3 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a3 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a2 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a2
; ensure(): a2 gets register r0 { r0->a2 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a2 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a1 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a1
; ensure(): a1 gets register r0 { r0->a1 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a1 to register r0
;move a1 r0 	; { r0->a1 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a1 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a0 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a0
; ensure(): a0 gets register r0 { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a0 to register r0
;move a0 r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH $-9 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; ensure(): $-9 has register r1
;push r1 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH  liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
;push 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSHREG liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
;push r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r1 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r2 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r3 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;JSR GetValue liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; writing back global variables prior a function call
; spilling varialbe a7
;move r3 a7 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
; spilling varialbe a0
;move r0 a0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3-><null> }
;jsr GetValue 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;POPREG liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
;pop r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;POP $T17 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 $T17 a7  }
; ensure(): $T17 gets register r3 { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17 }
; loading $-26 to register r3
;move $-26 r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17 }
;pop r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17 }
;POP  liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 $T17 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17* }
;POP  liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 $T17 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17* }
;POP  liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 $T17 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17* }
;POP  liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 $T17 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17* }
;POP  liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 $T17 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17* }
;POP  liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 $T17 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17* }
;POP  liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 $T17 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17* }
;POP  liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 $T17 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17* }
;POP  liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 $T17 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T17* }
;STOREF $T17 $-4 liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; ensure(): $T17 has register r3
; ensure(): $-4 gets register r0 { r0->$-4 || r1->$-9* || r2->$-8 || r3->$T17* }
; loading $-4 to register r0
;move $-4 r0 	; { r0->$-4 || r1->$-9* || r2->$-8 || r3->$T17* }
;move r3 r0 	; { r0->$-4 || r1->$-9* || r2->$-8 || r3->$T17* }
; freeing unused variable r3
; spilling varialbe $T17
;move r3 $-26 	; { r0->$-4* || r1->$-9* || r2->$-8 || r3->$T17* }
;PUSH a7 liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; ensure(): a7 gets register r3 { r0->$-4* || r1->$-9* || r2->$-8 || r3->a7 }
; loading a7 to register r3
;move a7 r3 	; { r0->$-4* || r1->$-9* || r2->$-8 || r3->a7 }
;push r3 	; { r0->$-4* || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a6 liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; spilling varialbe $-4
;move r0 $-4 	; { r0->$-4* || r1->$-9* || r2->$-8 || r3->a7 }
; allocate() has to spill a6
; ensure(): a6 gets register r0 { r0->a6 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a6 to register r0
;move a6 r0 	; { r0->a6 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a6 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a5 liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a5
; ensure(): a5 gets register r0 { r0->a5 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a5 to register r0
;move a5 r0 	; { r0->a5 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a5 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a4 liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a4
; ensure(): a4 gets register r0 { r0->a4 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a4 to register r0
;move a4 r0 	; { r0->a4 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a4 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a3 liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a3 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a2 liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a2
; ensure(): a2 gets register r0 { r0->a2 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a2 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a1 liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a1
; ensure(): a1 gets register r0 { r0->a1 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a1 to register r0
;move a1 r0 	; { r0->a1 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a1 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH a0 liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a0
; ensure(): a0 gets register r0 { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
; loading a0 to register r0
;move a0 r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH $-8 liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; ensure(): $-8 has register r2
;push r2 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSH  liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
;push 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;PUSHREG liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
;push r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r1 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r2 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;push r3 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
;JSR GetValue liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
; writing back global variables prior a function call
; spilling varialbe a7
;move r3 a7 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->a7 }
; spilling varialbe a0
;move r0 a0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3-><null> }
;jsr GetValue 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;POPREG liveout: ; { $-8 $-4 a0 $-3 a1 a2 a3 a4 $-9 a5 a6 a7  }
;pop r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-9* || r2->$-8 || r3-><null> }
;POP $T18 liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T18 gets register r3 { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18 }
; loading $-27 to register r3
;move $-27 r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18 }
;pop r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18 }
;POP  liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;pop 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;PUSH a7 liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): a7 gets register r0 { r0->a7 || r1->$-9* || r2->$-8 || r3->$T18* }
; loading a7 to register r0
;move a7 r0 	; { r0->a7 || r1->$-9* || r2->$-8 || r3->$T18* }
;push r0 	; { r0->a7 || r1->$-9* || r2->$-8 || r3->$T18* }
;PUSH a6 liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a6
; ensure(): a6 gets register r0 { r0->a6 || r1->$-9* || r2->$-8 || r3->$T18* }
; loading a6 to register r0
;move a6 r0 	; { r0->a6 || r1->$-9* || r2->$-8 || r3->$T18* }
;push r0 	; { r0->a6 || r1->$-9* || r2->$-8 || r3->$T18* }
;PUSH a5 liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a5
; ensure(): a5 gets register r0 { r0->a5 || r1->$-9* || r2->$-8 || r3->$T18* }
; loading a5 to register r0
;move a5 r0 	; { r0->a5 || r1->$-9* || r2->$-8 || r3->$T18* }
;push r0 	; { r0->a5 || r1->$-9* || r2->$-8 || r3->$T18* }
;PUSH a4 liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a4
; ensure(): a4 gets register r0 { r0->a4 || r1->$-9* || r2->$-8 || r3->$T18* }
; loading a4 to register r0
;move a4 r0 	; { r0->a4 || r1->$-9* || r2->$-8 || r3->$T18* }
;push r0 	; { r0->a4 || r1->$-9* || r2->$-8 || r3->$T18* }
;PUSH a3 liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->$-9* || r2->$-8 || r3->$T18* }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->$-9* || r2->$-8 || r3->$T18* }
;push r0 	; { r0->a3 || r1->$-9* || r2->$-8 || r3->$T18* }
;PUSH a2 liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a2
; ensure(): a2 gets register r0 { r0->a2 || r1->$-9* || r2->$-8 || r3->$T18* }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->$-9* || r2->$-8 || r3->$T18* }
;push r0 	; { r0->a2 || r1->$-9* || r2->$-8 || r3->$T18* }
;PUSH a1 liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a1
; ensure(): a1 gets register r0 { r0->a1 || r1->$-9* || r2->$-8 || r3->$T18* }
; loading a1 to register r0
;move a1 r0 	; { r0->a1 || r1->$-9* || r2->$-8 || r3->$T18* }
;push r0 	; { r0->a1 || r1->$-9* || r2->$-8 || r3->$T18* }
;PUSH a0 liveout: ; { a0 $-9 $T18 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a0
; ensure(): a0 gets register r0 { r0->a0 || r1->$-9* || r2->$-8 || r3->$T18* }
; loading a0 to register r0
;move a0 r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->$T18* }
;push r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->$T18* }
;PUSH $-9 liveout: ; { a0 $T18 $-9 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $-9 has register r1
;push r1 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->$T18* }
;PUSH  liveout: ; { a0 $T18 $-9 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;push 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->$T18* }
;PUSHREG liveout: ; { a0 $T18 $-9 $-8 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;push r0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->$T18* }
;push r1 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->$T18* }
;push r2 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->$T18* }
;push r3 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->$T18* }
;JSR GetValue liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
; writing back global variables prior a function call
; spilling varialbe a0
;move r0 a0 	; { r0->a0 || r1->$-9* || r2->$-8 || r3->$T18* }
;jsr GetValue 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;POPREG liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
;pop r3 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;pop r2 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;pop r1 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;pop r0 	; { r0-><null> || r1->$-9* || r2->$-8 || r3->$T18* }
;POP $T19 liveout: ; { $-8 $T19 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
; ensure(): $T19 gets register r0 { r0->$T19 || r1->$-9* || r2->$-8 || r3->$T18* }
; loading $-28 to register r0
;move $-28 r0 	; { r0->$T19 || r1->$-9* || r2->$-8 || r3->$T18* }
;pop r0 	; { r0->$T19 || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { $-8 $T19 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
;pop 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { $-8 $T19 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
;pop 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { $-8 $T19 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
;pop 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { $-8 $T19 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
;pop 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { $-8 $T19 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
;pop 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { $-8 $T19 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
;pop 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { $-8 $T19 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
;pop 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { $-8 $T19 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
;pop 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3->$T18* }
;POP  liveout: ; { $-8 $T19 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 $T18 a6 a7  }
;pop 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3->$T18* }
;LEF $T18 $T19 label4 liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
; ensure(): $T18 has register r3
; ensure(): $T19 has register r0
;cmpr r3 r0 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3->$T18* }
; spilling registers at the end of Basic Block
; spilling varialbe $T18
;move r3 $-27 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3->$T18* }
; spilling varialbe $-8
;move r2 $-8 	; { r0->$T19* || r1->$-9* || r2->$-8 || r3-><null> }
; spilling varialbe $-9
;move r1 $-9 	; { r0->$T19* || r1->$-9* || r2-><null> || r3-><null> }
; spilling varialbe $T19
;move r0 $-28 	; { r0->$T19* || r1-><null> || r2-><null> || r3-><null> }
;jle label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r0
;WRITEI $-8 liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
; ensure(): $-8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
; loading $-8 to register r3
;move $-8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;sys writei r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;WRITES space liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;WRITEI $-9 liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $-9 gets register r2 { r0-><null> || r1-><null> || r2->$-9 || r3->$-8 }
; loading $-9 to register r2
;move $-9 r2 	; { r0-><null> || r1-><null> || r2->$-9 || r3->$-8 }
;sys writei r2 	; { r0-><null> || r1-><null> || r2->$-9 || r3->$-8 }
; freeing unused variable r2
;WRITES space liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;WRITEF $-3 liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $-3 gets register r2 { r0-><null> || r1-><null> || r2->$-3 || r3->$-8 }
; loading $-3 to register r2
;move $-3 r2 	; { r0-><null> || r1-><null> || r2->$-3 || r3->$-8 }
;sys writer r2 	; { r0-><null> || r1-><null> || r2->$-3 || r3->$-8 }
;WRITES space liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2->$-3 || r3->$-8 }
;WRITEF $-4 liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $-4 gets register r1 { r0-><null> || r1->$-4 || r2->$-3 || r3->$-8 }
; loading $-4 to register r1
;move $-4 r1 	; { r0-><null> || r1->$-4 || r2->$-3 || r3->$-8 }
;sys writer r1 	; { r0-><null> || r1->$-4 || r2->$-3 || r3->$-8 }
; freeing unused variable r1
;WRITES space liveout: ; { $-8 a0 $-3 a1 a2 a3 a4 a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2->$-3 || r3->$-8 }
;WRITEF $-3 liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $-3 has register r2
;sys writer r2 	; { r0-><null> || r1-><null> || r2->$-3 || r3->$-8 }
; freeing unused variable r2
;WRITES eol liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;JUMP label5 liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
; spilling varialbe $-8
;move r3 $-8 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;jmp label5 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label4 liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
; spilling registers at the end of Basic Block
;label label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;WRITEI $-8 liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
; ensure(): $-8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
; loading $-8 to register r3
;move $-8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;sys writei r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;WRITES space liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 $-9 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;WRITEI $-9 liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $-9 gets register r2 { r0-><null> || r1-><null> || r2->$-9 || r3->$-8 }
; loading $-9 to register r2
;move $-9 r2 	; { r0-><null> || r1-><null> || r2->$-9 || r3->$-8 }
;sys writei r2 	; { r0-><null> || r1-><null> || r2->$-9 || r3->$-8 }
; freeing unused variable r2
;WRITES space liveout: ; { $-8 a0 $-4 $-3 a1 a2 a3 a4 a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;WRITEF $-3 liveout: ; { $-8 a0 $-4 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $-3 gets register r2 { r0-><null> || r1-><null> || r2->$-3 || r3->$-8 }
; loading $-3 to register r2
;move $-3 r2 	; { r0-><null> || r1-><null> || r2->$-3 || r3->$-8 }
;sys writer r2 	; { r0-><null> || r1-><null> || r2->$-3 || r3->$-8 }
; freeing unused variable r2
;WRITES space liveout: ; { $-8 a0 $-4 a1 a2 a3 a4 a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;WRITEF $-4 liveout: ; { $-8 a0 $-4 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $-4 gets register r2 { r0-><null> || r1-><null> || r2->$-4 || r3->$-8 }
; loading $-4 to register r2
;move $-4 r2 	; { r0-><null> || r1-><null> || r2->$-4 || r3->$-8 }
;sys writer r2 	; { r0-><null> || r1-><null> || r2->$-4 || r3->$-8 }
;WRITES space liveout: ; { $-8 a0 $-4 a1 a2 a3 a4 a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2->$-4 || r3->$-8 }
;WRITEF $-4 liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $-4 has register r2
;sys writer r2 	; { r0-><null> || r1-><null> || r2->$-4 || r3->$-8 }
; freeing unused variable r2
;WRITES eol liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;LABEL label5 liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
; spilling varialbe $-8
;move r3 $-8 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8 }
;label label5 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T12 liveout: ; { $-8 a0 a1 a2 a3 $T12 a4 a5 a6 a7  }
; ensure(): $T12 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T12 }
; loading $-21 to register r3
;move $-21 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T12 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T12 }
;ADDI $-8 $T12 $T13 liveout: ; { a0 a1 a2 $T13 a3 a4 a5 a6 a7  }
; ensure(): $-8 gets register r2 { r0-><null> || r1-><null> || r2->$-8 || r3->$T12* }
; loading $-8 to register r2
;move $-8 r2 	; { r0-><null> || r1-><null> || r2->$-8 || r3->$T12* }
; ensure(): $T12 has register r3
; switching owner of register $-8 to $T13 { r0-><null> || r1-><null> || r2->$-8 || r3->$T12* }
;addi r3 r2 	; { r0-><null> || r1-><null> || r2->$T13 || r3->$T12* }
; freeing unused variable r3
; spilling varialbe $T12
;move r3 $-21 	; { r0-><null> || r1-><null> || r2->$T13* || r3->$T12* }
;STOREI $T13 $-8 liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T13 has register r2
; ensure(): $-8 gets register r3 { r0-><null> || r1-><null> || r2->$T13* || r3->$-8 }
; loading $-8 to register r3
;move $-8 r3 	; { r0-><null> || r1-><null> || r2->$T13* || r3->$-8 }
;move r2 r3 	; { r0-><null> || r1-><null> || r2->$T13* || r3->$-8 }
; freeing unused variable r2
; spilling varialbe $T13
;move r2 $-22 	; { r0-><null> || r1-><null> || r2->$T13* || r3->$-8* }
;JUMP label1 liveout: ; { $-8 a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
; spilling varialbe $-8
;move r3 $-8 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-8* }
;jmp label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label3 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL IsLargerThanOrEqualTo liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 a6 a7  }
;label IsLargerThanOrEqualTo 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 a6 a7  }
;link 44 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF $8 $T20 liveout: ; { $7 a0 $T20 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T20 gets register r2 { r0-><null> || r1-><null> || r2->$T20 || r3->$8 }
; loading $-20 to register r2
;move $-20 r2 	; { r0-><null> || r1-><null> || r2->$T20 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T20 || r3->$8 }
; freeing unused variable r3
;LTF $7 $T20 label6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2->$T20* || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2->$T20* || r3->$7 }
; ensure(): $T20 has register r2
;cmpr r3 r2 	; { r0-><null> || r1-><null> || r2->$T20* || r3->$7 }
; spilling registers at the end of Basic Block
; spilling varialbe $7
;move r3 $7 	; { r0-><null> || r1-><null> || r2->$T20* || r3->$7 }
; spilling varialbe $T20
;move r2 $-20 	; { r0-><null> || r1-><null> || r2->$T20* || r3-><null> }
;jlt label6 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r2
;STOREI 1 $T21 liveout: ; { a0 $T21 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T21 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
; loading $-21 to register r3
;move $-21 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
;STOREI $T21 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T21 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21* }
; freeing unused variable r3
; spilling varialbe $T21
;move r3 $-21 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21* }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label7 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;jmp label7 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label6 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label7 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label7 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T22 liveout: ; { a0 a1 a2 $T22 a3 a4 a5 a6 a7  }
; ensure(): $T22 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T22 }
; loading $-22 to register r3
;move $-22 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T22 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T22 }
;STOREI $T22 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T22 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T22* }
; freeing unused variable r3
; spilling varialbe $T22
;move r3 $-22 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T22* }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL IsSmallerThan liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 a6 a7  }
;label IsSmallerThan 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 a6 a7  }
;link 44 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSH $8 liveout: ; { $7 a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; freeing unused variable r3
;PUSH $7 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; freeing unused variable r3
;PUSH  liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSHREG liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JSR IsLargerThanOrEqualTo liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;jsr IsLargerThanOrEqualTo 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T23 liveout: ; { a0 a1 $T23 a2 a3 a4 a5 a6 a7  }
; ensure(): $T23 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T23 }
; loading $-23 to register r3
;move $-23 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T23 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T23 }
;POP  liveout: ; { a0 a1 $T23 a2 a3 a4 a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T23* }
;POP  liveout: ; { a0 a1 $T23 a2 a3 a4 a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T23* }
;STOREI 0 $T24 liveout: ; { a0 a1 $T23 a2 a3 a4 $T24 a5 a6 a7  }
; ensure(): $T24 gets register r2 { r0-><null> || r1-><null> || r2->$T24 || r3->$T23* }
; loading $-24 to register r2
;move $-24 r2 	; { r0-><null> || r1-><null> || r2->$T24 || r3->$T23* }
;move 0 r2 	; { r0-><null> || r1-><null> || r2->$T24 || r3->$T23* }
;EQI $T23 $T24 label8 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T23 has register r3
; ensure(): $T24 has register r2
;cmpi r3 r2 	; { r0-><null> || r1-><null> || r2->$T24* || r3->$T23* }
; spilling registers at the end of Basic Block
; spilling varialbe $T23
;move r3 $-23 	; { r0-><null> || r1-><null> || r2->$T24* || r3->$T23* }
; spilling varialbe $T24
;move r2 $-24 	; { r0-><null> || r1-><null> || r2->$T24* || r3-><null> }
;jeq label8 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r2
;STOREI 0 $T25 liveout: ; { a0 a1 a2 a3 $T25 a4 a5 a6 a7  }
; ensure(): $T25 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T25 }
; loading $-25 to register r3
;move $-25 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T25 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T25 }
;STOREI $T25 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T25 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T25* }
; freeing unused variable r3
; spilling varialbe $T25
;move r3 $-25 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T25* }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label9 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;jmp label9 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label8 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label8 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label9 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label9 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T26 liveout: ; { a0 a1 a2 a3 a4 a5 a6 $T26 a7  }
; ensure(): $T26 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T26 }
; loading $-26 to register r3
;move $-26 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T26 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T26 }
;STOREI $T26 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T26 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T26* }
; freeing unused variable r3
; spilling varialbe $T26
;move r3 $-26 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T26* }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL GetValue liveout: ; { $13 $14 $11 $12 $10 a0 $15 $7 $8 $9 a1 a2 a3 a4 a5 a6 a7  }
;label GetValue 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $13 $14 $11 $12 $10 a0 $15 $7 $8 $9 a1 a2 a3 a4 a5 a6 a7  }
;link 44 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T27 liveout: ; { $13 $14 $11 $12 $10 a0 $T27 $15 $7 $8 $9 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T27 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T27 }
; loading $-27 to register r3
;move $-27 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T27 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T27 }
;NEI $7 $T27 label10 liveout: ; { $13 $14 $11 $12 $10 a0 $15 $7 $8 $9 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T27* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T27* }
; ensure(): $T27 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T27* }
; spilling registers at the end of Basic Block
; spilling varialbe $T27
;move r3 $-27 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T27* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label10 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $8 $T28 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7 $T28  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T28 gets register r2 { r0-><null> || r1-><null> || r2->$T28 || r3->$8 }
; loading $-28 to register r2
;move $-28 r2 	; { r0-><null> || r1-><null> || r2->$T28 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T28 || r3->$8 }
; freeing unused variable r3
;STOREF $T28 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T28 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T28* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T28
;move r2 $-28 	; { r0-><null> || r1-><null> || r2->$T28* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label11 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;jmp label11 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label10 liveout: ; { $13 $14 $11 $12 $10 a0 $15 $7 $9 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label10 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T29 liveout: ; { $13 $14 $11 $12 $10 a0 $15 $T29 $7 $9 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T29 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T29 }
; loading $-29 to register r3
;move $-29 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T29 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T29 }
;NEI $7 $T29 label12 liveout: ; { $13 $14 $11 $12 $10 a0 $15 $7 $9 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T29* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T29* }
; ensure(): $T29 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T29* }
; spilling registers at the end of Basic Block
; spilling varialbe $T29
;move r3 $-29 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T29* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label12 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $9 $T30 liveout: ; { a0 a1 $T30 a2 a3 a4 a5 a6 a7  }
; ensure(): $9 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$9 }
; loading $9 to register r3
;move $9 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$9 }
; ensure(): $T30 gets register r2 { r0-><null> || r1-><null> || r2->$T30 || r3->$9 }
; loading $-30 to register r2
;move $-30 r2 	; { r0-><null> || r1-><null> || r2->$T30 || r3->$9 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T30 || r3->$9 }
; freeing unused variable r3
;STOREF $T30 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T30 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T30* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T30
;move r2 $-30 	; { r0-><null> || r1-><null> || r2->$T30* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label13 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;jmp label13 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label12 liveout: ; { $13 $14 $11 $12 $10 a0 $15 $7 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label12 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 2 $T31 liveout: ; { $13 $14 $11 $12 $10 a0 $T31 $15 $7 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T31 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T31 }
; loading $-31 to register r3
;move $-31 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T31 }
;move 2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T31 }
;NEI $7 $T31 label14 liveout: ; { $13 $14 $11 $12 $10 a0 $15 $7 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T31* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T31* }
; ensure(): $T31 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T31* }
; spilling registers at the end of Basic Block
; spilling varialbe $T31
;move r3 $-31 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T31* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label14 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $10 $T32 liveout: ; { a0 a1 a2 a3 $T32 a4 a5 a6 a7  }
; ensure(): $10 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$10 }
; loading $10 to register r3
;move $10 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$10 }
; ensure(): $T32 gets register r2 { r0-><null> || r1-><null> || r2->$T32 || r3->$10 }
; loading $-32 to register r2
;move $-32 r2 	; { r0-><null> || r1-><null> || r2->$T32 || r3->$10 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T32 || r3->$10 }
; freeing unused variable r3
;STOREF $T32 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T32 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T32* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T32
;move r2 $-32 	; { r0-><null> || r1-><null> || r2->$T32* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label15 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;jmp label15 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label14 liveout: ; { $13 $14 $11 $12 a0 $15 $7 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label14 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 3 $T33 liveout: ; { $13 $14 $11 $12 a0 $15 $7 $T33 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T33 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T33 }
; loading $-33 to register r3
;move $-33 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T33 }
;move 3 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T33 }
;NEI $7 $T33 label16 liveout: ; { $13 $14 $11 $12 a0 $15 $7 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T33* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T33* }
; ensure(): $T33 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T33* }
; spilling registers at the end of Basic Block
; spilling varialbe $T33
;move r3 $-33 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T33* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label16 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $11 $T34 liveout: ; { $T34 a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $11 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$11 }
; loading $11 to register r3
;move $11 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$11 }
; ensure(): $T34 gets register r2 { r0-><null> || r1-><null> || r2->$T34 || r3->$11 }
; loading $-34 to register r2
;move $-34 r2 	; { r0-><null> || r1-><null> || r2->$T34 || r3->$11 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T34 || r3->$11 }
; freeing unused variable r3
;STOREF $T34 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T34 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T34* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T34
;move r2 $-34 	; { r0-><null> || r1-><null> || r2->$T34* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label17 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;jmp label17 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label16 liveout: ; { $13 $14 $12 a0 $15 $7 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label16 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 4 $T35 liveout: ; { $13 $14 $12 a0 $15 $7 $T35 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T35 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T35 }
; loading $-35 to register r3
;move $-35 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T35 }
;move 4 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T35 }
;NEI $7 $T35 label18 liveout: ; { $13 $14 $12 a0 $15 $7 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T35* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T35* }
; ensure(): $T35 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T35* }
; spilling registers at the end of Basic Block
; spilling varialbe $T35
;move r3 $-35 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T35* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label18 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $12 $T36 liveout: ; { a0 $T36 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $12 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$12 }
; loading $12 to register r3
;move $12 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$12 }
; ensure(): $T36 gets register r2 { r0-><null> || r1-><null> || r2->$T36 || r3->$12 }
; loading $-36 to register r2
;move $-36 r2 	; { r0-><null> || r1-><null> || r2->$T36 || r3->$12 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T36 || r3->$12 }
; freeing unused variable r3
;STOREF $T36 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T36 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T36* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T36
;move r2 $-36 	; { r0-><null> || r1-><null> || r2->$T36* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label19 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;jmp label19 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label18 liveout: ; { $13 $14 $7 a0 a1 a2 a3 a4 a5 a6 $15 a7  }
; spilling registers at the end of Basic Block
;label label18 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 5 $T37 liveout: ; { $13 $14 a0 $15 $T37 $7 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T37 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T37 }
; loading $-37 to register r3
;move $-37 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T37 }
;move 5 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T37 }
;NEI $7 $T37 label20 liveout: ; { $13 $14 $7 a0 a1 a2 a3 a4 a5 a6 $15 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T37* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T37* }
; ensure(): $T37 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T37* }
; spilling registers at the end of Basic Block
; spilling varialbe $T37
;move r3 $-37 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T37* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label20 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $13 $T38 liveout: ; { $T38 a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $13 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
; loading $13 to register r3
;move $13 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
; ensure(): $T38 gets register r2 { r0-><null> || r1-><null> || r2->$T38 || r3->$13 }
; loading $-38 to register r2
;move $-38 r2 	; { r0-><null> || r1-><null> || r2->$T38 || r3->$13 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T38 || r3->$13 }
; freeing unused variable r3
;STOREF $T38 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T38 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T38* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T38
;move r2 $-38 	; { r0-><null> || r1-><null> || r2->$T38* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label21 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;jmp label21 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label20 liveout: ; { $14 $7 a0 a1 a2 a3 a4 a5 a6 $15 a7  }
; spilling registers at the end of Basic Block
;label label20 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 6 $T39 liveout: ; { $14 $T39 $7 a0 a1 a2 a3 a4 a5 a6 $15 a7  }
; ensure(): $T39 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T39 }
; loading $-39 to register r3
;move $-39 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T39 }
;move 6 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T39 }
;NEI $7 $T39 label22 liveout: ; { $14 $7 a0 a1 a2 a3 a4 a5 a6 $15 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T39* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T39* }
; ensure(): $T39 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T39* }
; spilling registers at the end of Basic Block
; spilling varialbe $T39
;move r3 $-39 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T39* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label22 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $14 $T40 liveout: ; { a0 a1 a2 a3 a4 $T40 a5 a6 a7  }
; ensure(): $14 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
; loading $14 to register r3
;move $14 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
; ensure(): $T40 gets register r2 { r0-><null> || r1-><null> || r2->$T40 || r3->$14 }
; loading $-40 to register r2
;move $-40 r2 	; { r0-><null> || r1-><null> || r2->$T40 || r3->$14 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T40 || r3->$14 }
; freeing unused variable r3
;STOREF $T40 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T40 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T40* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T40
;move r2 $-40 	; { r0-><null> || r1-><null> || r2->$T40* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label23 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;jmp label23 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label22 liveout: ; { $7 a0 a1 a2 a3 a4 a5 a6 a7 $15  }
; spilling registers at the end of Basic Block
;label label22 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 7 $T41 liveout: ; { $7 a0 a1 a2 a3 $T41 a4 a5 a6 a7 $15  }
; ensure(): $T41 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T41 }
; loading $-41 to register r3
;move $-41 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T41 }
;move 7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T41 }
;NEI $7 $T41 label24 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7 $15  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T41* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T41* }
; ensure(): $T41 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T41* }
; spilling registers at the end of Basic Block
; spilling varialbe $T41
;move r3 $-41 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T41* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label24 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $15 $T42 liveout: ; { a0 a1 a2 $T42 a3 a4 a5 a6 a7  }
; ensure(): $15 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$15 }
; loading $15 to register r3
;move $15 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$15 }
; ensure(): $T42 gets register r2 { r0-><null> || r1-><null> || r2->$T42 || r3->$15 }
; loading $-42 to register r2
;move $-42 r2 	; { r0-><null> || r1-><null> || r2->$T42 || r3->$15 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T42 || r3->$15 }
; freeing unused variable r3
;STOREF $T42 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T42 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T42* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T42
;move r2 $-42 	; { r0-><null> || r1-><null> || r2->$T42* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label25 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;jmp label25 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label24 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label24 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label25 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label25 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label23 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label23 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label21 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label21 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label19 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label19 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label17 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label17 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label15 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label15 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label13 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label13 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label11 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label11 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T43 liveout: ; { a0 a1 $T43 a2 a3 a4 a5 a6 a7  }
; ensure(): $T43 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T43 }
; loading $-43 to register r3
;move $-43 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T43 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T43 }
;STOREI $T43 $6 liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; ensure(): $T43 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T43* }
; freeing unused variable r3
; spilling varialbe $T43
;move r3 $-43 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T43* }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }

str space " "
str eol "\n"
str tab "        "
str smS " is smaller than "
str leS " is larger than or equal to "
str minis " min: "
str maxis " max: "
var a0
var a1
var a2
var a3
var a4
var a5
var a6
var a7
push
push
push
push
push
jsr main
sys halt
label main
link 53
move $-10 r3
move 20.5 r3
move a0 r2
move r3 r2
move r3 $-10
move $-11 r3
move 16.5 r3
move a1 r1
move r3 r1
move r3 $-11
move $-12 r3
move 12.0 r3
move a2 r0
move r3 r0
move r3 $-12
move $-13 r3
move 1.2 r3
move r0 a2
move a3 r0
move r3 r0
move r3 $-13
move $-14 r3
move 1.3 r3
move r0 a3
move a4 r0
move r3 r0
move r3 $-14
move $-15 r3
move 12.1 r3
move r0 a4
move a5 r0
move r3 r0
move r3 $-15
move $-16 r3
move 15.1 r3
move r0 a5
move a6 r0
move r3 r0
move r3 $-16
move $-17 r3
move 10.1 r3
move r0 a6
move a7 r0
move r3 r0
move r3 $-17
move $-18 r3
move r2 r3
move r0 a7
move $-6 r0
move r3 r0
move r3 $-18
move r0 $-6
move $-19 r3
move 0 r3
move $-8 r0
move r3 r0
move r3 $-19
move r2 a0
move r1 a1
move r0 $-8
label label1
move $-20 r3
move 4 r3
move $-8 r2
cmpi r2 r3
move r3 $-20
move r2 $-8
jge label3
move $-23 r3
move 7 r3
move $-8 r2
move r3 $-23
subi r2 r3
move $-9 r1
move r3 r1
move r3 $-24
move a7 r3
push r3
move a6 r0
push r0
move a5 r0
push r0
move a4 r0
push r0
move a3 r0
push r0
move a2 r0
push r0
move a1 r0
push r0
move a0 r0
push r0
push r2
push
push r0
push r1
push r2
push r3
move r3 a7
move r0 a0
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-25 r3
pop r3
pop
pop
pop
pop
pop
pop
pop
pop
pop
move $-3 r0
move r3 r0
move r3 $-25
move a7 r3
push r3
move r0 $-3
move a6 r0
push r0
move a5 r0
push r0
move a4 r0
push r0
move a3 r0
push r0
move a2 r0
push r0
move a1 r0
push r0
move a0 r0
push r0
push r1
push
push r0
push r1
push r2
push r3
move r3 a7
move r0 a0
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-26 r3
pop r3
pop
pop
pop
pop
pop
pop
pop
pop
pop
move $-4 r0
move r3 r0
move r3 $-26
move a7 r3
push r3
move r0 $-4
move a6 r0
push r0
move a5 r0
push r0
move a4 r0
push r0
move a3 r0
push r0
move a2 r0
push r0
move a1 r0
push r0
move a0 r0
push r0
push r2
push
push r0
push r1
push r2
push r3
move r3 a7
move r0 a0
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-27 r3
pop r3
pop
pop
pop
pop
pop
pop
pop
pop
pop
move a7 r0
push r0
move a6 r0
push r0
move a5 r0
push r0
move a4 r0
push r0
move a3 r0
push r0
move a2 r0
push r0
move a1 r0
push r0
move a0 r0
push r0
push r1
push
push r0
push r1
push r2
push r3
move r0 a0
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-28 r0
pop r0
pop
pop
pop
pop
pop
pop
pop
pop
pop
cmpr r3 r0
move r3 $-27
move r2 $-8
move r1 $-9
move r0 $-28
jle label4
move $-8 r3
sys writei r3
sys writes space
move $-9 r2
sys writei r2
sys writes space
move $-3 r2
sys writer r2
sys writes space
move $-4 r1
sys writer r1
sys writes space
sys writer r2
sys writes eol
move r3 $-8
jmp label5
label label4
move $-8 r3
sys writei r3
sys writes space
move $-9 r2
sys writei r2
sys writes space
move $-3 r2
sys writer r2
sys writes space
move $-4 r2
sys writer r2
sys writes space
sys writer r2
sys writes eol
move r3 $-8
label label5
move $-21 r3
move 1 r3
move $-8 r2
addi r3 r2
move r3 $-21
move $-8 r3
move r2 r3
move r2 $-22
move r3 $-8
jmp label1
label label3
unlnk
ret
label IsLargerThanOrEqualTo
link 44
move $8 r3
move $-20 r2
move r3 r2
move $7 r3
cmpr r3 r2
move r3 $7
move r2 $-20
jlt label6
move $-21 r3
move 1 r3
move r3 $6
move r3 $-21
unlnk
ret
jmp label7
label label6
label label7
move $-22 r3
move 0 r3
move r3 $6
move r3 $-22
unlnk
ret
label IsSmallerThan
link 44
move $8 r3
push r3
move $7 r3
push r3
push
push r0
push r1
push r2
push r3
jsr IsLargerThanOrEqualTo
pop r3
pop r2
pop r1
pop r0
move $-23 r3
pop r3
pop
pop
move $-24 r2
move 0 r2
cmpi r3 r2
move r3 $-23
move r2 $-24
jeq label8
move $-25 r3
move 0 r3
move r3 $6
move r3 $-25
unlnk
ret
jmp label9
label label8
label label9
move $-26 r3
move 1 r3
move r3 $6
move r3 $-26
unlnk
ret
label GetValue
link 44
move $-27 r3
move 0 r3
move $7 r2
cmpi r2 r3
move r3 $-27
move r2 $7
jne label10
move $8 r3
move $-28 r2
move r3 r2
move r2 $6
move r2 $-28
unlnk
ret
jmp label11
label label10
move $-29 r3
move 1 r3
move $7 r2
cmpi r2 r3
move r3 $-29
move r2 $7
jne label12
move $9 r3
move $-30 r2
move r3 r2
move r2 $6
move r2 $-30
unlnk
ret
jmp label13
label label12
move $-31 r3
move 2 r3
move $7 r2
cmpi r2 r3
move r3 $-31
move r2 $7
jne label14
move $10 r3
move $-32 r2
move r3 r2
move r2 $6
move r2 $-32
unlnk
ret
jmp label15
label label14
move $-33 r3
move 3 r3
move $7 r2
cmpi r2 r3
move r3 $-33
move r2 $7
jne label16
move $11 r3
move $-34 r2
move r3 r2
move r2 $6
move r2 $-34
unlnk
ret
jmp label17
label label16
move $-35 r3
move 4 r3
move $7 r2
cmpi r2 r3
move r3 $-35
move r2 $7
jne label18
move $12 r3
move $-36 r2
move r3 r2
move r2 $6
move r2 $-36
unlnk
ret
jmp label19
label label18
move $-37 r3
move 5 r3
move $7 r2
cmpi r2 r3
move r3 $-37
move r2 $7
jne label20
move $13 r3
move $-38 r2
move r3 r2
move r2 $6
move r2 $-38
unlnk
ret
jmp label21
label label20
move $-39 r3
move 6 r3
move $7 r2
cmpi r2 r3
move r3 $-39
move r2 $7
jne label22
move $14 r3
move $-40 r2
move r3 r2
move r2 $6
move r2 $-40
unlnk
ret
jmp label23
label label22
move $-41 r3
move 7 r3
move $7 r2
cmpi r2 r3
move r3 $-41
move r2 $7
jne label24
move $15 r3
move $-42 r2
move r3 r2
move r2 $6
move r2 $-42
unlnk
ret
jmp label25
label label24
label label25
label label23
label label21
label label19
label label17
label label15
label label13
label label11
move $-43 r3
move 0 r3
move r3 $6
move r3 $-43
unlnk
ret
