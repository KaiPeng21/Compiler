; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
;Symbol table GLOBAL
; return type: null
; subscope local var size: 0
;scope type: GLOBAL_TYPE 
;name inputMessage type STRING value "inputs are: \n" local slot location: -1
;name sortMessage type STRING value "\n sorting... \n" local slot location: -2
;name space type STRING value " " local slot location: -3
;name eol type STRING value "\n" local slot location: -4
;name fmax type FLOAT local slot location: -5
;name a0 type FLOAT local slot location: -6
;name a1 type FLOAT local slot location: -7
;name a2 type FLOAT local slot location: -8
;name a3 type FLOAT local slot location: -9
;name a4 type FLOAT local slot location: -10
;name a5 type FLOAT local slot location: -11


;Symbol table Incre
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name i type INT parameter slot location: 7


;Symbol table Decre
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name i type INT parameter slot location: 7


;Symbol table main
; return type: VOID
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name arraysize type INT local slot location: -1
;name i type INT local slot location: -2
;name minind type INT local slot location: -3
;name minval type FLOAT local slot location: -4


;Symbol table BLOCK 1
; return type: null
; subscope local var size: 0
;scope type: FOR_TYPE 


;Symbol table FindMin
; return type: FLOAT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name arraysize type INT parameter slot location: 7
;name p0 type FLOAT parameter slot location: 8
;name p1 type FLOAT parameter slot location: 9
;name p2 type FLOAT parameter slot location: 10
;name p3 type FLOAT parameter slot location: 11
;name p4 type FLOAT parameter slot location: 12
;name p5 type FLOAT parameter slot location: 13
;name i type INT local slot location: -1
;name min type FLOAT local slot location: -2


;Symbol table BLOCK 2
; return type: null
; subscope local var size: 0
;scope type: FOR_TYPE 


;Symbol table BLOCK 3
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table FindIndex
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name arraysize type INT parameter slot location: 7
;name finding type FLOAT parameter slot location: 8
;name p0 type FLOAT parameter slot location: 9
;name p1 type FLOAT parameter slot location: 10
;name p2 type FLOAT parameter slot location: 11
;name p3 type FLOAT parameter slot location: 12
;name p4 type FLOAT parameter slot location: 13
;name p5 type FLOAT parameter slot location: 14
;name i type INT local slot location: -1


;Symbol table BLOCK 4
; return type: null
; subscope local var size: 0
;scope type: FOR_TYPE 


;Symbol table BLOCK 5
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table IsEqual
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name f1 type FLOAT parameter slot location: 7
;name f2 type FLOAT parameter slot location: 8


;Symbol table BLOCK 6
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table IsNotEqual
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name f1 type FLOAT parameter slot location: 7
;name f2 type FLOAT parameter slot location: 8


;Symbol table BLOCK 7
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table GetValue
; return type: FLOAT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name ind type INT parameter slot location: 7
;name p0 type FLOAT parameter slot location: 8
;name p1 type FLOAT parameter slot location: 9
;name p2 type FLOAT parameter slot location: 10
;name p3 type FLOAT parameter slot location: 11
;name p4 type FLOAT parameter slot location: 12
;name p5 type FLOAT parameter slot location: 13


;Symbol table BLOCK 8
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 9
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 10
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 11
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 12
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 13
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 14
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 15
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 16
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 17
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 18
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 19
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table SetAValue
; return type: FLOAT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name ind type INT parameter slot location: 7
;name setval type FLOAT parameter slot location: 8


;Symbol table BLOCK 20
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 21
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 22
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 23
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 24
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 25
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 26
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 27
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 28
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 29
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 30
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 31
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table SYSIN
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name i type INT local slot location: -1
;name arraysize type INT local slot location: -2
;name dummy type FLOAT local slot location: -3


;Symbol table BLOCK 32
; return type: null
; subscope local var size: 0
;scope type: FOR_TYPE 


;Symbol table BLOCK 33
; return type: null
; subscope local var size: 0
;scope type: FOR_TYPE 


; searching slot location for -- i -- in function scope Incre and get location 7

;OPT BUG
; SUBSCOPE for function scope: Incre

;return assignExpr: i+1
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; searching slot location for -- i -- in function scope Decre and get location 7

;OPT BUG
; SUBSCOPE for function scope: Decre

;return assignExpr: i-1
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; pre-conversion assignOutputID: arraysize
; searching slot location for -- arraysize -- in function scope main and get location -1

; post-conversion assignOutputID: $-1
; SUBSCOPE for function scope: main
; SUBSCOPE block ID: 1 scopeType: FOR

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope main and get location -2

; post-conversion assignOutputID: $-2
; searching slot location for -- i -- in function scope main and get location -2

;exit Cond: < :: i :: arraysize
; searching slot location for -- i -- in function scope main and get location -2

; searching slot location for -- arraysize -- in function scope main and get location -1

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope main and get location -2

; post-conversion assignOutputID: $-2
; searching slot location for -- i -- in function scope main and get location -2

; searching slot location for -- arraysize -- in function scope main and get location -1

; searching slot location for -- arraysize -- in function scope main and get location -1

; pre-conversion assignOutputID: minval
; searching slot location for -- minval -- in function scope main and get location -4

; post-conversion assignOutputID: $-4
; searching slot location for -- arraysize -- in function scope main and get location -1

; searching slot location for -- arraysize -- in function scope main and get location -1

; searching slot location for -- minval -- in function scope main and get location -4

; searching slot location for -- minval -- in function scope main and get location -4

; pre-conversion assignOutputID: minind
; searching slot location for -- minind -- in function scope main and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- minind -- in function scope main and get location -3

; searching slot location for -- minind -- in function scope main and get location -3

; searching slot location for -- minval -- in function scope main and get location -4

; pre-conversion assignOutputID: min
; searching slot location for -- min -- in function scope FindMin and get location -2

; post-conversion assignOutputID: $-2
; searching slot location for -- p0 -- in function scope FindMin and get location 8

; searching slot location for -- p0 -- in function scope FindMin and get location 8

; SUBSCOPE for function scope: FindMin
; SUBSCOPE block ID: 2 scopeType: FOR

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope FindMin and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope FindMin and get location -1

;exit Cond: < :: i :: arraysize
; searching slot location for -- i -- in function scope FindMin and get location -1

; searching slot location for -- arraysize -- in function scope FindMin and get location 7

; SUBSCOPE for function scope: FindMin
; SUBSCOPE block ID: 2 scopeType: FOR
; SUBSCOPE block ID: 3 scopeType: IF

; searching slot location for -- i -- in function scope FindMin and get location -1

; searching slot location for -- i -- in function scope FindMin and get location -1

; searching slot location for -- p0 -- in function scope FindMin and get location 8

; searching slot location for -- p0 -- in function scope FindMin and get location 8

; searching slot location for -- p1 -- in function scope FindMin and get location 9

; searching slot location for -- p1 -- in function scope FindMin and get location 9

; searching slot location for -- p2 -- in function scope FindMin and get location 10

; searching slot location for -- p2 -- in function scope FindMin and get location 10

; searching slot location for -- p3 -- in function scope FindMin and get location 11

; searching slot location for -- p3 -- in function scope FindMin and get location 11

; searching slot location for -- p4 -- in function scope FindMin and get location 12

; searching slot location for -- p4 -- in function scope FindMin and get location 12

; searching slot location for -- p5 -- in function scope FindMin and get location 13

; searching slot location for -- p5 -- in function scope FindMin and get location 13

;exit Cond: < :: GetValue(i,p0,p1,p2,p3,p4,p5) :: min
; searching slot location for -- min -- in function scope FindMin and get location -2

; searching slot location for -- i -- in function scope FindMin and get location -1

; searching slot location for -- i -- in function scope FindMin and get location -1

; searching slot location for -- p0 -- in function scope FindMin and get location 8

; searching slot location for -- p0 -- in function scope FindMin and get location 8

; searching slot location for -- p1 -- in function scope FindMin and get location 9

; searching slot location for -- p1 -- in function scope FindMin and get location 9

; searching slot location for -- p2 -- in function scope FindMin and get location 10

; searching slot location for -- p2 -- in function scope FindMin and get location 10

; searching slot location for -- p3 -- in function scope FindMin and get location 11

; searching slot location for -- p3 -- in function scope FindMin and get location 11

; searching slot location for -- p4 -- in function scope FindMin and get location 12

; searching slot location for -- p4 -- in function scope FindMin and get location 12

; searching slot location for -- p5 -- in function scope FindMin and get location 13

; searching slot location for -- p5 -- in function scope FindMin and get location 13

; pre-conversion assignOutputID: min
; searching slot location for -- min -- in function scope FindMin and get location -2

; post-conversion assignOutputID: $-2
; SUBSCOPE for function scope: FindMin
; SUBSCOPE block ID: 2 scopeType: FOR
; SUBSCOPE block ID: 4 scopeType: ELSE

; searching slot location for -- i -- in function scope FindMin and get location -1

; searching slot location for -- i -- in function scope FindMin and get location -1

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope FindMin and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- min -- in function scope FindMin and get location -2

; searching slot location for -- min -- in function scope FindMin and get location -2

;OPT BUG
; SUBSCOPE for function scope: FindMin

;return assignExpr: min
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: FindIndex
; SUBSCOPE block ID: 5 scopeType: FOR

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope FindIndex and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope FindIndex and get location -1

;exit Cond: < :: i :: arraysize
; searching slot location for -- i -- in function scope FindIndex and get location -1

; searching slot location for -- arraysize -- in function scope FindIndex and get location 7

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope FindIndex and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope FindIndex and get location -1

; SUBSCOPE for function scope: FindIndex
; SUBSCOPE block ID: 5 scopeType: FOR
; SUBSCOPE block ID: 6 scopeType: IF

; searching slot location for -- finding -- in function scope FindIndex and get location 8

; searching slot location for -- finding -- in function scope FindIndex and get location 8

; searching slot location for -- i -- in function scope FindIndex and get location -1

; searching slot location for -- i -- in function scope FindIndex and get location -1

; searching slot location for -- p0 -- in function scope FindIndex and get location 9

; searching slot location for -- p0 -- in function scope FindIndex and get location 9

; searching slot location for -- p1 -- in function scope FindIndex and get location 10

; searching slot location for -- p1 -- in function scope FindIndex and get location 10

; searching slot location for -- p2 -- in function scope FindIndex and get location 11

; searching slot location for -- p2 -- in function scope FindIndex and get location 11

; searching slot location for -- p3 -- in function scope FindIndex and get location 12

; searching slot location for -- p3 -- in function scope FindIndex and get location 12

; searching slot location for -- p4 -- in function scope FindIndex and get location 13

; searching slot location for -- p4 -- in function scope FindIndex and get location 13

; searching slot location for -- p5 -- in function scope FindIndex and get location 14

; searching slot location for -- p5 -- in function scope FindIndex and get location 14

;exit Cond: = :: IsEqual(finding,GetValue(i,p0,p1,p2,p3,p4,p5)) :: 1
; searching slot location for -- i -- in function scope FindIndex and get location -1

; searching slot location for -- i -- in function scope FindIndex and get location -1

;OPT BUG
; SUBSCOPE for function scope: FindIndex
; SUBSCOPE block ID: 5 scopeType: FOR
; SUBSCOPE block ID: 6 scopeType: IF

;return assignExpr: i
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: FindIndex
; SUBSCOPE block ID: 5 scopeType: FOR
; SUBSCOPE block ID: 7 scopeType: ELSE

; searching slot location for -- i -- in function scope FindIndex and get location -1

; searching slot location for -- i -- in function scope FindIndex and get location -1

;OPT BUG
; SUBSCOPE for function scope: FindIndex

;return assignExpr: i
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsEqual
; SUBSCOPE block ID: 8 scopeType: IF

; searching slot location for -- f1 -- in function scope IsEqual and get location 7

; searching slot location for -- f1 -- in function scope IsEqual and get location 7

; searching slot location for -- f2 -- in function scope IsEqual and get location 8

; searching slot location for -- f2 -- in function scope IsEqual and get location 8

;exit Cond: = :: IsNotEqual(f1,f2) :: 0
;OPT BUG
; SUBSCOPE for function scope: IsEqual
; SUBSCOPE block ID: 8 scopeType: IF

;return assignExpr: 1
;left: 1
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsEqual
; SUBSCOPE block ID: 9 scopeType: ELSE

;OPT BUG
; SUBSCOPE for function scope: IsEqual

;return assignExpr: 0
;left: 1
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsNotEqual
; SUBSCOPE block ID: 10 scopeType: IF

; searching slot location for -- f1 -- in function scope IsNotEqual and get location 7

;exit Cond: != :: f1 :: f2
; searching slot location for -- f1 -- in function scope IsNotEqual and get location 7

; searching slot location for -- f2 -- in function scope IsNotEqual and get location 8

;OPT BUG
; SUBSCOPE for function scope: IsNotEqual
; SUBSCOPE block ID: 10 scopeType: IF

;return assignExpr: 1
;left: 1
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsNotEqual
; SUBSCOPE block ID: 11 scopeType: ELSE

;OPT BUG
; SUBSCOPE for function scope: IsNotEqual

;return assignExpr: 0
;left: 1
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 12 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 0
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p0 -- in function scope GetValue and get location 8

; searching slot location for -- p0 -- in function scope GetValue and get location 8

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 12 scopeType: IF

;return assignExpr: p0
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 14 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 1
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p1 -- in function scope GetValue and get location 9

; searching slot location for -- p1 -- in function scope GetValue and get location 9

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 14 scopeType: IF

;return assignExpr: p1
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 16 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 2
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p2 -- in function scope GetValue and get location 10

; searching slot location for -- p2 -- in function scope GetValue and get location 10

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 16 scopeType: IF

;return assignExpr: p2
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 18 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 3
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p3 -- in function scope GetValue and get location 11

; searching slot location for -- p3 -- in function scope GetValue and get location 11

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 18 scopeType: IF

;return assignExpr: p3
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 20 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 4
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p4 -- in function scope GetValue and get location 12

; searching slot location for -- p4 -- in function scope GetValue and get location 12

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 20 scopeType: IF

;return assignExpr: p4
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE
; SUBSCOPE block ID: 22 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 5
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p5 -- in function scope GetValue and get location 13

; searching slot location for -- p5 -- in function scope GetValue and get location 13

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE
; SUBSCOPE block ID: 22 scopeType: IF

;return assignExpr: p5
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE
; SUBSCOPE block ID: 23 scopeType: ELSE

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 24 scopeType: IF

; searching slot location for -- ind -- in function scope SetAValue and get location 7

;exit Cond: = :: ind :: 0
; searching slot location for -- ind -- in function scope SetAValue and get location 7

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 25 scopeType: ELSE

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 26 scopeType: IF

; searching slot location for -- ind -- in function scope SetAValue and get location 7

;exit Cond: = :: ind :: 1
; searching slot location for -- ind -- in function scope SetAValue and get location 7

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 28 scopeType: IF

; searching slot location for -- ind -- in function scope SetAValue and get location 7

;exit Cond: = :: ind :: 2
; searching slot location for -- ind -- in function scope SetAValue and get location 7

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 30 scopeType: IF

; searching slot location for -- ind -- in function scope SetAValue and get location 7

;exit Cond: = :: ind :: 3
; searching slot location for -- ind -- in function scope SetAValue and get location 7

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 32 scopeType: IF

; searching slot location for -- ind -- in function scope SetAValue and get location 7

;exit Cond: = :: ind :: 4
; searching slot location for -- ind -- in function scope SetAValue and get location 7

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE
; SUBSCOPE block ID: 34 scopeType: IF

; searching slot location for -- ind -- in function scope SetAValue and get location 7

;exit Cond: = :: ind :: 5
; searching slot location for -- ind -- in function scope SetAValue and get location 7

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; SUBSCOPE for function scope: SetAValue
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE
; SUBSCOPE block ID: 35 scopeType: ELSE

; searching slot location for -- setval -- in function scope SetAValue and get location 8

; searching slot location for -- setval -- in function scope SetAValue and get location 8

;OPT BUG
; SUBSCOPE for function scope: SetAValue

;return assignExpr: setval
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope SYSIN and get location -1

; post-conversion assignOutputID: $-1
; pre-conversion assignOutputID: arraysize
; searching slot location for -- arraysize -- in function scope SYSIN and get location -2

; post-conversion assignOutputID: $-2
; SUBSCOPE for function scope: SYSIN
; SUBSCOPE block ID: 36 scopeType: FOR

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope SYSIN and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope SYSIN and get location -1

;exit Cond: < :: i :: arraysize/2
; searching slot location for -- arraysize -- in function scope SYSIN and get location -2

; searching slot location for -- i -- in function scope SYSIN and get location -1

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope SYSIN and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope SYSIN and get location -1

; searching slot location for -- i -- in function scope SYSIN and get location -1

; searching slot location for -- i -- in function scope SYSIN and get location -1

; pre-conversion assignOutputID: dummy
; searching slot location for -- dummy -- in function scope SYSIN and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- dummy -- in function scope SYSIN and get location -3

; SUBSCOPE for function scope: SYSIN
; SUBSCOPE block ID: 37 scopeType: FOR

; searching slot location for -- i -- in function scope SYSIN and get location -1

;exit Cond: < :: i :: arraysize
; searching slot location for -- i -- in function scope SYSIN and get location -1

; searching slot location for -- arraysize -- in function scope SYSIN and get location -2

; searching slot location for -- i -- in function scope SYSIN and get location -1

; searching slot location for -- i -- in function scope SYSIN and get location -1

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope SYSIN and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope SYSIN and get location -1

; searching slot location for -- i -- in function scope SYSIN and get location -1

; pre-conversion assignOutputID: dummy
; searching slot location for -- dummy -- in function scope SYSIN and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- dummy -- in function scope SYSIN and get location -3

; searching slot location for -- arraysize -- in function scope SYSIN and get location -2

; searching slot location for -- arraysize -- in function scope SYSIN and get location -2

;OPT BUG
; SUBSCOPE for function scope: SYSIN

;return assignExpr: arraysize
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false

;IR code
;PUSH
;JSR main
;HALT

;LABEL Incre		 Under Func Scope: Incre
;LINK 1			 Under Func Scope: Incre
;STOREI 1 $T1		 Under Func Scope: Incre
;ADDI $7 $T1 $T2	 Under Func Scope: Incre
;STOREI $T2 $6		 Under Func Scope: Incre
;UNLINK			 Under Func Scope: Incre
;RET			 Under Func Scope: Incre

;LABEL Decre		 Under Func Scope: Decre
;LINK 1			 Under Func Scope: Decre
;STOREI 1 $T3		 Under Func Scope: Decre
;SUBI $7 $T3 $T4	 Under Func Scope: Decre
;STOREI $T4 $6		 Under Func Scope: Decre
;UNLINK			 Under Func Scope: Decre
;RET			 Under Func Scope: Decre

;LABEL main		 Under Func Scope: main
;LINK 5			 Under Func Scope: main
;STOREF 1000.00 $T5	 Under Func Scope: main
;STOREF $T5 fmax	 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR SYSIN		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T6		 Under Func Scope: main
;STOREI $T6 $-1		 Under Func Scope: main
;WRITES sortMessage	 Under Func Scope: main
;STOREI 0 $T7		 Under Func Scope: main
;STOREI $T7 $-2		 Under Func Scope: main
;LABEL label1		 Under Func Scope: main
;STOREI $-1 $T8		 Under Func Scope: main
;GEI $-2 $T8 label3	 Under Func Scope: main
;PUSH a5		 Under Func Scope: main
;PUSH a4		 Under Func Scope: main
;PUSH a3		 Under Func Scope: main
;PUSH a2		 Under Func Scope: main
;PUSH a1		 Under Func Scope: main
;PUSH a0		 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR FindMin		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T11		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREF $T11 $-4	 Under Func Scope: main
;PUSH a5		 Under Func Scope: main
;PUSH a4		 Under Func Scope: main
;PUSH a3		 Under Func Scope: main
;PUSH a2		 Under Func Scope: main
;PUSH a1		 Under Func Scope: main
;PUSH a0		 Under Func Scope: main
;PUSH $-4		 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR FindIndex		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T12		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREI $T12 $-3	 Under Func Scope: main
;PUSH fmax		 Under Func Scope: main
;PUSH $-3		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR SetAValue		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T13		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREF $T13 fmax	 Under Func Scope: main
;WRITEF $-4		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;STOREI 1 $T9		 Under Func Scope: main
;ADDI $-2 $T9 $T10	 Under Func Scope: main
;STOREI $T10 $-2	 Under Func Scope: main
;JUMP label1		 Under Func Scope: main
;LABEL label3		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;UNLINK			 Under Func Scope: main
;RET			 Under Func Scope: main

;LABEL FindMin		 Under Func Scope: FindMin
;LINK 3			 Under Func Scope: FindMin
;STOREF $8 $T14		 Under Func Scope: FindMin
;STOREF $T14 $-2	 Under Func Scope: FindMin
;STOREI 1 $T15		 Under Func Scope: FindMin
;STOREI $T15 $-1	 Under Func Scope: FindMin
;LABEL label4		 Under Func Scope: FindMin
;STOREI $7 $T16		 Under Func Scope: FindMin
;GEI $-1 $T16 label6	 Under Func Scope: FindMin
;PUSH $13		 Under Func Scope: FindMin
;PUSH $12		 Under Func Scope: FindMin
;PUSH $11		 Under Func Scope: FindMin
;PUSH $10		 Under Func Scope: FindMin
;PUSH $9		 Under Func Scope: FindMin
;PUSH $8		 Under Func Scope: FindMin
;PUSH $-1		 Under Func Scope: FindMin
;PUSH 			 Under Func Scope: FindMin
;PUSHREG		 Under Func Scope: FindMin
;JSR GetValue		 Under Func Scope: FindMin
;POPREG			 Under Func Scope: FindMin
;POP $T17		 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;GEF $T17 $-2 label7	 Under Func Scope: FindMin
;PUSH $13		 Under Func Scope: FindMin
;PUSH $12		 Under Func Scope: FindMin
;PUSH $11		 Under Func Scope: FindMin
;PUSH $10		 Under Func Scope: FindMin
;PUSH $9		 Under Func Scope: FindMin
;PUSH $8		 Under Func Scope: FindMin
;PUSH $-1		 Under Func Scope: FindMin
;PUSH 			 Under Func Scope: FindMin
;PUSHREG		 Under Func Scope: FindMin
;JSR GetValue		 Under Func Scope: FindMin
;POPREG			 Under Func Scope: FindMin
;POP $T18		 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;STOREF $T18 $-2	 Under Func Scope: FindMin
;JUMP label8		 Under Func Scope: FindMin
;LABEL label7		 Under Func Scope: FindMin
;LABEL label8		 Under Func Scope: FindMin
;PUSH $-1		 Under Func Scope: FindMin
;PUSH 			 Under Func Scope: FindMin
;PUSHREG		 Under Func Scope: FindMin
;JSR Incre		 Under Func Scope: FindMin
;POPREG			 Under Func Scope: FindMin
;POP $T19		 Under Func Scope: FindMin
;POP 			 Under Func Scope: FindMin
;STOREI $T19 $-1	 Under Func Scope: FindMin
;JUMP label4		 Under Func Scope: FindMin
;LABEL label6		 Under Func Scope: FindMin
;STOREF $-2 $T20	 Under Func Scope: FindMin
;STOREF $T20 $6		 Under Func Scope: FindMin
;UNLINK			 Under Func Scope: FindMin
;RET			 Under Func Scope: FindMin

;LABEL FindIndex	 Under Func Scope: FindIndex
;LINK 2			 Under Func Scope: FindIndex
;STOREI 0 $T21		 Under Func Scope: FindIndex
;STOREI $T21 $-1	 Under Func Scope: FindIndex
;LABEL label9		 Under Func Scope: FindIndex
;STOREI $7 $T22		 Under Func Scope: FindIndex
;GEI $-1 $T22 label11	 Under Func Scope: FindIndex
;PUSH $14		 Under Func Scope: FindIndex
;PUSH $13		 Under Func Scope: FindIndex
;PUSH $12		 Under Func Scope: FindIndex
;PUSH $11		 Under Func Scope: FindIndex
;PUSH $10		 Under Func Scope: FindIndex
;PUSH $9		 Under Func Scope: FindIndex
;PUSH $-1		 Under Func Scope: FindIndex
;PUSH 			 Under Func Scope: FindIndex
;PUSHREG		 Under Func Scope: FindIndex
;JSR GetValue		 Under Func Scope: FindIndex
;POPREG			 Under Func Scope: FindIndex
;POP $T25		 Under Func Scope: FindIndex
;POP 			 Under Func Scope: FindIndex
;POP 			 Under Func Scope: FindIndex
;POP 			 Under Func Scope: FindIndex
;POP 			 Under Func Scope: FindIndex
;POP 			 Under Func Scope: FindIndex
;POP 			 Under Func Scope: FindIndex
;POP 			 Under Func Scope: FindIndex
;PUSH $T25		 Under Func Scope: FindIndex
;PUSH $8		 Under Func Scope: FindIndex
;PUSH 			 Under Func Scope: FindIndex
;PUSHREG		 Under Func Scope: FindIndex
;JSR IsEqual		 Under Func Scope: FindIndex
;POPREG			 Under Func Scope: FindIndex
;POP $T26		 Under Func Scope: FindIndex
;POP 			 Under Func Scope: FindIndex
;POP 			 Under Func Scope: FindIndex
;STOREI 1 $T27		 Under Func Scope: FindIndex
;NEI $T26 $T27 label12	 Under Func Scope: FindIndex
;STOREI $-1 $T28	 Under Func Scope: FindIndex
;STOREI $T28 $6		 Under Func Scope: FindIndex
;UNLINK			 Under Func Scope: FindIndex
;RET			 Under Func Scope: FindIndex
;JUMP label13		 Under Func Scope: FindIndex
;LABEL label12		 Under Func Scope: FindIndex
;LABEL label13		 Under Func Scope: FindIndex
;STOREI 1 $T23		 Under Func Scope: FindIndex
;ADDI $-1 $T23 $T24	 Under Func Scope: FindIndex
;STOREI $T24 $-1	 Under Func Scope: FindIndex
;JUMP label9		 Under Func Scope: FindIndex
;LABEL label11		 Under Func Scope: FindIndex
;STOREI $-1 $T29	 Under Func Scope: FindIndex
;STOREI $T29 $6		 Under Func Scope: FindIndex
;UNLINK			 Under Func Scope: FindIndex
;RET			 Under Func Scope: FindIndex

;LABEL IsEqual		 Under Func Scope: IsEqual
;LINK 1			 Under Func Scope: IsEqual
;PUSH $8		 Under Func Scope: IsEqual
;PUSH $7		 Under Func Scope: IsEqual
;PUSH 			 Under Func Scope: IsEqual
;PUSHREG		 Under Func Scope: IsEqual
;JSR IsNotEqual		 Under Func Scope: IsEqual
;POPREG			 Under Func Scope: IsEqual
;POP $T30		 Under Func Scope: IsEqual
;POP 			 Under Func Scope: IsEqual
;POP 			 Under Func Scope: IsEqual
;STOREI 0 $T31		 Under Func Scope: IsEqual
;NEI $T30 $T31 label14	 Under Func Scope: IsEqual
;STOREI 1 $T32		 Under Func Scope: IsEqual
;STOREI $T32 $6		 Under Func Scope: IsEqual
;UNLINK			 Under Func Scope: IsEqual
;RET			 Under Func Scope: IsEqual
;JUMP label15		 Under Func Scope: IsEqual
;LABEL label14		 Under Func Scope: IsEqual
;LABEL label15		 Under Func Scope: IsEqual
;STOREI 0 $T33		 Under Func Scope: IsEqual
;STOREI $T33 $6		 Under Func Scope: IsEqual
;UNLINK			 Under Func Scope: IsEqual
;RET			 Under Func Scope: IsEqual

;LABEL IsNotEqual	 Under Func Scope: IsNotEqual
;LINK 1			 Under Func Scope: IsNotEqual
;STOREF $8 $T34		 Under Func Scope: IsNotEqual
;EQF $7 $T34 label16	 Under Func Scope: IsNotEqual
;STOREI 1 $T35		 Under Func Scope: IsNotEqual
;STOREI $T35 $6		 Under Func Scope: IsNotEqual
;UNLINK			 Under Func Scope: IsNotEqual
;RET			 Under Func Scope: IsNotEqual
;JUMP label17		 Under Func Scope: IsNotEqual
;LABEL label16		 Under Func Scope: IsNotEqual
;LABEL label17		 Under Func Scope: IsNotEqual
;STOREI 0 $T36		 Under Func Scope: IsNotEqual
;STOREI $T36 $6		 Under Func Scope: IsNotEqual
;UNLINK			 Under Func Scope: IsNotEqual
;RET			 Under Func Scope: IsNotEqual

;LABEL GetValue		 Under Func Scope: GetValue
;LINK 1			 Under Func Scope: GetValue
;STOREI 0 $T37		 Under Func Scope: GetValue
;NEI $7 $T37 label18	 Under Func Scope: GetValue
;STOREF $8 $T38		 Under Func Scope: GetValue
;STOREF $T38 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label19		 Under Func Scope: GetValue
;LABEL label18		 Under Func Scope: GetValue
;STOREI 1 $T39		 Under Func Scope: GetValue
;NEI $7 $T39 label20	 Under Func Scope: GetValue
;STOREF $9 $T40		 Under Func Scope: GetValue
;STOREF $T40 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label21		 Under Func Scope: GetValue
;LABEL label20		 Under Func Scope: GetValue
;STOREI 2 $T41		 Under Func Scope: GetValue
;NEI $7 $T41 label22	 Under Func Scope: GetValue
;STOREF $10 $T42	 Under Func Scope: GetValue
;STOREF $T42 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label23		 Under Func Scope: GetValue
;LABEL label22		 Under Func Scope: GetValue
;STOREI 3 $T43		 Under Func Scope: GetValue
;NEI $7 $T43 label24	 Under Func Scope: GetValue
;STOREF $11 $T44	 Under Func Scope: GetValue
;STOREF $T44 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label25		 Under Func Scope: GetValue
;LABEL label24		 Under Func Scope: GetValue
;STOREI 4 $T45		 Under Func Scope: GetValue
;NEI $7 $T45 label26	 Under Func Scope: GetValue
;STOREF $12 $T46	 Under Func Scope: GetValue
;STOREF $T46 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label27		 Under Func Scope: GetValue
;LABEL label26		 Under Func Scope: GetValue
;STOREI 5 $T47		 Under Func Scope: GetValue
;NEI $7 $T47 label28	 Under Func Scope: GetValue
;STOREF $13 $T48	 Under Func Scope: GetValue
;STOREF $T48 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label29		 Under Func Scope: GetValue
;LABEL label28		 Under Func Scope: GetValue
;LABEL label29		 Under Func Scope: GetValue
;LABEL label27		 Under Func Scope: GetValue
;LABEL label25		 Under Func Scope: GetValue
;LABEL label23		 Under Func Scope: GetValue
;LABEL label21		 Under Func Scope: GetValue
;LABEL label19		 Under Func Scope: GetValue

;LABEL SetAValue	 Under Func Scope: SetAValue
;LINK 1			 Under Func Scope: SetAValue
;STOREI 0 $T49		 Under Func Scope: SetAValue
;NEI $7 $T49 label30	 Under Func Scope: SetAValue
;STOREF $8 $T50		 Under Func Scope: SetAValue
;STOREF $T50 a0		 Under Func Scope: SetAValue
;JUMP label31		 Under Func Scope: SetAValue
;LABEL label30		 Under Func Scope: SetAValue
;STOREI 1 $T51		 Under Func Scope: SetAValue
;NEI $7 $T51 label32	 Under Func Scope: SetAValue
;STOREF $8 $T52		 Under Func Scope: SetAValue
;STOREF $T52 a1		 Under Func Scope: SetAValue
;JUMP label33		 Under Func Scope: SetAValue
;LABEL label32		 Under Func Scope: SetAValue
;STOREI 2 $T53		 Under Func Scope: SetAValue
;NEI $7 $T53 label34	 Under Func Scope: SetAValue
;STOREF $8 $T54		 Under Func Scope: SetAValue
;STOREF $T54 a2		 Under Func Scope: SetAValue
;JUMP label35		 Under Func Scope: SetAValue
;LABEL label34		 Under Func Scope: SetAValue
;STOREI 3 $T55		 Under Func Scope: SetAValue
;NEI $7 $T55 label36	 Under Func Scope: SetAValue
;STOREF $8 $T56		 Under Func Scope: SetAValue
;STOREF $T56 a3		 Under Func Scope: SetAValue
;JUMP label37		 Under Func Scope: SetAValue
;LABEL label36		 Under Func Scope: SetAValue
;STOREI 4 $T57		 Under Func Scope: SetAValue
;NEI $7 $T57 label38	 Under Func Scope: SetAValue
;STOREF $8 $T58		 Under Func Scope: SetAValue
;STOREF $T58 a4		 Under Func Scope: SetAValue
;JUMP label39		 Under Func Scope: SetAValue
;LABEL label38		 Under Func Scope: SetAValue
;STOREI 5 $T59		 Under Func Scope: SetAValue
;NEI $7 $T59 label40	 Under Func Scope: SetAValue
;STOREF $8 $T60		 Under Func Scope: SetAValue
;STOREF $T60 a5		 Under Func Scope: SetAValue
;JUMP label41		 Under Func Scope: SetAValue
;LABEL label40		 Under Func Scope: SetAValue
;LABEL label41		 Under Func Scope: SetAValue
;LABEL label39		 Under Func Scope: SetAValue
;LABEL label37		 Under Func Scope: SetAValue
;LABEL label35		 Under Func Scope: SetAValue
;LABEL label33		 Under Func Scope: SetAValue
;LABEL label31		 Under Func Scope: SetAValue
;STOREF $8 $T61		 Under Func Scope: SetAValue
;STOREF $T61 $6		 Under Func Scope: SetAValue
;UNLINK			 Under Func Scope: SetAValue
;RET			 Under Func Scope: SetAValue

;LABEL SYSIN		 Under Func Scope: SYSIN
;LINK 4			 Under Func Scope: SYSIN
;STOREI 0 $T62		 Under Func Scope: SYSIN
;STOREI $T62 $-1	 Under Func Scope: SYSIN
;STOREI 6 $T63		 Under Func Scope: SYSIN
;STOREI $T63 $-2	 Under Func Scope: SYSIN
;READF a0		 Under Func Scope: SYSIN
;READF a1		 Under Func Scope: SYSIN
;READF a2		 Under Func Scope: SYSIN
;READF a3		 Under Func Scope: SYSIN
;READF a4		 Under Func Scope: SYSIN
;READF a5		 Under Func Scope: SYSIN
;WRITES inputMessage	 Under Func Scope: SYSIN
;STOREI 0 $T64		 Under Func Scope: SYSIN
;STOREI $T64 $-1	 Under Func Scope: SYSIN
;LABEL label42		 Under Func Scope: SYSIN
;STOREI 2 $T65		 Under Func Scope: SYSIN
;DIVI $-2 $T65 $T66	 Under Func Scope: SYSIN
;GEI $-1 $T30 label44	 Under Func Scope: SYSIN
;PUSH a5		 Under Func Scope: SYSIN
;PUSH a4		 Under Func Scope: SYSIN
;PUSH a3		 Under Func Scope: SYSIN
;PUSH a2		 Under Func Scope: SYSIN
;PUSH a1		 Under Func Scope: SYSIN
;PUSH a0		 Under Func Scope: SYSIN
;PUSH $-1		 Under Func Scope: SYSIN
;PUSH 			 Under Func Scope: SYSIN
;PUSHREG		 Under Func Scope: SYSIN
;JSR GetValue		 Under Func Scope: SYSIN
;POPREG			 Under Func Scope: SYSIN
;POP $T69		 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;STOREF $T69 $-3	 Under Func Scope: SYSIN
;WRITEF $-3		 Under Func Scope: SYSIN
;WRITES eol		 Under Func Scope: SYSIN
;STOREI 1 $T67		 Under Func Scope: SYSIN
;ADDI $-1 $T67 $T68	 Under Func Scope: SYSIN
;STOREI $T68 $-1	 Under Func Scope: SYSIN
;JUMP label42		 Under Func Scope: SYSIN
;LABEL label44		 Under Func Scope: SYSIN
;LABEL label45		 Under Func Scope: SYSIN
;STOREI $-2 $T70	 Under Func Scope: SYSIN
;GEI $-1 $T70 label47	 Under Func Scope: SYSIN
;PUSH $-1		 Under Func Scope: SYSIN
;PUSH 			 Under Func Scope: SYSIN
;PUSHREG		 Under Func Scope: SYSIN
;JSR Incre		 Under Func Scope: SYSIN
;POPREG			 Under Func Scope: SYSIN
;POP $T71		 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;PUSH $T71		 Under Func Scope: SYSIN
;PUSH 			 Under Func Scope: SYSIN
;PUSHREG		 Under Func Scope: SYSIN
;JSR Decre		 Under Func Scope: SYSIN
;POPREG			 Under Func Scope: SYSIN
;POP $T72		 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;PUSH $T72		 Under Func Scope: SYSIN
;PUSH 			 Under Func Scope: SYSIN
;PUSHREG		 Under Func Scope: SYSIN
;JSR Incre		 Under Func Scope: SYSIN
;POPREG			 Under Func Scope: SYSIN
;POP $T73		 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;PUSH a5		 Under Func Scope: SYSIN
;PUSH a4		 Under Func Scope: SYSIN
;PUSH a3		 Under Func Scope: SYSIN
;PUSH a2		 Under Func Scope: SYSIN
;PUSH a1		 Under Func Scope: SYSIN
;PUSH a0		 Under Func Scope: SYSIN
;PUSH $-1		 Under Func Scope: SYSIN
;PUSH 			 Under Func Scope: SYSIN
;PUSHREG		 Under Func Scope: SYSIN
;JSR GetValue		 Under Func Scope: SYSIN
;POPREG			 Under Func Scope: SYSIN
;POP $T74		 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;STOREF $T74 $-3	 Under Func Scope: SYSIN
;WRITEF $-3		 Under Func Scope: SYSIN
;WRITES eol		 Under Func Scope: SYSIN
;STOREI $T73 $-1	 Under Func Scope: SYSIN
;JUMP label45		 Under Func Scope: SYSIN
;LABEL label47		 Under Func Scope: SYSIN
;WRITES eol		 Under Func Scope: SYSIN
;STOREI $-2 $T75	 Under Func Scope: SYSIN
;STOREI $T75 $6		 Under Func Scope: SYSIN
;UNLINK			 Under Func Scope: SYSIN
;RET			 Under Func Scope: SYSIN

; ========= CFG IR NODE =========

;LABEL Incre		P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL Incre			S: ;STOREI 1 $T1	
;STOREI 1 $T1		P: ;LINK 1				S: ;ADDI $7 $T1 $T2	
;ADDI $7 $T1 $T2	P: ;STOREI 1 $T1			S: ;STOREI $T2 $6	
;STOREI $T2 $6		P: ;ADDI $7 $T1 $T2		S: ;UNLINK	
;UNLINK			P: ;STOREI $T2 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL Decre		P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL Decre			S: ;STOREI 1 $T3	
;STOREI 1 $T3		P: ;LINK 1				S: ;SUBI $7 $T3 $T4	
;SUBI $7 $T3 $T4	P: ;STOREI 1 $T3			S: ;STOREI $T4 $6	
;STOREI $T4 $6		P: ;SUBI $7 $T3 $T4		S: ;UNLINK	
;UNLINK			P: ;STOREI $T4 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL main		P: 					S: ;LINK 5		 <== BB leader
;LINK 5			P: ;LABEL main			S: ;STOREF 1000.00 $T5	
;STOREF 1000.00 $T5	P: ;LINK 5				S: ;STOREF $T5 fmax	
;STOREF $T5 fmax	P: ;STOREF 1000.00 $T5			S: ;PUSH 	
;PUSH 			P: ;STOREF $T5 fmax		S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR SYSIN	
;JSR SYSIN		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR SYSIN			S: ;POP $T6	
;POP $T6		P: ;POPREG				S: ;STOREI $T6 $-1	
;STOREI $T6 $-1		P: ;POP $T6			S: ;WRITES sortMessage	
;WRITES sortMessage	P: ;STOREI $T6 $-1			S: ;STOREI 0 $T7	
;STOREI 0 $T7		P: ;WRITES sortMessage		S: ;STOREI $T7 $-2	
;STOREI $T7 $-2		P: ;STOREI 0 $T7			S: ;LABEL label1	
;LABEL label1		P: ;STOREI $T7 $-2	;JUMP label1		S: ;STOREI $-1 $T8		 <== BB leader
;STOREI $-1 $T8		P: ;LABEL label1			S: ;GEI $-2 $T8 label3	
;GEI $-2 $T8 label3	P: ;STOREI $-1 $T8			S: ;PUSH a5	;LABEL label3	
;PUSH a5		P: ;GEI $-2 $T8 label3			S: ;PUSH a4		 <== BB leader
;PUSH a4		P: ;PUSH a5				S: ;PUSH a3	
;PUSH a3		P: ;PUSH a4				S: ;PUSH a2	
;PUSH a2		P: ;PUSH a3				S: ;PUSH a1	
;PUSH a1		P: ;PUSH a2				S: ;PUSH a0	
;PUSH a0		P: ;PUSH a1				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH a0				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR FindMin	
;JSR FindMin		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR FindMin			S: ;POP $T11	
;POP $T11		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T11			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREF $T11 $-4	
;STOREF $T11 $-4	P: ;POP 				S: ;PUSH a5	
;PUSH a5		P: ;STOREF $T11 $-4			S: ;PUSH a4	
;PUSH a4		P: ;PUSH a5				S: ;PUSH a3	
;PUSH a3		P: ;PUSH a4				S: ;PUSH a2	
;PUSH a2		P: ;PUSH a3				S: ;PUSH a1	
;PUSH a1		P: ;PUSH a2				S: ;PUSH a0	
;PUSH a0		P: ;PUSH a1				S: ;PUSH $-4	
;PUSH $-4		P: ;PUSH a0				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $-4				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR FindIndex	
;JSR FindIndex		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR FindIndex		S: ;POP $T12	
;POP $T12		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T12			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI $T12 $-3	
;STOREI $T12 $-3	P: ;POP 				S: ;PUSH fmax	
;PUSH fmax		P: ;STOREI $T12 $-3			S: ;PUSH $-3	
;PUSH $-3		P: ;PUSH fmax				S: ;PUSH 	
;PUSH 			P: ;PUSH $-3			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR SetAValue	
;JSR SetAValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR SetAValue		S: ;POP $T13	
;POP $T13		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T13			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREF $T13 fmax	
;STOREF $T13 fmax	P: ;POP 				S: ;WRITEF $-4	
;WRITEF $-4		P: ;STOREF $T13 fmax			S: ;WRITES eol	
;WRITES eol		P: ;WRITEF $-4			S: ;STOREI 1 $T9	
;STOREI 1 $T9		P: ;WRITES eol			S: ;ADDI $-2 $T9 $T10	
;ADDI $-2 $T9 $T10	P: ;STOREI 1 $T9			S: ;STOREI $T10 $-2	
;STOREI $T10 $-2	P: ;ADDI $-2 $T9 $T10			S: ;JUMP label1	
;JUMP label1		P: ;STOREI $T10 $-2			S: ;LABEL label1	
;LABEL label3		P: ;GEI $-2 $T8 label3		S: ;WRITES eol		 <== BB leader
;WRITES eol		P: ;LABEL label3			S: ;UNLINK	
;UNLINK			P: ;WRITES eol			S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL FindMin		P: 				S: ;LINK 3		 <== BB leader
;LINK 3			P: ;LABEL FindMin		S: ;STOREF $8 $T14	
;STOREF $8 $T14		P: ;LINK 3			S: ;STOREF $T14 $-2	
;STOREF $T14 $-2	P: ;STOREF $8 $T14			S: ;STOREI 1 $T15	
;STOREI 1 $T15		P: ;STOREF $T14 $-2		S: ;STOREI $T15 $-1	
;STOREI $T15 $-1	P: ;STOREI 1 $T15			S: ;LABEL label4	
;LABEL label4		P: ;STOREI $T15 $-1	;JUMP label4		S: ;STOREI $7 $T16		 <== BB leader
;STOREI $7 $T16		P: ;LABEL label4			S: ;GEI $-1 $T16 label6	
;GEI $-1 $T16 label6	P: ;STOREI $7 $T16			S: ;PUSH $13	;LABEL label6	
;PUSH $13		P: ;GEI $-1 $T16 label6		S: ;PUSH $12		 <== BB leader
;PUSH $12		P: ;PUSH $13				S: ;PUSH $11	
;PUSH $11		P: ;PUSH $12				S: ;PUSH $10	
;PUSH $10		P: ;PUSH $11				S: ;PUSH $9	
;PUSH $9		P: ;PUSH $10				S: ;PUSH $8	
;PUSH $8		P: ;PUSH $9				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $8				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T17	
;POP $T17		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T17			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;GEF $T17 $-2 label7	
;GEF $T17 $-2 label7	P: ;POP 				S: ;PUSH $13	;LABEL label7	
;PUSH $13		P: ;GEF $T17 $-2 label7		S: ;PUSH $12		 <== BB leader
;PUSH $12		P: ;PUSH $13				S: ;PUSH $11	
;PUSH $11		P: ;PUSH $12				S: ;PUSH $10	
;PUSH $10		P: ;PUSH $11				S: ;PUSH $9	
;PUSH $9		P: ;PUSH $10				S: ;PUSH $8	
;PUSH $8		P: ;PUSH $9				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $8				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T18	
;POP $T18		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T18			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREF $T18 $-2	
;STOREF $T18 $-2	P: ;POP 				S: ;JUMP label8	
;JUMP label8		P: ;STOREF $T18 $-2			S: ;LABEL label8	
;LABEL label7		P: ;GEF $T17 $-2 label7		S: ;LABEL label8		 <== BB leader
;LABEL label8		P: ;LABEL label7	;JUMP label8		S: ;PUSH $-1		 <== BB leader
;PUSH $-1		P: ;LABEL label8			S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR Incre	
;JSR Incre		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR Incre			S: ;POP $T19	
;POP $T19		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T19			S: ;STOREI $T19 $-1	
;STOREI $T19 $-1	P: ;POP 				S: ;JUMP label4	
;JUMP label4		P: ;STOREI $T19 $-1			S: ;LABEL label4	
;LABEL label6		P: ;GEI $-1 $T16 label6		S: ;STOREF $-2 $T20		 <== BB leader
;STOREF $-2 $T20	P: ;LABEL label6			S: ;STOREF $T20 $6	
;STOREF $T20 $6		P: ;STOREF $-2 $T20		S: ;UNLINK	
;UNLINK			P: ;STOREF $T20 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL FindIndex	P: 					S: ;LINK 2		 <== BB leader
;LINK 2			P: ;LABEL FindIndex		S: ;STOREI 0 $T21	
;STOREI 0 $T21		P: ;LINK 2			S: ;STOREI $T21 $-1	
;STOREI $T21 $-1	P: ;STOREI 0 $T21			S: ;LABEL label9	
;LABEL label9		P: ;STOREI $T21 $-1	;JUMP label9		S: ;STOREI $7 $T22		 <== BB leader
;STOREI $7 $T22		P: ;LABEL label9			S: ;GEI $-1 $T22 label11	
;GEI $-1 $T22 label11	P: ;STOREI $7 $T22			S: ;PUSH $14	;LABEL label11	
;PUSH $14		P: ;GEI $-1 $T22 label11		S: ;PUSH $13		 <== BB leader
;PUSH $13		P: ;PUSH $14				S: ;PUSH $12	
;PUSH $12		P: ;PUSH $13				S: ;PUSH $11	
;PUSH $11		P: ;PUSH $12				S: ;PUSH $10	
;PUSH $10		P: ;PUSH $11				S: ;PUSH $9	
;PUSH $9		P: ;PUSH $10				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $9				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T25	
;POP $T25		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T25			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;PUSH $T25	
;PUSH $T25		P: ;POP 				S: ;PUSH $8	
;PUSH $8		P: ;PUSH $T25				S: ;PUSH 	
;PUSH 			P: ;PUSH $8			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsEqual	
;JSR IsEqual		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR IsEqual			S: ;POP $T26	
;POP $T26		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T26			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI 1 $T27	
;STOREI 1 $T27		P: ;POP 				S: ;NEI $T26 $T27 label12	
;NEI $T26 $T27 label12	P: ;STOREI 1 $T27			S: ;STOREI $-1 $T28	;LABEL label12	
;STOREI $-1 $T28	P: ;NEI $T26 $T27 label12		S: ;STOREI $T28 $6		 <== BB leader
;STOREI $T28 $6		P: ;STOREI $-1 $T28		S: ;UNLINK	
;UNLINK			P: ;STOREI $T28 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label13		P: ;RET				S: ;LABEL label13	
;LABEL label12		P: ;NEI $T26 $T27 label12		S: ;LABEL label13		 <== BB leader
;LABEL label13		P: ;LABEL label12	;JUMP label13		S: ;STOREI 1 $T23		 <== BB leader
;STOREI 1 $T23		P: ;LABEL label13			S: ;ADDI $-1 $T23 $T24	
;ADDI $-1 $T23 $T24	P: ;STOREI 1 $T23			S: ;STOREI $T24 $-1	
;STOREI $T24 $-1	P: ;ADDI $-1 $T23 $T24			S: ;JUMP label9	
;JUMP label9		P: ;STOREI $T24 $-1			S: ;LABEL label9	
;LABEL label11		P: ;GEI $-1 $T22 label11		S: ;STOREI $-1 $T29		 <== BB leader
;STOREI $-1 $T29	P: ;LABEL label11			S: ;STOREI $T29 $6	
;STOREI $T29 $6		P: ;STOREI $-1 $T29		S: ;UNLINK	
;UNLINK			P: ;STOREI $T29 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL IsEqual		P: 				S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL IsEqual		S: ;PUSH $8	
;PUSH $8		P: ;LINK 1				S: ;PUSH $7	
;PUSH $7		P: ;PUSH $8				S: ;PUSH 	
;PUSH 			P: ;PUSH $7			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsNotEqual	
;JSR IsNotEqual		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR IsNotEqual		S: ;POP $T30	
;POP $T30		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T30			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI 0 $T31	
;STOREI 0 $T31		P: ;POP 				S: ;NEI $T30 $T31 label14	
;NEI $T30 $T31 label14	P: ;STOREI 0 $T31			S: ;STOREI 1 $T32	;LABEL label14	
;STOREI 1 $T32		P: ;NEI $T30 $T31 label14		S: ;STOREI $T32 $6		 <== BB leader
;STOREI $T32 $6		P: ;STOREI 1 $T32		S: ;UNLINK	
;UNLINK			P: ;STOREI $T32 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label15		P: ;RET				S: ;LABEL label15	
;LABEL label14		P: ;NEI $T30 $T31 label14		S: ;LABEL label15		 <== BB leader
;LABEL label15		P: ;LABEL label14	;JUMP label15		S: ;STOREI 0 $T33		 <== BB leader
;STOREI 0 $T33		P: ;LABEL label15			S: ;STOREI $T33 $6	
;STOREI $T33 $6		P: ;STOREI 0 $T33		S: ;UNLINK	
;UNLINK			P: ;STOREI $T33 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL IsNotEqual	P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL IsNotEqual		S: ;STOREF $8 $T34	
;STOREF $8 $T34		P: ;LINK 1			S: ;EQF $7 $T34 label16	
;EQF $7 $T34 label16	P: ;STOREF $8 $T34			S: ;STOREI 1 $T35	;LABEL label16	
;STOREI 1 $T35		P: ;EQF $7 $T34 label16		S: ;STOREI $T35 $6		 <== BB leader
;STOREI $T35 $6		P: ;STOREI 1 $T35		S: ;UNLINK	
;UNLINK			P: ;STOREI $T35 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label17		P: ;RET				S: ;LABEL label17	
;LABEL label16		P: ;EQF $7 $T34 label16		S: ;LABEL label17		 <== BB leader
;LABEL label17		P: ;LABEL label16	;JUMP label17		S: ;STOREI 0 $T36		 <== BB leader
;STOREI 0 $T36		P: ;LABEL label17			S: ;STOREI $T36 $6	
;STOREI $T36 $6		P: ;STOREI 0 $T36		S: ;UNLINK	
;UNLINK			P: ;STOREI $T36 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL GetValue		P: 				S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL GetValue		S: ;STOREI 0 $T37	
;STOREI 0 $T37		P: ;LINK 1			S: ;NEI $7 $T37 label18	
;NEI $7 $T37 label18	P: ;STOREI 0 $T37			S: ;STOREF $8 $T38	;LABEL label18	
;STOREF $8 $T38		P: ;NEI $7 $T37 label18		S: ;STOREF $T38 $6		 <== BB leader
;STOREF $T38 $6		P: ;STOREF $8 $T38		S: ;UNLINK	
;UNLINK			P: ;STOREF $T38 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label19		P: ;RET				S: ;LABEL label19	
;LABEL label18		P: ;NEI $7 $T37 label18		S: ;STOREI 1 $T39		 <== BB leader
;STOREI 1 $T39		P: ;LABEL label18			S: ;NEI $7 $T39 label20	
;NEI $7 $T39 label20	P: ;STOREI 1 $T39			S: ;STOREF $9 $T40	;LABEL label20	
;STOREF $9 $T40		P: ;NEI $7 $T39 label20		S: ;STOREF $T40 $6		 <== BB leader
;STOREF $T40 $6		P: ;STOREF $9 $T40		S: ;UNLINK	
;UNLINK			P: ;STOREF $T40 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label21		P: ;RET				S: ;LABEL label21	
;LABEL label20		P: ;NEI $7 $T39 label20		S: ;STOREI 2 $T41		 <== BB leader
;STOREI 2 $T41		P: ;LABEL label20			S: ;NEI $7 $T41 label22	
;NEI $7 $T41 label22	P: ;STOREI 2 $T41			S: ;STOREF $10 $T42	;LABEL label22	
;STOREF $10 $T42	P: ;NEI $7 $T41 label22			S: ;STOREF $T42 $6		 <== BB leader
;STOREF $T42 $6		P: ;STOREF $10 $T42		S: ;UNLINK	
;UNLINK			P: ;STOREF $T42 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label23		P: ;RET				S: ;LABEL label23	
;LABEL label22		P: ;NEI $7 $T41 label22		S: ;STOREI 3 $T43		 <== BB leader
;STOREI 3 $T43		P: ;LABEL label22			S: ;NEI $7 $T43 label24	
;NEI $7 $T43 label24	P: ;STOREI 3 $T43			S: ;STOREF $11 $T44	;LABEL label24	
;STOREF $11 $T44	P: ;NEI $7 $T43 label24			S: ;STOREF $T44 $6		 <== BB leader
;STOREF $T44 $6		P: ;STOREF $11 $T44		S: ;UNLINK	
;UNLINK			P: ;STOREF $T44 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label25		P: ;RET				S: ;LABEL label25	
;LABEL label24		P: ;NEI $7 $T43 label24		S: ;STOREI 4 $T45		 <== BB leader
;STOREI 4 $T45		P: ;LABEL label24			S: ;NEI $7 $T45 label26	
;NEI $7 $T45 label26	P: ;STOREI 4 $T45			S: ;STOREF $12 $T46	;LABEL label26	
;STOREF $12 $T46	P: ;NEI $7 $T45 label26			S: ;STOREF $T46 $6		 <== BB leader
;STOREF $T46 $6		P: ;STOREF $12 $T46		S: ;UNLINK	
;UNLINK			P: ;STOREF $T46 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label27		P: ;RET				S: ;LABEL label27	
;LABEL label26		P: ;NEI $7 $T45 label26		S: ;STOREI 5 $T47		 <== BB leader
;STOREI 5 $T47		P: ;LABEL label26			S: ;NEI $7 $T47 label28	
;NEI $7 $T47 label28	P: ;STOREI 5 $T47			S: ;STOREF $13 $T48	;LABEL label28	
;STOREF $13 $T48	P: ;NEI $7 $T47 label28			S: ;STOREF $T48 $6		 <== BB leader
;STOREF $T48 $6		P: ;STOREF $13 $T48		S: ;UNLINK	
;UNLINK			P: ;STOREF $T48 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label29		P: ;RET				S: ;LABEL label29	
;LABEL label28		P: ;NEI $7 $T47 label28		S: ;LABEL label29		 <== BB leader
;LABEL label29		P: ;LABEL label28	;JUMP label29		S: ;LABEL label27		 <== BB leader
;LABEL label27		P: ;LABEL label29	;JUMP label27		S: ;LABEL label25		 <== BB leader
;LABEL label25		P: ;LABEL label27	;JUMP label25		S: ;LABEL label23		 <== BB leader
;LABEL label23		P: ;LABEL label25	;JUMP label23		S: ;LABEL label21		 <== BB leader
;LABEL label21		P: ;LABEL label23	;JUMP label21		S: ;LABEL label19		 <== BB leader
;LABEL label19		P: ;LABEL label21	;JUMP label19		S: 	 <== BB leader

;LABEL SetAValue	P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL SetAValue		S: ;STOREI 0 $T49	
;STOREI 0 $T49		P: ;LINK 1			S: ;NEI $7 $T49 label30	
;NEI $7 $T49 label30	P: ;STOREI 0 $T49			S: ;STOREF $8 $T50	;LABEL label30	
;STOREF $8 $T50		P: ;NEI $7 $T49 label30		S: ;STOREF $T50 a0		 <== BB leader
;STOREF $T50 a0		P: ;STOREF $8 $T50		S: ;JUMP label31	
;JUMP label31		P: ;STOREF $T50 a0			S: ;LABEL label31	
;LABEL label30		P: ;NEI $7 $T49 label30		S: ;STOREI 1 $T51		 <== BB leader
;STOREI 1 $T51		P: ;LABEL label30			S: ;NEI $7 $T51 label32	
;NEI $7 $T51 label32	P: ;STOREI 1 $T51			S: ;STOREF $8 $T52	;LABEL label32	
;STOREF $8 $T52		P: ;NEI $7 $T51 label32		S: ;STOREF $T52 a1		 <== BB leader
;STOREF $T52 a1		P: ;STOREF $8 $T52		S: ;JUMP label33	
;JUMP label33		P: ;STOREF $T52 a1			S: ;LABEL label33	
;LABEL label32		P: ;NEI $7 $T51 label32		S: ;STOREI 2 $T53		 <== BB leader
;STOREI 2 $T53		P: ;LABEL label32			S: ;NEI $7 $T53 label34	
;NEI $7 $T53 label34	P: ;STOREI 2 $T53			S: ;STOREF $8 $T54	;LABEL label34	
;STOREF $8 $T54		P: ;NEI $7 $T53 label34		S: ;STOREF $T54 a2		 <== BB leader
;STOREF $T54 a2		P: ;STOREF $8 $T54		S: ;JUMP label35	
;JUMP label35		P: ;STOREF $T54 a2			S: ;LABEL label35	
;LABEL label34		P: ;NEI $7 $T53 label34		S: ;STOREI 3 $T55		 <== BB leader
;STOREI 3 $T55		P: ;LABEL label34			S: ;NEI $7 $T55 label36	
;NEI $7 $T55 label36	P: ;STOREI 3 $T55			S: ;STOREF $8 $T56	;LABEL label36	
;STOREF $8 $T56		P: ;NEI $7 $T55 label36		S: ;STOREF $T56 a3		 <== BB leader
;STOREF $T56 a3		P: ;STOREF $8 $T56		S: ;JUMP label37	
;JUMP label37		P: ;STOREF $T56 a3			S: ;LABEL label37	
;LABEL label36		P: ;NEI $7 $T55 label36		S: ;STOREI 4 $T57		 <== BB leader
;STOREI 4 $T57		P: ;LABEL label36			S: ;NEI $7 $T57 label38	
;NEI $7 $T57 label38	P: ;STOREI 4 $T57			S: ;STOREF $8 $T58	;LABEL label38	
;STOREF $8 $T58		P: ;NEI $7 $T57 label38		S: ;STOREF $T58 a4		 <== BB leader
;STOREF $T58 a4		P: ;STOREF $8 $T58		S: ;JUMP label39	
;JUMP label39		P: ;STOREF $T58 a4			S: ;LABEL label39	
;LABEL label38		P: ;NEI $7 $T57 label38		S: ;STOREI 5 $T59		 <== BB leader
;STOREI 5 $T59		P: ;LABEL label38			S: ;NEI $7 $T59 label40	
;NEI $7 $T59 label40	P: ;STOREI 5 $T59			S: ;STOREF $8 $T60	;LABEL label40	
;STOREF $8 $T60		P: ;NEI $7 $T59 label40		S: ;STOREF $T60 a5		 <== BB leader
;STOREF $T60 a5		P: ;STOREF $8 $T60		S: ;JUMP label41	
;JUMP label41		P: ;STOREF $T60 a5			S: ;LABEL label41	
;LABEL label40		P: ;NEI $7 $T59 label40		S: ;LABEL label41		 <== BB leader
;LABEL label41		P: ;LABEL label40	;JUMP label41		S: ;LABEL label39		 <== BB leader
;LABEL label39		P: ;LABEL label41	;JUMP label39		S: ;LABEL label37		 <== BB leader
;LABEL label37		P: ;LABEL label39	;JUMP label37		S: ;LABEL label35		 <== BB leader
;LABEL label35		P: ;LABEL label37	;JUMP label35		S: ;LABEL label33		 <== BB leader
;LABEL label33		P: ;LABEL label35	;JUMP label33		S: ;LABEL label31		 <== BB leader
;LABEL label31		P: ;LABEL label33	;JUMP label31		S: ;STOREF $8 $T61		 <== BB leader
;STOREF $8 $T61		P: ;LABEL label31		S: ;STOREF $T61 $6	
;STOREF $T61 $6		P: ;STOREF $8 $T61		S: ;UNLINK	
;UNLINK			P: ;STOREF $T61 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL SYSIN		P: 					S: ;LINK 4		 <== BB leader
;LINK 4			P: ;LABEL SYSIN			S: ;STOREI 0 $T62	
;STOREI 0 $T62		P: ;LINK 4			S: ;STOREI $T62 $-1	
;STOREI $T62 $-1	P: ;STOREI 0 $T62			S: ;STOREI 6 $T63	
;STOREI 6 $T63		P: ;STOREI $T62 $-1		S: ;STOREI $T63 $-2	
;STOREI $T63 $-2	P: ;STOREI 6 $T63			S: ;READF a0	
;READF a0		P: ;STOREI $T63 $-2			S: ;READF a1	
;READF a1		P: ;READF a0				S: ;READF a2	
;READF a2		P: ;READF a1				S: ;READF a3	
;READF a3		P: ;READF a2				S: ;READF a4	
;READF a4		P: ;READF a3				S: ;READF a5	
;READF a5		P: ;READF a4				S: ;WRITES inputMessage	
;WRITES inputMessage	P: ;READF a5			S: ;STOREI 0 $T64	
;STOREI 0 $T64		P: ;WRITES inputMessage		S: ;STOREI $T64 $-1	
;STOREI $T64 $-1	P: ;STOREI 0 $T64			S: ;LABEL label42	
;LABEL label42		P: ;STOREI $T64 $-1	;JUMP label42		S: ;STOREI 2 $T65		 <== BB leader
;STOREI 2 $T65		P: ;LABEL label42			S: ;DIVI $-2 $T65 $T66	
;DIVI $-2 $T65 $T66	P: ;STOREI 2 $T65			S: ;GEI $-1 $T30 label44	
;GEI $-1 $T30 label44	P: ;DIVI $-2 $T65 $T66		S: ;PUSH a5	;LABEL label44	
;PUSH a5		P: ;GEI $-1 $T30 label44		S: ;PUSH a4		 <== BB leader
;PUSH a4		P: ;PUSH a5				S: ;PUSH a3	
;PUSH a3		P: ;PUSH a4				S: ;PUSH a2	
;PUSH a2		P: ;PUSH a3				S: ;PUSH a1	
;PUSH a1		P: ;PUSH a2				S: ;PUSH a0	
;PUSH a0		P: ;PUSH a1				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH a0				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T69	
;POP $T69		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T69			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREF $T69 $-3	
;STOREF $T69 $-3	P: ;POP 				S: ;WRITEF $-3	
;WRITEF $-3		P: ;STOREF $T69 $-3			S: ;WRITES eol	
;WRITES eol		P: ;WRITEF $-3			S: ;STOREI 1 $T67	
;STOREI 1 $T67		P: ;WRITES eol			S: ;ADDI $-1 $T67 $T68	
;ADDI $-1 $T67 $T68	P: ;STOREI 1 $T67			S: ;STOREI $T68 $-1	
;STOREI $T68 $-1	P: ;ADDI $-1 $T67 $T68			S: ;JUMP label42	
;JUMP label42		P: ;STOREI $T68 $-1		S: ;LABEL label42	
;LABEL label44		P: ;GEI $-1 $T30 label44		S: ;LABEL label45		 <== BB leader
;LABEL label45		P: ;LABEL label44	;JUMP label45		S: ;STOREI $-2 $T70		 <== BB leader
;STOREI $-2 $T70	P: ;LABEL label45			S: ;GEI $-1 $T70 label47	
;GEI $-1 $T70 label47	P: ;STOREI $-2 $T70		S: ;PUSH $-1	;LABEL label47	
;PUSH $-1		P: ;GEI $-1 $T70 label47		S: ;PUSH 		 <== BB leader
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR Incre	
;JSR Incre		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR Incre			S: ;POP $T71	
;POP $T71		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T71			S: ;PUSH $T71	
;PUSH $T71		P: ;POP 				S: ;PUSH 	
;PUSH 			P: ;PUSH $T71			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR Decre	
;JSR Decre		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR Decre			S: ;POP $T72	
;POP $T72		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T72			S: ;PUSH $T72	
;PUSH $T72		P: ;POP 				S: ;PUSH 	
;PUSH 			P: ;PUSH $T72			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR Incre	
;JSR Incre		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR Incre			S: ;POP $T73	
;POP $T73		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T73			S: ;PUSH a5	
;PUSH a5		P: ;POP 				S: ;PUSH a4	
;PUSH a4		P: ;PUSH a5				S: ;PUSH a3	
;PUSH a3		P: ;PUSH a4				S: ;PUSH a2	
;PUSH a2		P: ;PUSH a3				S: ;PUSH a1	
;PUSH a1		P: ;PUSH a2				S: ;PUSH a0	
;PUSH a0		P: ;PUSH a1				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH a0				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T74	
;POP $T74		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T74			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREF $T74 $-3	
;STOREF $T74 $-3	P: ;POP 				S: ;WRITEF $-3	
;WRITEF $-3		P: ;STOREF $T74 $-3			S: ;WRITES eol	
;WRITES eol		P: ;WRITEF $-3			S: ;STOREI $T73 $-1	
;STOREI $T73 $-1	P: ;WRITES eol				S: ;JUMP label45	
;JUMP label45		P: ;STOREI $T73 $-1		S: ;LABEL label45	
;LABEL label47		P: ;GEI $-1 $T70 label47		S: ;WRITES eol		 <== BB leader
;WRITES eol		P: ;LABEL label47			S: ;STOREI $-2 $T75	
;STOREI $-2 $T75	P: ;WRITES eol				S: ;STOREI $T75 $6	
;STOREI $T75 $6		P: ;STOREI $-2 $T75		S: ;UNLINK	
;UNLINK			P: ;STOREI $T75 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

; ========= CFG IR NODE / KILL/ GEN =========

;LABEL Incre		Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;STOREI 1 $T1		Kill: $T1, 			Gen: 
;ADDI $7 $T1 $T2	Kill: $T2, 				Gen: $T1, $7, 
;STOREI $T2 $6		Kill: $6, 			Gen: $T2, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL Decre		Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;STOREI 1 $T3		Kill: $T3, 			Gen: 
;SUBI $7 $T3 $T4	Kill: $T4, 				Gen: $T3, $7, 
;STOREI $T4 $6		Kill: $6, 			Gen: $T4, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL main		Kill: 				Gen: 
;LINK 5			Kill: 				Gen: 
;STOREF 1000.00 $T5	Kill: $T5, 				Gen: 
;STOREF $T5 fmax	Kill: fmax, 				Gen: $T5, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR SYSIN		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T6		Kill: $T6, 				Gen: 
;STOREI $T6 $-1		Kill: $-1, 			Gen: $T6, 
;WRITES sortMessage	Kill: 				Gen: 
;STOREI 0 $T7		Kill: $T7, 			Gen: 
;STOREI $T7 $-2		Kill: $-2, 			Gen: $T7, 
;LABEL label1		Kill: 				Gen: 
;STOREI $-1 $T8		Kill: $T8, 			Gen: $-1, 
;GEI $-2 $T8 label3	Kill: 				Gen: $-2, $T8, 
;PUSH a5		Kill: 					Gen: a5, 
;PUSH a4		Kill: 					Gen: a4, 
;PUSH a3		Kill: 					Gen: a3, 
;PUSH a2		Kill: 					Gen: a2, 
;PUSH a1		Kill: 					Gen: a1, 
;PUSH a0		Kill: 					Gen: a0, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR FindMin		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T11		Kill: $T11, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREF $T11 $-4	Kill: $-4, 				Gen: $T11, 
;PUSH a5		Kill: 					Gen: a5, 
;PUSH a4		Kill: 					Gen: a4, 
;PUSH a3		Kill: 					Gen: a3, 
;PUSH a2		Kill: 					Gen: a2, 
;PUSH a1		Kill: 					Gen: a1, 
;PUSH a0		Kill: 					Gen: a0, 
;PUSH $-4		Kill: 					Gen: $-4, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR FindIndex		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T12		Kill: $T12, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T12 $-3	Kill: $-3, 				Gen: $T12, 
;PUSH fmax		Kill: 				Gen: fmax, 
;PUSH $-3		Kill: 					Gen: $-3, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR SetAValue		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T13		Kill: $T13, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREF $T13 fmax	Kill: fmax, 				Gen: $T13, 
;WRITEF $-4		Kill: 				Gen: $-4, 
;WRITES eol		Kill: 				Gen: 
;STOREI 1 $T9		Kill: $T9, 			Gen: 
;ADDI $-2 $T9 $T10	Kill: $T10, 				Gen: $-2, $T9, 
;STOREI $T10 $-2	Kill: $-2, 				Gen: $T10, 
;JUMP label1		Kill: 				Gen: 
;LABEL label3		Kill: 				Gen: 
;WRITES eol		Kill: 				Gen: 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL FindMin		Kill: 				Gen: 
;LINK 3			Kill: 				Gen: 
;STOREF $8 $T14		Kill: $T14, 			Gen: $8, 
;STOREF $T14 $-2	Kill: $-2, 				Gen: $T14, 
;STOREI 1 $T15		Kill: $T15, 			Gen: 
;STOREI $T15 $-1	Kill: $-1, 				Gen: $T15, 
;LABEL label4		Kill: 				Gen: 
;STOREI $7 $T16		Kill: $T16, 			Gen: $7, 
;GEI $-1 $T16 label6	Kill: 				Gen: $-1, $T16, 
;PUSH $13		Kill: 					Gen: $13, 
;PUSH $12		Kill: 					Gen: $12, 
;PUSH $11		Kill: 					Gen: $11, 
;PUSH $10		Kill: 					Gen: $10, 
;PUSH $9		Kill: 					Gen: $9, 
;PUSH $8		Kill: 					Gen: $8, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T17		Kill: $T17, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;GEF $T17 $-2 label7	Kill: 				Gen: $-2, $T17, 
;PUSH $13		Kill: 					Gen: $13, 
;PUSH $12		Kill: 					Gen: $12, 
;PUSH $11		Kill: 					Gen: $11, 
;PUSH $10		Kill: 					Gen: $10, 
;PUSH $9		Kill: 					Gen: $9, 
;PUSH $8		Kill: 					Gen: $8, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T18		Kill: $T18, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREF $T18 $-2	Kill: $-2, 				Gen: $T18, 
;JUMP label8		Kill: 				Gen: 
;LABEL label7		Kill: 				Gen: 
;LABEL label8		Kill: 				Gen: 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR Incre		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T19		Kill: $T19, 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T19 $-1	Kill: $-1, 				Gen: $T19, 
;JUMP label4		Kill: 				Gen: 
;LABEL label6		Kill: 				Gen: 
;STOREF $-2 $T20	Kill: $T20, 				Gen: $-2, 
;STOREF $T20 $6		Kill: $6, 			Gen: $T20, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL FindIndex	Kill: 					Gen: 
;LINK 2			Kill: 				Gen: 
;STOREI 0 $T21		Kill: $T21, 			Gen: 
;STOREI $T21 $-1	Kill: $-1, 				Gen: $T21, 
;LABEL label9		Kill: 				Gen: 
;STOREI $7 $T22		Kill: $T22, 			Gen: $7, 
;GEI $-1 $T22 label11	Kill: 				Gen: $-1, $T22, 
;PUSH $14		Kill: 					Gen: $14, 
;PUSH $13		Kill: 					Gen: $13, 
;PUSH $12		Kill: 					Gen: $12, 
;PUSH $11		Kill: 					Gen: $11, 
;PUSH $10		Kill: 					Gen: $10, 
;PUSH $9		Kill: 					Gen: $9, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T25		Kill: $T25, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;PUSH $T25		Kill: 				Gen: $T25, 
;PUSH $8		Kill: 					Gen: $8, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsEqual		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T26		Kill: $T26, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI 1 $T27		Kill: $T27, 			Gen: 
;NEI $T26 $T27 label12	Kill: 				Gen: $T27, $T26, 
;STOREI $-1 $T28	Kill: $T28, 				Gen: $-1, 
;STOREI $T28 $6		Kill: $6, 			Gen: $T28, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label13		Kill: 				Gen: 
;LABEL label12		Kill: 				Gen: 
;LABEL label13		Kill: 				Gen: 
;STOREI 1 $T23		Kill: $T23, 			Gen: 
;ADDI $-1 $T23 $T24	Kill: $T24, 				Gen: $-1, $T23, 
;STOREI $T24 $-1	Kill: $-1, 				Gen: $T24, 
;JUMP label9		Kill: 				Gen: 
;LABEL label11		Kill: 				Gen: 
;STOREI $-1 $T29	Kill: $T29, 				Gen: $-1, 
;STOREI $T29 $6		Kill: $6, 			Gen: $T29, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL IsEqual		Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;PUSH $8		Kill: 					Gen: $8, 
;PUSH $7		Kill: 					Gen: $7, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsNotEqual		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T30		Kill: $T30, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI 0 $T31		Kill: $T31, 			Gen: 
;NEI $T30 $T31 label14	Kill: 				Gen: $T30, $T31, 
;STOREI 1 $T32		Kill: $T32, 			Gen: 
;STOREI $T32 $6		Kill: $6, 			Gen: $T32, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label15		Kill: 				Gen: 
;LABEL label14		Kill: 				Gen: 
;LABEL label15		Kill: 				Gen: 
;STOREI 0 $T33		Kill: $T33, 			Gen: 
;STOREI $T33 $6		Kill: $6, 			Gen: $T33, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL IsNotEqual	Kill: 					Gen: 
;LINK 1			Kill: 				Gen: 
;STOREF $8 $T34		Kill: $T34, 			Gen: $8, 
;EQF $7 $T34 label16	Kill: 				Gen: $7, $T34, 
;STOREI 1 $T35		Kill: $T35, 			Gen: 
;STOREI $T35 $6		Kill: $6, 			Gen: $T35, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label17		Kill: 				Gen: 
;LABEL label16		Kill: 				Gen: 
;LABEL label17		Kill: 				Gen: 
;STOREI 0 $T36		Kill: $T36, 			Gen: 
;STOREI $T36 $6		Kill: $6, 			Gen: $T36, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL GetValue		Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;STOREI 0 $T37		Kill: $T37, 			Gen: 
;NEI $7 $T37 label18	Kill: 				Gen: $T37, $7, 
;STOREF $8 $T38		Kill: $T38, 			Gen: $8, 
;STOREF $T38 $6		Kill: $6, 			Gen: $T38, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label19		Kill: 				Gen: 
;LABEL label18		Kill: 				Gen: 
;STOREI 1 $T39		Kill: $T39, 			Gen: 
;NEI $7 $T39 label20	Kill: 				Gen: $T39, $7, 
;STOREF $9 $T40		Kill: $T40, 			Gen: $9, 
;STOREF $T40 $6		Kill: $6, 			Gen: $T40, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label21		Kill: 				Gen: 
;LABEL label20		Kill: 				Gen: 
;STOREI 2 $T41		Kill: $T41, 			Gen: 
;NEI $7 $T41 label22	Kill: 				Gen: $7, $T41, 
;STOREF $10 $T42	Kill: $T42, 				Gen: $10, 
;STOREF $T42 $6		Kill: $6, 			Gen: $T42, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label23		Kill: 				Gen: 
;LABEL label22		Kill: 				Gen: 
;STOREI 3 $T43		Kill: $T43, 			Gen: 
;NEI $7 $T43 label24	Kill: 				Gen: $7, $T43, 
;STOREF $11 $T44	Kill: $T44, 				Gen: $11, 
;STOREF $T44 $6		Kill: $6, 			Gen: $T44, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label25		Kill: 				Gen: 
;LABEL label24		Kill: 				Gen: 
;STOREI 4 $T45		Kill: $T45, 			Gen: 
;NEI $7 $T45 label26	Kill: 				Gen: $7, $T45, 
;STOREF $12 $T46	Kill: $T46, 				Gen: $12, 
;STOREF $T46 $6		Kill: $6, 			Gen: $T46, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label27		Kill: 				Gen: 
;LABEL label26		Kill: 				Gen: 
;STOREI 5 $T47		Kill: $T47, 			Gen: 
;NEI $7 $T47 label28	Kill: 				Gen: $7, $T47, 
;STOREF $13 $T48	Kill: $T48, 				Gen: $13, 
;STOREF $T48 $6		Kill: $6, 			Gen: $T48, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label29		Kill: 				Gen: 
;LABEL label28		Kill: 				Gen: 
;LABEL label29		Kill: 				Gen: 
;LABEL label27		Kill: 				Gen: 
;LABEL label25		Kill: 				Gen: 
;LABEL label23		Kill: 				Gen: 
;LABEL label21		Kill: 				Gen: 
;LABEL label19		Kill: 				Gen: 

;LABEL SetAValue	Kill: 					Gen: 
;LINK 1			Kill: 				Gen: 
;STOREI 0 $T49		Kill: $T49, 			Gen: 
;NEI $7 $T49 label30	Kill: 				Gen: $T49, $7, 
;STOREF $8 $T50		Kill: $T50, 			Gen: $8, 
;STOREF $T50 a0		Kill: a0, 			Gen: $T50, 
;JUMP label31		Kill: 				Gen: 
;LABEL label30		Kill: 				Gen: 
;STOREI 1 $T51		Kill: $T51, 			Gen: 
;NEI $7 $T51 label32	Kill: 				Gen: $7, $T51, 
;STOREF $8 $T52		Kill: $T52, 			Gen: $8, 
;STOREF $T52 a1		Kill: a1, 			Gen: $T52, 
;JUMP label33		Kill: 				Gen: 
;LABEL label32		Kill: 				Gen: 
;STOREI 2 $T53		Kill: $T53, 			Gen: 
;NEI $7 $T53 label34	Kill: 				Gen: $7, $T53, 
;STOREF $8 $T54		Kill: $T54, 			Gen: $8, 
;STOREF $T54 a2		Kill: a2, 			Gen: $T54, 
;JUMP label35		Kill: 				Gen: 
;LABEL label34		Kill: 				Gen: 
;STOREI 3 $T55		Kill: $T55, 			Gen: 
;NEI $7 $T55 label36	Kill: 				Gen: $T55, $7, 
;STOREF $8 $T56		Kill: $T56, 			Gen: $8, 
;STOREF $T56 a3		Kill: a3, 			Gen: $T56, 
;JUMP label37		Kill: 				Gen: 
;LABEL label36		Kill: 				Gen: 
;STOREI 4 $T57		Kill: $T57, 			Gen: 
;NEI $7 $T57 label38	Kill: 				Gen: $T57, $7, 
;STOREF $8 $T58		Kill: $T58, 			Gen: $8, 
;STOREF $T58 a4		Kill: a4, 			Gen: $T58, 
;JUMP label39		Kill: 				Gen: 
;LABEL label38		Kill: 				Gen: 
;STOREI 5 $T59		Kill: $T59, 			Gen: 
;NEI $7 $T59 label40	Kill: 				Gen: $7, $T59, 
;STOREF $8 $T60		Kill: $T60, 			Gen: $8, 
;STOREF $T60 a5		Kill: a5, 			Gen: $T60, 
;JUMP label41		Kill: 				Gen: 
;LABEL label40		Kill: 				Gen: 
;LABEL label41		Kill: 				Gen: 
;LABEL label39		Kill: 				Gen: 
;LABEL label37		Kill: 				Gen: 
;LABEL label35		Kill: 				Gen: 
;LABEL label33		Kill: 				Gen: 
;LABEL label31		Kill: 				Gen: 
;STOREF $8 $T61		Kill: $T61, 			Gen: $8, 
;STOREF $T61 $6		Kill: $6, 			Gen: $T61, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL SYSIN		Kill: 				Gen: 
;LINK 4			Kill: 				Gen: 
;STOREI 0 $T62		Kill: $T62, 			Gen: 
;STOREI $T62 $-1	Kill: $-1, 				Gen: $T62, 
;STOREI 6 $T63		Kill: $T63, 			Gen: 
;STOREI $T63 $-2	Kill: $-2, 				Gen: $T63, 
;READF a0		Kill: a0, 				Gen: 
;READF a1		Kill: a1, 				Gen: 
;READF a2		Kill: a2, 				Gen: 
;READF a3		Kill: a3, 				Gen: 
;READF a4		Kill: a4, 				Gen: 
;READF a5		Kill: a5, 				Gen: 
;WRITES inputMessage	Kill: 				Gen: 
;STOREI 0 $T64		Kill: $T64, 			Gen: 
;STOREI $T64 $-1	Kill: $-1, 				Gen: $T64, 
;LABEL label42		Kill: 				Gen: 
;STOREI 2 $T65		Kill: $T65, 			Gen: 
;DIVI $-2 $T65 $T66	Kill: $T66, 				Gen: $-2, $T65, 
;GEI $-1 $T30 label44	Kill: 				Gen: $-1, $T30, 
;PUSH a5		Kill: 					Gen: a5, 
;PUSH a4		Kill: 					Gen: a4, 
;PUSH a3		Kill: 					Gen: a3, 
;PUSH a2		Kill: 					Gen: a2, 
;PUSH a1		Kill: 					Gen: a1, 
;PUSH a0		Kill: 					Gen: a0, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T69		Kill: $T69, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREF $T69 $-3	Kill: $-3, 				Gen: $T69, 
;WRITEF $-3		Kill: 				Gen: $-3, 
;WRITES eol		Kill: 				Gen: 
;STOREI 1 $T67		Kill: $T67, 			Gen: 
;ADDI $-1 $T67 $T68	Kill: $T68, 				Gen: $T67, $-1, 
;STOREI $T68 $-1	Kill: $-1, 				Gen: $T68, 
;JUMP label42		Kill: 				Gen: 
;LABEL label44		Kill: 				Gen: 
;LABEL label45		Kill: 				Gen: 
;STOREI $-2 $T70	Kill: $T70, 				Gen: $-2, 
;GEI $-1 $T70 label47	Kill: 				Gen: $T70, $-1, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR Incre		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T71		Kill: $T71, 				Gen: 
;POP 			Kill: 				Gen: 
;PUSH $T71		Kill: 				Gen: $T71, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR Decre		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T72		Kill: $T72, 				Gen: 
;POP 			Kill: 				Gen: 
;PUSH $T72		Kill: 				Gen: $T72, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR Incre		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T73		Kill: $T73, 				Gen: 
;POP 			Kill: 				Gen: 
;PUSH a5		Kill: 					Gen: a5, 
;PUSH a4		Kill: 					Gen: a4, 
;PUSH a3		Kill: 					Gen: a3, 
;PUSH a2		Kill: 					Gen: a2, 
;PUSH a1		Kill: 					Gen: a1, 
;PUSH a0		Kill: 					Gen: a0, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Kill: 				Gen: 
;POP $T74		Kill: $T74, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREF $T74 $-3	Kill: $-3, 				Gen: $T74, 
;WRITEF $-3		Kill: 				Gen: $-3, 
;WRITES eol		Kill: 				Gen: 
;STOREI $T73 $-1	Kill: $-1, 				Gen: $T73, 
;JUMP label45		Kill: 				Gen: 
;LABEL label47		Kill: 				Gen: 
;WRITES eol		Kill: 				Gen: 
;STOREI $-2 $T75	Kill: $T75, 				Gen: $-2, 
;STOREI $T75 $6		Kill: $6, 			Gen: $T75, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

; ========= CFG IR NODE / LIVE IN / LIVE OUT =========

;LABEL Incre		Live IN: $7, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, a0, a1, a2, a3, a4, a5, fmax, 
;LINK 1			Live IN: $7, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 1 $T1		Live IN: $7, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T1, $7, a0, a1, a2, a3, a4, a5, fmax, 
;ADDI $7 $T1 $T2	Live IN: $7, $T1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T2, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $T2 $6		Live IN: $T2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 

;LABEL Decre		Live IN: $7, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, a0, a1, a2, a3, a4, a5, fmax, 
;LINK 1			Live IN: $7, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 1 $T3		Live IN: $7, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T3, $7, a0, a1, a2, a3, a4, a5, fmax, 
;SUBI $7 $T3 $T4	Live IN: $T3, $7, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, $T4, a1, a2, a3, a4, a5, fmax, 
;STOREI $T4 $6		Live IN: $T4, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 

;LABEL main		Live IN: a1, a2, a3, a4, a5, a0, 	Live OUT: a0, a1, a2, a3, a4, a5, 
;LINK 5			Live IN: a1, a2, a3, a4, a5, a0, 	Live OUT: a0, a1, a2, a3, a4, a5, 
;STOREF 1000.00 $T5	Live IN: a0, a1, a2, a3, a4, a5, 	Live OUT: a0, $T5, a1, a2, a3, a4, a5, 
;STOREF $T5 fmax	Live IN: a0, $T5, a1, a2, a3, a4, a5, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;JSR SYSIN		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;POP $T6		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T6, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $T6 $-1		Live IN: $T6, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-1, a0, a1, a2, a3, a4, a5, fmax, 
;WRITES sortMessage	Live IN: $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-1, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 0 $T7		Live IN: $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-1, $T7, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $T7 $-2		Live IN: $T7, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label1		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $-1 $T8		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, $T8, a4, a5, fmax, 
;GEI $-2 $T8 label3	Live IN: $-2, $-1, a0, a1, a2, $T8, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a5		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a4		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a3		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a2		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a1		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a0		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH $-1		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;JSR FindMin		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;POP $T11		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, $T11, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, a1, a2, a3, $T11, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, $T11, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, a1, a2, a3, $T11, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, $T11, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, a1, a2, a3, $T11, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, $T11, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, a1, a2, a3, $T11, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, $T11, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, a1, a2, a3, $T11, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, $T11, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, a1, a2, a3, $T11, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, $T11, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, a1, a2, a3, $T11, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, $T11, a5, fmax, 
;STOREF $T11 $-4	Live IN: $-2, $-1, a0, a1, a2, a3, $T11, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a5		Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a4		Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a3		Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a2		Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a1		Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a0		Live IN: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 
;PUSH $-4		Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH $-1		Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;JSR FindIndex		Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;POP $T12		Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, $T12, a4, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, $-4, a1, a2, $T12, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, $T12, a4, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, $-4, a1, a2, $T12, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, $T12, a4, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, $-4, a1, a2, $T12, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, $T12, a4, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, $-4, a1, a2, $T12, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, $T12, a4, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, $-4, a1, a2, $T12, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, $T12, a4, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, $-4, a1, a2, $T12, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, $T12, a4, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, $-4, a1, a2, $T12, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, $T12, a4, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, $-4, a1, a2, $T12, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, $T12, a4, a5, fmax, 
;STOREI $T12 $-3	Live IN: $-2, $-1, a0, $-4, a1, a2, $T12, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, $-3, a1, a2, a3, a4, a5, fmax, 
;PUSH fmax		Live IN: $-2, $-1, a0, $-4, $-3, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, $-3, a1, a2, a3, a4, a5, fmax, 
;PUSH $-3		Live IN: $-2, $-1, a0, $-4, $-3, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 
;JSR SetAValue		Live IN: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, 
;POPREG			Live IN: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, 	Live OUT: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, 
;POP $T13		Live IN: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, 	Live OUT: $-2, $-1, a0, $-4, a1, a2, $T13, a3, a4, a5, 
;POP 			Live IN: $-2, $-1, $-4, a0, a1, $T13, a2, a3, a4, a5, 	Live OUT: $-2, $-1, a0, $-4, a1, a2, $T13, a3, a4, a5, 
;POP 			Live IN: $-2, $-1, $-4, a0, a1, $T13, a2, a3, a4, a5, 	Live OUT: $-2, $-1, a0, $-4, a1, a2, $T13, a3, a4, a5, 
;STOREF $T13 fmax	Live IN: $-2, $-1, $-4, a0, a1, $T13, a2, a3, a4, a5, 	Live OUT: $-2, $-1, a0, $-4, a1, a2, a3, a4, a5, fmax, 
;WRITEF $-4		Live IN: $-2, $-1, $-4, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;WRITES eol		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 1 $T9		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, $T9, a5, fmax, 
;ADDI $-2 $T9 $T10	Live IN: $-2, $-1, a0, a1, a2, a3, $T9, a4, a5, fmax, 	Live OUT: $-1, $T10, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $T10 $-2	Live IN: $T10, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label1		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label3		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;WRITES eol		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 

;LABEL FindMin		Live IN: $13, $11, $7, $12, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $8, $9, $10, a0, a1, a2, a3, a4, a5, fmax, 
;LINK 3			Live IN: $13, $11, $7, $12, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $8, $9, $10, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $8 $T14		Live IN: $13, $11, $7, $12, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $8, $9, $10, a0, a1, $T14, a2, a3, a4, a5, fmax, 
;STOREF $T14 $-2	Live IN: $13, $11, $12, $10, a0, $T14, $7, $8, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $8, $-2, $9, $10, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 1 $T15		Live IN: $13, $11, $7, $12, $-2, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $8, $-2, $9, $10, a0, a1, a2, a3, a4, a5, fmax, $T15, 
;STOREI $T15 $-1	Live IN: $13, $11, $7, $12, $-2, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, $T15, 	Live OUT: $13, $11, $12, $7, $8, $-2, $9, $10, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label4		Live IN: $13, $11, $7, $12, $-2, $8, $-1, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $8, $-2, $9, $10, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $7 $T16		Live IN: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T16, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;GEI $-1 $T16 label6	Live IN: $13, $11, $12, $10, a0, $T16, $7, $-2, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;PUSH $13		Live IN: $13, $11, $12, $10, a0, $7, $8, $-2, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $-2, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $12		Live IN: $13, $11, $12, $10, a0, $7, $8, $-2, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $-2, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $11		Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $10		Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $9		Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $8		Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $-1		Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;JSR GetValue		Live IN: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;POP $T17		Live IN: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T17, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T17, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T17, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T17, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T17, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T17, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T17, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T17, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T17, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T17, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T17, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T17, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T17, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T17, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T17, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;GEF $T17 $-2 label7	Live IN: $13, $11, $12, $10, a0, $T17, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;PUSH $13		Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $12		Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $11		Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $10		Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $9		Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $8		Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $-1		Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;JSR GetValue		Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP $T18		Live IN: $13, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T18, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T18, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T18, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T18, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T18, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T18, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T18, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T18, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T18, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T18, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T18, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T18, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T18, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $12, $10, a0, $T18, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T18, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;STOREF $T18 $-2	Live IN: $13, $11, $12, $10, a0, $T18, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;JUMP label8		Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;LABEL label7		Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;LABEL label8		Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $-1		Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $13, $11, $12, $10, a0, $7, $-2, $8, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $-2, $9, a1, a2, a3, a4, a5, fmax, 
;JSR Incre		Live IN: $13, $11, $7, $12, $-2, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $8, $-2, $9, $10, a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $13, $11, $7, $12, $-2, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $8, $-2, $9, $10, a0, a1, a2, a3, a4, a5, fmax, 
;POP $T19		Live IN: $13, $11, $7, $12, $-2, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $T19, $8, $-2, $9, $10, a0, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $11, $T19, $7, $12, $-2, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $T19, $8, $-2, $9, $10, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $T19 $-1	Live IN: $13, $11, $T19, $12, $10, a0, $7, $8, $-2, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $8, $-2, $9, $10, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label4		Live IN: $13, $11, $7, $12, $-2, $8, $-1, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $8, $-2, $9, $10, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label6		Live IN: $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $-2 $T20	Live IN: $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, $T20, a1, a2, a3, a4, a5, fmax, 
;STOREF $T20 $6		Live IN: $T20, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 

;LABEL FindIndex	Live IN: $13, $14, $11, $7, $12, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $7, $8, $9, $10, a0, a1, a2, a3, a4, a5, fmax, 
;LINK 2			Live IN: $13, $14, $11, $7, $12, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $7, $8, $9, $10, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 0 $T21		Live IN: $13, $14, $11, $7, $12, $8, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $7, $8, $9, $10, a0, $T21, a1, a2, a3, a4, a5, fmax, 
;STOREI $T21 $-1	Live IN: $13, $14, $11, $7, $12, $8, $10, $9, a0, $T21, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $7, $8, $9, $10, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label9		Live IN: $13, $14, $11, $7, $12, $8, $-1, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $7, $8, $9, $10, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $7 $T22		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T22, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 
;GEI $-1 $T22 label11	Live IN: $13, $14, $11, $12, $10, a0, $T22, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $14		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $13		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $12		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $11		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $10		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $9		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $-1		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;JSR GetValue		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP $T25		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $T25		Live IN: $13, $14, $11, $12, $10, a0, $T25, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH $8		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;JSR IsEqual		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP $T26		Live IN: $13, $14, $11, $12, $10, a0, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T26, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T26, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T26, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T26, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T26, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;STOREI 1 $T27		Live IN: $13, $14, $11, $12, $10, a0, $T26, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T27, $T26, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;NEI $T26 $T27 label12	Live IN: $13, $14, $11, $12, $10, a0, $T27, $T26, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $7, $8, $9, $-1, a1, a2, a3, a4, a5, fmax, 
;STOREI $-1 $T28	Live IN: $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, $T28, 
;STOREI $T28 $6		Live IN: a0, a1, a2, a3, a4, a5, fmax, $T28, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label13		Live IN: $13, $14, $11, $7, $12, $8, $-1, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $7, $8, $9, $10, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label12		Live IN: $13, $14, $11, $7, $12, $8, $-1, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $7, $8, $9, $10, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label13		Live IN: $13, $14, $11, $7, $12, $8, $-1, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $7, $8, $9, $10, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 1 $T23		Live IN: $13, $14, $11, $7, $12, $8, $-1, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $7, $8, $9, $10, $-1, a0, a1, $T23, a2, a3, a4, a5, fmax, 
;ADDI $-1 $T23 $T24	Live IN: $13, $14, $11, $12, $10, a0, $T23, $7, $8, $-1, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $10, a0, $T24, $7, $8, $9, a1, a2, a3, a4, a5, fmax, 
;STOREI $T24 $-1	Live IN: $13, $14, $11, $12, $10, a0, $T24, $7, $8, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $7, $8, $9, $10, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label9		Live IN: $13, $14, $11, $7, $12, $8, $-1, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $14, $11, $12, $7, $8, $9, $10, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label11		Live IN: $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-1, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $-1 $T29	Live IN: $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, $T29, 
;STOREI $T29 $6		Live IN: a0, a1, a2, a3, a4, a5, $T29, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 

;LABEL IsEqual		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;LINK 1			Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH $8		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH $7		Live IN: $7, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;JSR IsNotEqual		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;POP $T30		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, $T30, a2, a3, a4, a5, fmax, 
;POP 			Live IN: a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, $T30, a2, a3, a4, a5, fmax, 
;POP 			Live IN: a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, $T30, a2, a3, a4, a5, fmax, 
;STOREI 0 $T31		Live IN: a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, $T30, a2, a3, a4, $T31, a5, fmax, 
;NEI $T30 $T31 label14	Live IN: a0, $T30, a1, a2, a3, $T31, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 1 $T32		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, $T32, a4, a5, fmax, 
;STOREI $T32 $6		Live IN: a0, a1, a2, $T32, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label15		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label14		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label15		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 0 $T33		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T33, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $T33 $6		Live IN: $T33, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 

;LABEL IsNotEqual	Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;LINK 1			Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $8 $T34		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $T34, a0, a1, a2, a3, a4, a5, fmax, 
;EQF $7 $T34 label16	Live IN: $7, $T34, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 1 $T35		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, $T35, a1, a2, a3, a4, a5, fmax, 
;STOREI $T35 $6		Live IN: $T35, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label17		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label16		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label17		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 0 $T36		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, $T36, a1, a2, a3, a4, a5, fmax, 
;STOREI $T36 $6		Live IN: a0, $T36, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 

;LABEL GetValue		Live IN: $13, $11, $12, $10, a0, $7, $8, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, a1, a2, a3, a4, a5, fmax, 
;LINK 1			Live IN: $13, $11, $12, $10, a0, $7, $8, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, a1, a2, a3, a4, a5, fmax, 
;STOREI 0 $T37		Live IN: $13, $11, $12, $10, a0, $7, $8, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T37, $7, $8, $9, a1, a2, a3, a4, a5, fmax, 
;NEI $7 $T37 label18	Live IN: $13, $11, $12, $10, a0, $T37, $7, $8, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $7, $8, $9, a1, a2, a3, a4, a5, fmax, 
;STOREF $8 $T38		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T38, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $T38 $6		Live IN: $T38, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label19		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label18		Live IN: $13, $11, $7, $12, $9, $10, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 1 $T39		Live IN: $13, $11, $12, $10, a0, $7, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $10, a0, $T39, $7, $9, a1, a2, a3, a4, a5, fmax, 
;NEI $7 $T39 label20	Live IN: $13, $11, $12, $10, a0, $T39, $7, $9, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $10, $9, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $9 $T40		Live IN: $9, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, $T40, a5, fmax, 
;STOREF $T40 $6		Live IN: a0, a1, a2, a3, $T40, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label21		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label20		Live IN: $13, $11, $7, $12, $10, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $10, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 2 $T41		Live IN: $13, $11, $7, $12, $10, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $10, a0, a1, a2, a3, $T41, a4, a5, fmax, 
;NEI $7 $T41 label22	Live IN: $13, $11, $12, $10, a0, $T41, $7, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, $10, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $10 $T42	Live IN: $10, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, $T42, a3, a4, a5, fmax, 
;STOREF $T42 $6		Live IN: a0, a1, $T42, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label23		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label22		Live IN: $13, $11, $7, $12, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 3 $T43		Live IN: $13, $11, $7, $12, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, a0, a1, $T43, a2, a3, a4, a5, fmax, 
;NEI $7 $T43 label24	Live IN: $13, $11, $7, $12, a0, $T43, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $11, $12, $7, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $11 $T44	Live IN: $11, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, $T44, a1, a2, a3, a4, a5, fmax, 
;STOREF $T44 $6		Live IN: $T44, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label25		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label24		Live IN: $13, $7, $12, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $12, $7, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 4 $T45		Live IN: $13, $7, $12, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $12, $7, a0, $T45, a1, a2, a3, a4, a5, fmax, 
;NEI $7 $T45 label26	Live IN: $13, $12, $7, a0, $T45, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $7, $12, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $12 $T46	Live IN: $12, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T46, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $T46 $6		Live IN: $T46, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label27		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label26		Live IN: $13, $7, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $7, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 5 $T47		Live IN: $13, $7, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, $7, $T47, a0, a1, a2, a3, a4, a5, fmax, 
;NEI $7 $T47 label28	Live IN: $13, $7, $T47, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $13, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $13 $T48	Live IN: $13, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T48, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $T48 $6		Live IN: $T48, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label29		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label28		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label29		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label27		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label25		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label23		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label21		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label19		Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 

;LABEL SetAValue	Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;LINK 1			Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 0 $T49		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T49, $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;NEI $7 $T49 label30	Live IN: $T49, $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $8 $T50		Live IN: $8, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a1, a2, a3, $T50, a4, a5, fmax, 
;STOREF $T50 a0		Live IN: $8, a1, a2, $T50, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label31		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label30		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 1 $T51		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, $T51, fmax, 
;NEI $7 $T51 label32	Live IN: $7, $8, a0, a1, a2, a3, a4, a5, $T51, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $8 $T52		Live IN: $8, a0, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a2, a3, a4, a5, $T52, fmax, 
;STOREF $T52 a1		Live IN: $8, a0, a2, a3, a4, $T52, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label33		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label32		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 2 $T53		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, $T53, 
;NEI $7 $T53 label34	Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, $T53, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $8 $T54		Live IN: $8, a0, a1, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a3, a4, a5, fmax, $T54, 
;STOREF $T54 a2		Live IN: $8, a0, a1, a3, a4, a5, $T54, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label35		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label34		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 3 $T55		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T55, $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;NEI $7 $T55 label36	Live IN: $T55, $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $8 $T56		Live IN: $8, a0, a1, a2, a4, a5, fmax, 	Live OUT: $T56, $8, a0, a1, a2, a4, a5, fmax, 
;STOREF $T56 a3		Live IN: $T56, $8, a0, a1, a2, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label37		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label36		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 4 $T57		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T57, $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;NEI $7 $T57 label38	Live IN: $T57, $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $8 $T58		Live IN: $8, a0, a1, a2, a3, a5, fmax, 	Live OUT: $T58, $8, a0, a1, a2, a3, a5, fmax, 
;STOREF $T58 a4		Live IN: $T58, $8, a0, a1, a2, a3, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label39		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label38		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI 5 $T59		Live IN: $7, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $7, $8, $T59, a0, a1, a2, a3, a4, a5, fmax, 
;NEI $7 $T59 label40	Live IN: $7, $T59, $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $8 $T60		Live IN: $8, a0, a1, a2, a3, a4, fmax, 	Live OUT: $8, a0, a1, a2, $T60, a3, a4, fmax, 
;STOREF $T60 a5		Live IN: $8, a0, a1, $T60, a2, a3, a4, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label41		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label40		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label41		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label39		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label37		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label35		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label33		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label31		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $8, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $8 $T61		Live IN: $8, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, $T61, a2, a3, a4, a5, fmax, 
;STOREF $T61 $6		Live IN: a0, $T61, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 

;LABEL SYSIN		Live IN: fmax, $T30, 		Live OUT: $T30, fmax, 
;LINK 4			Live IN: fmax, $T30, 		Live OUT: $T30, fmax, 
;STOREI 0 $T62		Live IN: $T30, fmax, 		Live OUT: $T30, fmax, $T62, 
;STOREI $T62 $-1	Live IN: fmax, $T30, $T62, 		Live OUT: $T30, fmax, 
;STOREI 6 $T63		Live IN: $T30, fmax, 		Live OUT: $T30, fmax, $T63, 
;STOREI $T63 $-2	Live IN: $T30, $T63, fmax, 		Live OUT: $-2, $T30, fmax, 
;READF a0		Live IN: $T30, $-2, fmax, 		Live OUT: $-2, a0, $T30, fmax, 
;READF a1		Live IN: $T30, $-2, fmax, a0, 		Live OUT: $-2, a0, a1, $T30, fmax, 
;READF a2		Live IN: $T30, a1, $-2, fmax, a0, 	Live OUT: $-2, a0, a1, $T30, a2, fmax, 
;READF a3		Live IN: $-2, a0, $T30, a1, a2, fmax, 	Live OUT: $-2, a0, a1, $T30, a2, a3, fmax, 
;READF a4		Live IN: $-2, a0, $T30, a1, a2, a3, fmax, 	Live OUT: $-2, a0, a1, $T30, a2, a3, a4, fmax, 
;READF a5		Live IN: $-2, a0, $T30, a1, a2, a3, a4, fmax, 	Live OUT: $-2, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;WRITES inputMessage	Live IN: $-2, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;STOREI 0 $T64		Live IN: $-2, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, a0, a1, $T30, a2, a3, a4, a5, $T64, fmax, 
;STOREI $T64 $-1	Live IN: $-2, a0, $T30, a1, a2, a3, a4, a5, $T64, fmax, 	Live OUT: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;LABEL label42		Live IN: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;STOREI 2 $T65		Live IN: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, $T65, fmax, 
;DIVI $-2 $T65 $T66	Live IN: $-2, $-1, a0, $T30, a1, a2, a3, a4, $T65, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;GEI $-1 $T30 label44	Live IN: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 
;PUSH a5		Live IN: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 
;PUSH a4		Live IN: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 
;PUSH a3		Live IN: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 
;PUSH a2		Live IN: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 
;PUSH a1		Live IN: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 
;PUSH a0		Live IN: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 
;PUSH $-1		Live IN: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 
;JSR GetValue		Live IN: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;POP $T69		Live IN: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T69, $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T69, $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T69, $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T69, $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T69, $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T69, $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T69, $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T69, $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T69, $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T69, $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T69, $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T69, $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T69, $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T69, $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T69, $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;STOREF $T69 $-3	Live IN: $T69, $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $-3, a1, $T30, a2, a3, a4, a5, fmax, 
;WRITEF $-3		Live IN: $-2, $-1, a0, $-3, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;WRITES eol		Live IN: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;STOREI 1 $T67		Live IN: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T67, $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;ADDI $-1 $T67 $T68	Live IN: $T67, $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T68, $-2, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;STOREI $T68 $-1	Live IN: $T68, $-2, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;JUMP label42		Live IN: $-2, $-1, a0, $T30, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, $T30, a2, a3, a4, a5, fmax, 
;LABEL label44		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label45		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $-2 $T70	Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $T70, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;GEI $-1 $T70 label47	Live IN: $-2, $T70, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH $-1		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;JSR Incre		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;POP $T71		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T71, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $-2, $-1, $T71, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T71, a1, a2, a3, a4, a5, fmax, 
;PUSH $T71		Live IN: $-2, $-1, $T71, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;JSR Decre		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;POP $T72		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T72, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $-2, $-1, a0, $T72, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, $T72, a1, a2, a3, a4, a5, fmax, 
;PUSH $T72		Live IN: $-2, $-1, a0, $T72, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;JSR Incre		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;POP $T73		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a5		Live IN: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a4		Live IN: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a3		Live IN: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a2		Live IN: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a1		Live IN: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH a0		Live IN: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH $-1		Live IN: $T73, $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;PUSH 			Live IN: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;PUSHREG		Live IN: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;JSR GetValue		Live IN: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;POPREG			Live IN: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;POP $T74		Live IN: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;POP 			Live IN: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;STOREF $T74 $-3	Live IN: $T73, $T74, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, a0, $-3, a1, a2, a3, a4, a5, fmax, 
;WRITEF $-3		Live IN: $T73, $-2, a0, $-3, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;WRITES eol		Live IN: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $T73 $-1	Live IN: $T73, $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;JUMP label45		Live IN: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, $-1, a0, a1, a2, a3, a4, a5, fmax, 
;LABEL label47		Live IN: $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, a0, a1, a2, a3, a4, a5, fmax, 
;WRITES eol		Live IN: $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $-2, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $-2 $T75	Live IN: $-2, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: $T75, a0, a1, a2, a3, a4, a5, fmax, 
;STOREI $T75 $6		Live IN: $T75, a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;UNLINK			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;RET			Live IN: a0, a1, a2, a3, a4, a5, fmax, 	Live OUT: a0, a1, a2, a3, a4, a5, fmax, 
;str inputMessage "inputs are: \n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str sortMessage "\n sorting... \n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str space " " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str eol "\n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var fmax 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a5 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;jsr main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;sys halt 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL Incre liveout: ; { $7 a0 a1 a2 a3 a4 a5 fmax  }
;label Incre 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $7 a0 a1 a2 a3 a4 a5 fmax  }
;link 76 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T1 liveout: ; { $T1 $7 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;ADDI $7 $T1 $T2 liveout: ; { $T2 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; ensure(): $T1 has register r3
; switching owner of register $7 to $T2 { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
;addi r3 r2 	; { r0-><null> || r1-><null> || r2->$T2 || r3->$T1* }
; freeing unused variable r3
; spilling varialbe $T1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2->$T2* || r3->$T1* }
;STOREI $T2 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T2 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T2* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T2
;move r2 $-2 	; { r0-><null> || r1-><null> || r2->$T2* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL Decre liveout: ; { $7 a0 a1 a2 a3 a4 a5 fmax  }
;label Decre 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $7 a0 a1 a2 a3 a4 a5 fmax  }
;link 76 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T3 liveout: ; { $T3 $7 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T3 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
; loading $-3 to register r3
;move $-3 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
;SUBI $7 $T3 $T4 liveout: ; { a0 $T4 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T3* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T3* }
; ensure(): $T3 has register r3
; switching owner of register $7 to $T4 { r0-><null> || r1-><null> || r2->$7 || r3->$T3* }
;subi r3 r2 	; { r0-><null> || r1-><null> || r2->$T4 || r3->$T3* }
; freeing unused variable r3
; spilling varialbe $T3
;move r3 $-3 	; { r0-><null> || r1-><null> || r2->$T4* || r3->$T3* }
;STOREI $T4 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T4 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T4* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T4
;move r2 $-4 	; { r0-><null> || r1-><null> || r2->$T4* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL main liveout: ; { a0 a1 a2 a3 a4 a5  }
;label main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 5 liveout: ; { a0 a1 a2 a3 a4 a5  }
;link 80 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF 1000.00 $T5 liveout: ; { a0 $T5 a1 a2 a3 a4 a5  }
; ensure(): $T5 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T5 }
; loading $-9 to register r3
;move $-9 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5 }
;move 1000.00 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5 }
;STOREF $T5 fmax liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T5 has register r3
; ensure(): fmax gets register r2 { r0-><null> || r1-><null> || r2->fmax || r3->$T5* }
; loading fmax to register r2
;move fmax r2 	; { r0-><null> || r1-><null> || r2->fmax || r3->$T5* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->fmax || r3->$T5* }
; freeing unused variable r3
; spilling varialbe $T5
;move r3 $-9 	; { r0-><null> || r1-><null> || r2->fmax* || r3->$T5* }
;PUSH  liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0-><null> || r1-><null> || r2->fmax* || r3-><null> }
;PUSHREG liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0-><null> || r1-><null> || r2->fmax* || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2->fmax* || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2->fmax* || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2->fmax* || r3-><null> }
;JSR SYSIN liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
; spilling varialbe fmax
;move r2 fmax 	; { r0-><null> || r1-><null> || r2->fmax* || r3-><null> }
;jsr SYSIN 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T6 liveout: ; { $T6 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T6 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T6 }
; loading $-10 to register r3
;move $-10 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T6 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T6 }
;STOREI $T6 $-1 liveout: ; { $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T6 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T6* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T6* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T6* }
; freeing unused variable r3
; spilling varialbe $T6
;move r3 $-10 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T6* }
;WRITES sortMessage liveout: ; { $-1 a0 a1 a2 a3 a4 a5 fmax  }
;sys writes sortMessage 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;STOREI 0 $T7 liveout: ; { $-1 $T7 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T7 gets register r3 { r0-><null> || r1-><null> || r2->$-1* || r3->$T7 }
; loading $-11 to register r3
;move $-11 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T7 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T7 }
;STOREI $T7 $-2 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T7 has register r3
; ensure(): $-2 gets register r1 { r0-><null> || r1->$-2 || r2->$-1* || r3->$T7* }
; loading $-2 to register r1
;move $-2 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T7* }
;move r3 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T7* }
; freeing unused variable r3
; spilling varialbe $T7
;move r3 $-11 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T7* }
;LABEL label1 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
; spilling varialbe $-2
;move r1 $-2 	; { r0-><null> || r1->$-2* || r2-><null> || r3-><null> }
;label label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI $-1 $T8 liveout: ; { $-2 $-1 a0 a1 a2 a3 $T8 a4 a5 fmax  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; ensure(): $T8 gets register r2 { r0-><null> || r1-><null> || r2->$T8 || r3->$-1 }
; loading $-12 to register r2
;move $-12 r2 	; { r0-><null> || r1-><null> || r2->$T8 || r3->$-1 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T8 || r3->$-1 }
;GEI $-2 $T8 label3 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-2 gets register r1 { r0-><null> || r1->$-2 || r2->$T8* || r3->$-1 }
; loading $-2 to register r1
;move $-2 r1 	; { r0-><null> || r1->$-2 || r2->$T8* || r3->$-1 }
; ensure(): $T8 has register r2
;cmpi r1 r2 	; { r0-><null> || r1->$-2 || r2->$T8* || r3->$-1 }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r3 $-1 	; { r0-><null> || r1->$-2 || r2->$T8* || r3->$-1 }
; spilling varialbe $T8
;move r2 $-12 	; { r0-><null> || r1->$-2 || r2->$T8* || r3-><null> }
; spilling varialbe $-2
;move r1 $-2 	; { r0-><null> || r1->$-2 || r2-><null> || r3-><null> }
;jge label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r1
; freeing unused variable r2
;PUSH a5 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): a5 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->a5 }
; loading a5 to register r3
;move a5 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->a5 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->a5 }
;PUSH a4 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): a4 gets register r2 { r0-><null> || r1-><null> || r2->a4 || r3->a5 }
; loading a4 to register r2
;move a4 r2 	; { r0-><null> || r1-><null> || r2->a4 || r3->a5 }
;push r2 	; { r0-><null> || r1-><null> || r2->a4 || r3->a5 }
;PUSH a3 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): a3 gets register r1 { r0-><null> || r1->a3 || r2->a4 || r3->a5 }
; loading a3 to register r1
;move a3 r1 	; { r0-><null> || r1->a3 || r2->a4 || r3->a5 }
;push r1 	; { r0-><null> || r1->a3 || r2->a4 || r3->a5 }
;PUSH a2 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): a2 gets register r0 { r0->a2 || r1->a3 || r2->a4 || r3->a5 }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->a3 || r2->a4 || r3->a5 }
;push r0 	; { r0->a2 || r1->a3 || r2->a4 || r3->a5 }
;PUSH a1 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a1
; ensure(): a1 gets register r0 { r0->a1 || r1->a3 || r2->a4 || r3->a5 }
; loading a1 to register r0
;move a1 r0 	; { r0->a1 || r1->a3 || r2->a4 || r3->a5 }
;push r0 	; { r0->a1 || r1->a3 || r2->a4 || r3->a5 }
;PUSH a0 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a0
; ensure(): a0 gets register r0 { r0->a0 || r1->a3 || r2->a4 || r3->a5 }
; loading a0 to register r0
;move a0 r0 	; { r0->a0 || r1->a3 || r2->a4 || r3->a5 }
;push r0 	; { r0->a0 || r1->a3 || r2->a4 || r3->a5 }
;PUSH $-1 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $-1
; ensure(): $-1 gets register r0 { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
; loading $-1 to register r0
;move $-1 r0 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;push r0 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;PUSH  liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;PUSHREG liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;push r1 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;push r2 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;push r3 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;JSR FindMin liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
; spilling varialbe a5
;move r3 a5 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
; spilling varialbe a4
;move r2 a4 	; { r0->$-1 || r1->a3 || r2->a4 || r3-><null> }
; spilling varialbe a3
;move r1 a3 	; { r0->$-1 || r1->a3 || r2-><null> || r3-><null> }
;jsr FindMin 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;POP $T11 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 $T11 a5 fmax  }
; ensure(): $T11 gets register r3 { r0->$-1 || r1-><null> || r2-><null> || r3->$T11 }
; loading $-15 to register r3
;move $-15 r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T11 }
;pop r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T11 }
;POP  liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 $T11 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T11* }
;POP  liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 $T11 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T11* }
;POP  liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 $T11 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T11* }
;POP  liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 $T11 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T11* }
;POP  liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 $T11 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T11* }
;POP  liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 $T11 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T11* }
;POP  liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 $T11 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T11* }
;STOREF $T11 $-4 liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T11 has register r3
; ensure(): $-4 gets register r2 { r0->$-1 || r1-><null> || r2->$-4 || r3->$T11* }
; loading $-4 to register r2
;move $-4 r2 	; { r0->$-1 || r1-><null> || r2->$-4 || r3->$T11* }
;move r3 r2 	; { r0->$-1 || r1-><null> || r2->$-4 || r3->$T11* }
; freeing unused variable r3
; spilling varialbe $T11
;move r3 $-15 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T11* }
;PUSH a5 liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): a5 gets register r3 { r0->$-1 || r1-><null> || r2->$-4* || r3->a5 }
; loading a5 to register r3
;move a5 r3 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->a5 }
;push r3 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->a5 }
;PUSH a4 liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): a4 gets register r1 { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
; loading a4 to register r1
;move a4 r1 	; { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
;push r1 	; { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
;PUSH a3 liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->a4 || r2->$-4* || r3->a5 }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->a4 || r2->$-4* || r3->a5 }
;push r0 	; { r0->a3 || r1->a4 || r2->$-4* || r3->a5 }
;PUSH a2 liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a2
; ensure(): a2 gets register r0 { r0->a2 || r1->a4 || r2->$-4* || r3->a5 }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->a4 || r2->$-4* || r3->a5 }
;push r0 	; { r0->a2 || r1->a4 || r2->$-4* || r3->a5 }
;PUSH a1 liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a1
; ensure(): a1 gets register r0 { r0->a1 || r1->a4 || r2->$-4* || r3->a5 }
; loading a1 to register r0
;move a1 r0 	; { r0->a1 || r1->a4 || r2->$-4* || r3->a5 }
;push r0 	; { r0->a1 || r1->a4 || r2->$-4* || r3->a5 }
;PUSH a0 liveout: ; { $-2 $-1 a0 $-4 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a0
; ensure(): a0 gets register r0 { r0->a0 || r1->a4 || r2->$-4* || r3->a5 }
; loading a0 to register r0
;move a0 r0 	; { r0->a0 || r1->a4 || r2->$-4* || r3->a5 }
;push r0 	; { r0->a0 || r1->a4 || r2->$-4* || r3->a5 }
;PUSH $-4 liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-4 has register r2
;push r2 	; { r0->a0 || r1->a4 || r2->$-4* || r3->a5 }
;PUSH $-1 liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $-1
; ensure(): $-1 gets register r0 { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
; loading $-1 to register r0
;move $-1 r0 	; { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
;push r0 	; { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
;PUSH  liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
;PUSHREG liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
;push r1 	; { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
;push r2 	; { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
;push r3 	; { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
;JSR FindIndex liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
; spilling varialbe a5
;move r3 a5 	; { r0->$-1 || r1->a4 || r2->$-4* || r3->a5 }
; spilling varialbe a4
;move r1 a4 	; { r0->$-1 || r1->a4 || r2->$-4* || r3-><null> }
;jsr FindIndex 	; { r0->$-1 || r1-><null> || r2->$-4* || r3-><null> }
;POPREG liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0->$-1 || r1-><null> || r2->$-4* || r3-><null> }
;pop r2 	; { r0->$-1 || r1-><null> || r2->$-4* || r3-><null> }
;pop r1 	; { r0->$-1 || r1-><null> || r2->$-4* || r3-><null> }
;pop r0 	; { r0->$-1 || r1-><null> || r2->$-4* || r3-><null> }
;POP $T12 liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 $T12 a4 a5 fmax  }
; ensure(): $T12 gets register r3 { r0->$-1 || r1-><null> || r2->$-4* || r3->$T12 }
; loading $-16 to register r3
;move $-16 r3 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T12 }
;pop r3 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T12 }
;POP  liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 $T12 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T12* }
;POP  liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 $T12 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T12* }
;POP  liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 $T12 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T12* }
;POP  liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 $T12 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T12* }
;POP  liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 $T12 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T12* }
;POP  liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 $T12 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T12* }
;POP  liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 $T12 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T12* }
;POP  liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 $T12 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T12* }
;STOREI $T12 $-3 liveout: ; { $-2 $-1 $-4 a0 $-3 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T12 has register r3
; ensure(): $-3 gets register r1 { r0->$-1 || r1->$-3 || r2->$-4* || r3->$T12* }
; loading $-3 to register r1
;move $-3 r1 	; { r0->$-1 || r1->$-3 || r2->$-4* || r3->$T12* }
;move r3 r1 	; { r0->$-1 || r1->$-3 || r2->$-4* || r3->$T12* }
; freeing unused variable r3
; spilling varialbe $T12
;move r3 $-16 	; { r0->$-1 || r1->$-3* || r2->$-4* || r3->$T12* }
;PUSH fmax liveout: ; { $-2 $-1 $-4 a0 $-3 a1 a2 a3 a4 a5 fmax  }
; ensure(): fmax gets register r3 { r0->$-1 || r1->$-3* || r2->$-4* || r3->fmax }
; loading fmax to register r3
;move fmax r3 	; { r0->$-1 || r1->$-3* || r2->$-4* || r3->fmax }
;push r3 	; { r0->$-1 || r1->$-3* || r2->$-4* || r3->fmax }
;PUSH $-3 liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-3 has register r1
;push r1 	; { r0->$-1 || r1->$-3* || r2->$-4* || r3->fmax }
; freeing unused variable r1
; spilling varialbe $-3
;move r1 $-3 	; { r0->$-1 || r1->$-3* || r2->$-4* || r3->fmax }
;PUSH  liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->fmax }
;PUSHREG liveout: ; { $-2 $-1 $-4 a0 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->fmax }
;push r1 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->fmax }
;push r2 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->fmax }
;push r3 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->fmax }
;JSR SetAValue liveout: ; { $-2 $-1 a0 $-4 a1 a2 a3 a4 a5  }
; writing back global variables prior a function call
; spilling varialbe fmax
;move r3 fmax 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->fmax }
;jsr SetAValue 	; { r0->$-1 || r1-><null> || r2->$-4* || r3-><null> }
;POPREG liveout: ; { $-2 $-1 a0 $-4 a1 a2 a3 a4 a5  }
;pop r3 	; { r0->$-1 || r1-><null> || r2->$-4* || r3-><null> }
;pop r2 	; { r0->$-1 || r1-><null> || r2->$-4* || r3-><null> }
;pop r1 	; { r0->$-1 || r1-><null> || r2->$-4* || r3-><null> }
;pop r0 	; { r0->$-1 || r1-><null> || r2->$-4* || r3-><null> }
;POP $T13 liveout: ; { $-2 $-1 a0 $-4 a1 a2 $T13 a3 a4 a5  }
; ensure(): $T13 gets register r3 { r0->$-1 || r1-><null> || r2->$-4* || r3->$T13 }
; loading $-17 to register r3
;move $-17 r3 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T13 }
;pop r3 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T13 }
;POP  liveout: ; { $-2 $-1 a0 $-4 a1 a2 $T13 a3 a4 a5  }
;pop 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T13* }
;POP  liveout: ; { $-2 $-1 a0 $-4 a1 a2 $T13 a3 a4 a5  }
;pop 	; { r0->$-1 || r1-><null> || r2->$-4* || r3->$T13* }
;STOREF $T13 fmax liveout: ; { $-2 $-1 a0 $-4 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T13 has register r3
; ensure(): fmax gets register r1 { r0->$-1 || r1->fmax || r2->$-4* || r3->$T13* }
; loading fmax to register r1
;move fmax r1 	; { r0->$-1 || r1->fmax || r2->$-4* || r3->$T13* }
;move r3 r1 	; { r0->$-1 || r1->fmax || r2->$-4* || r3->$T13* }
; freeing unused variable r3
; spilling varialbe $T13
;move r3 $-17 	; { r0->$-1 || r1->fmax* || r2->$-4* || r3->$T13* }
;WRITEF $-4 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-4 has register r2
;sys writer r2 	; { r0->$-1 || r1->fmax* || r2->$-4* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $-4
;move r2 $-4 	; { r0->$-1 || r1->fmax* || r2->$-4* || r3-><null> }
;WRITES eol liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;sys writes eol 	; { r0->$-1 || r1->fmax* || r2-><null> || r3-><null> }
;STOREI 1 $T9 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 $T9 a5 fmax  }
; ensure(): $T9 gets register r3 { r0->$-1 || r1->fmax* || r2-><null> || r3->$T9 }
; loading $-13 to register r3
;move $-13 r3 	; { r0->$-1 || r1->fmax* || r2-><null> || r3->$T9 }
;move 1 r3 	; { r0->$-1 || r1->fmax* || r2-><null> || r3->$T9 }
;ADDI $-2 $T9 $T10 liveout: ; { $-1 $T10 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-2 gets register r2 { r0->$-1 || r1->fmax* || r2->$-2 || r3->$T9* }
; loading $-2 to register r2
;move $-2 r2 	; { r0->$-1 || r1->fmax* || r2->$-2 || r3->$T9* }
; ensure(): $T9 has register r3
; switching owner of register $-2 to $T10 { r0->$-1 || r1->fmax* || r2->$-2 || r3->$T9* }
;addi r3 r2 	; { r0->$-1 || r1->fmax* || r2->$T10 || r3->$T9* }
; freeing unused variable r3
; spilling varialbe $T9
;move r3 $-13 	; { r0->$-1 || r1->fmax* || r2->$T10* || r3->$T9* }
;STOREI $T10 $-2 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T10 has register r2
; ensure(): $-2 gets register r3 { r0->$-1 || r1->fmax* || r2->$T10* || r3->$-2 }
; loading $-2 to register r3
;move $-2 r3 	; { r0->$-1 || r1->fmax* || r2->$T10* || r3->$-2 }
;move r2 r3 	; { r0->$-1 || r1->fmax* || r2->$T10* || r3->$-2 }
; freeing unused variable r2
; spilling varialbe $T10
;move r2 $-14 	; { r0->$-1 || r1->fmax* || r2->$T10* || r3->$-2* }
;JUMP label1 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $-2
;move r3 $-2 	; { r0->$-1 || r1->fmax* || r2-><null> || r3->$-2* }
; spilling varialbe fmax
;move r1 fmax 	; { r0->$-1 || r1->fmax* || r2-><null> || r3-><null> }
; spilling varialbe $-1
;move r0 $-1 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;jmp label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label3 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;WRITES eol liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL FindMin liveout: ; { $13 $11 $12 $7 $8 $9 $10 a0 a1 a2 a3 a4 a5 fmax  }
;label FindMin 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 3 liveout: ; { $13 $11 $12 $7 $8 $9 $10 a0 a1 a2 a3 a4 a5 fmax  }
;link 78 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF $8 $T14 liveout: ; { $13 $11 $12 $7 $8 $9 $10 a0 a1 $T14 a2 a3 a4 a5 fmax  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T14 gets register r2 { r0-><null> || r1-><null> || r2->$T14 || r3->$8 }
; loading $-16 to register r2
;move $-16 r2 	; { r0-><null> || r1-><null> || r2->$T14 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T14 || r3->$8 }
;STOREF $T14 $-2 liveout: ; { $13 $11 $12 $7 $8 $-2 $9 $10 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T14 has register r2
; ensure(): $-2 gets register r1 { r0-><null> || r1->$-2 || r2->$T14* || r3->$8 }
; loading $-2 to register r1
;move $-2 r1 	; { r0-><null> || r1->$-2 || r2->$T14* || r3->$8 }
;move r2 r1 	; { r0-><null> || r1->$-2 || r2->$T14* || r3->$8 }
; freeing unused variable r2
; spilling varialbe $T14
;move r2 $-16 	; { r0-><null> || r1->$-2* || r2->$T14* || r3->$8 }
;STOREI 1 $T15 liveout: ; { $13 $11 $12 $7 $8 $-2 $9 $10 a0 a1 a2 a3 a4 a5 fmax $T15  }
; ensure(): $T15 gets register r2 { r0-><null> || r1->$-2* || r2->$T15 || r3->$8 }
; loading $-17 to register r2
;move $-17 r2 	; { r0-><null> || r1->$-2* || r2->$T15 || r3->$8 }
;move 1 r2 	; { r0-><null> || r1->$-2* || r2->$T15 || r3->$8 }
;STOREI $T15 $-1 liveout: ; { $13 $11 $12 $7 $8 $-2 $9 $10 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T15 has register r2
; ensure(): $-1 gets register r0 { r0->$-1 || r1->$-2* || r2->$T15* || r3->$8 }
; loading $-1 to register r0
;move $-1 r0 	; { r0->$-1 || r1->$-2* || r2->$T15* || r3->$8 }
;move r2 r0 	; { r0->$-1 || r1->$-2* || r2->$T15* || r3->$8 }
; freeing unused variable r2
; spilling varialbe $T15
;move r2 $-17 	; { r0->$-1* || r1->$-2* || r2->$T15* || r3->$8 }
;LABEL label4 liveout: ; { $13 $11 $12 $7 $8 $-2 $9 $10 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $8
;move r3 $8 	; { r0->$-1* || r1->$-2* || r2-><null> || r3->$8 }
; spilling varialbe $-2
;move r1 $-2 	; { r0->$-1* || r1->$-2* || r2-><null> || r3-><null> }
; spilling varialbe $-1
;move r0 $-1 	; { r0->$-1* || r1-><null> || r2-><null> || r3-><null> }
;label label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI $7 $T16 liveout: ; { $13 $11 $12 $10 a0 $T16 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; ensure(): $T16 gets register r2 { r0-><null> || r1-><null> || r2->$T16 || r3->$7 }
; loading $-18 to register r2
;move $-18 r2 	; { r0-><null> || r1-><null> || r2->$T16 || r3->$7 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T16 || r3->$7 }
;GEI $-1 $T16 label6 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $-1 $9 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-1 gets register r1 { r0-><null> || r1->$-1 || r2->$T16* || r3->$7 }
; loading $-1 to register r1
;move $-1 r1 	; { r0-><null> || r1->$-1 || r2->$T16* || r3->$7 }
; ensure(): $T16 has register r2
;cmpi r1 r2 	; { r0-><null> || r1->$-1 || r2->$T16* || r3->$7 }
; spilling registers at the end of Basic Block
; spilling varialbe $7
;move r3 $7 	; { r0-><null> || r1->$-1 || r2->$T16* || r3->$7 }
; spilling varialbe $T16
;move r2 $-18 	; { r0-><null> || r1->$-1 || r2->$T16* || r3-><null> }
; spilling varialbe $-1
;move r1 $-1 	; { r0-><null> || r1->$-1 || r2-><null> || r3-><null> }
;jge label6 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r1
; freeing unused variable r2
;PUSH $13 liveout: ; { $13 $11 $12 $10 a0 $7 $-2 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $13 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
; loading $13 to register r3
;move $13 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
;PUSH $12 liveout: ; { $13 $11 $12 $10 a0 $7 $-2 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $12 gets register r2 { r0-><null> || r1-><null> || r2->$12 || r3->$13 }
; loading $12 to register r2
;move $12 r2 	; { r0-><null> || r1-><null> || r2->$12 || r3->$13 }
;push r2 	; { r0-><null> || r1-><null> || r2->$12 || r3->$13 }
;PUSH $11 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $11 gets register r1 { r0-><null> || r1->$11 || r2->$12 || r3->$13 }
; loading $11 to register r1
;move $11 r1 	; { r0-><null> || r1->$11 || r2->$12 || r3->$13 }
;push r1 	; { r0-><null> || r1->$11 || r2->$12 || r3->$13 }
;PUSH $10 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $10 gets register r0 { r0->$10 || r1->$11 || r2->$12 || r3->$13 }
; loading $10 to register r0
;move $10 r0 	; { r0->$10 || r1->$11 || r2->$12 || r3->$13 }
;push r0 	; { r0->$10 || r1->$11 || r2->$12 || r3->$13 }
;PUSH $9 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $9
; ensure(): $9 gets register r0 { r0->$9 || r1->$11 || r2->$12 || r3->$13 }
; loading $9 to register r0
;move $9 r0 	; { r0->$9 || r1->$11 || r2->$12 || r3->$13 }
;push r0 	; { r0->$9 || r1->$11 || r2->$12 || r3->$13 }
;PUSH $8 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $8
; ensure(): $8 gets register r0 { r0->$8 || r1->$11 || r2->$12 || r3->$13 }
; loading $8 to register r0
;move $8 r0 	; { r0->$8 || r1->$11 || r2->$12 || r3->$13 }
;push r0 	; { r0->$8 || r1->$11 || r2->$12 || r3->$13 }
;PUSH $-1 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $-1
; ensure(): $-1 gets register r0 { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
; loading $-1 to register r0
;move $-1 r0 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;push r0 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;PUSH  liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;PUSHREG liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;push r1 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;push r2 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;push r3 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;JSR GetValue liveout: ; { $13 $11 $12 $10 a0 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;jsr GetValue 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;POPREG liveout: ; { $13 $11 $12 $10 a0 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;pop r2 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;pop r1 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;pop r0 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;POP $T17 liveout: ; { $13 $11 $12 $10 a0 $T17 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $T17
; ensure(): $T17 gets register r0 { r0->$T17 || r1->$11 || r2->$12 || r3->$13 }
; loading $-19 to register r0
;move $-19 r0 	; { r0->$T17 || r1->$11 || r2->$12 || r3->$13 }
;pop r0 	; { r0->$T17 || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T17 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T17* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T17 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T17* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T17 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T17* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T17 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T17* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T17 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T17* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T17 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T17* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T17 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T17* || r1->$11 || r2->$12 || r3->$13 }
;GEF $T17 $-2 label7 liveout: ; { $13 $11 $12 $10 a0 $7 $-2 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T17 has register r0
; freeing unused variable r1
; allocate() has to spill $-2
; ensure(): $-2 gets register r1 { r0->$T17* || r1->$-2 || r2->$12 || r3->$13 }
; loading $-2 to register r1
;move $-2 r1 	; { r0->$T17* || r1->$-2 || r2->$12 || r3->$13 }
;cmpr r0 r1 	; { r0->$T17* || r1->$-2 || r2->$12 || r3->$13 }
; spilling registers at the end of Basic Block
; spilling varialbe $13
;move r3 $13 	; { r0->$T17* || r1->$-2 || r2->$12 || r3->$13 }
; spilling varialbe $12
;move r2 $12 	; { r0->$T17* || r1->$-2 || r2->$12 || r3-><null> }
; spilling varialbe $-2
;move r1 $-2 	; { r0->$T17* || r1->$-2 || r2-><null> || r3-><null> }
; spilling varialbe $T17
;move r0 $-19 	; { r0->$T17* || r1-><null> || r2-><null> || r3-><null> }
;jge label7 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r0
; freeing unused variable r1
;PUSH $13 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $13 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
; loading $13 to register r3
;move $13 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
;PUSH $12 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $12 gets register r2 { r0-><null> || r1-><null> || r2->$12 || r3->$13 }
; loading $12 to register r2
;move $12 r2 	; { r0-><null> || r1-><null> || r2->$12 || r3->$13 }
;push r2 	; { r0-><null> || r1-><null> || r2->$12 || r3->$13 }
;PUSH $11 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $11 gets register r1 { r0-><null> || r1->$11 || r2->$12 || r3->$13 }
; loading $11 to register r1
;move $11 r1 	; { r0-><null> || r1->$11 || r2->$12 || r3->$13 }
;push r1 	; { r0-><null> || r1->$11 || r2->$12 || r3->$13 }
;PUSH $10 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $10 gets register r0 { r0->$10 || r1->$11 || r2->$12 || r3->$13 }
; loading $10 to register r0
;move $10 r0 	; { r0->$10 || r1->$11 || r2->$12 || r3->$13 }
;push r0 	; { r0->$10 || r1->$11 || r2->$12 || r3->$13 }
;PUSH $9 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $9
; ensure(): $9 gets register r0 { r0->$9 || r1->$11 || r2->$12 || r3->$13 }
; loading $9 to register r0
;move $9 r0 	; { r0->$9 || r1->$11 || r2->$12 || r3->$13 }
;push r0 	; { r0->$9 || r1->$11 || r2->$12 || r3->$13 }
;PUSH $8 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $8
; ensure(): $8 gets register r0 { r0->$8 || r1->$11 || r2->$12 || r3->$13 }
; loading $8 to register r0
;move $8 r0 	; { r0->$8 || r1->$11 || r2->$12 || r3->$13 }
;push r0 	; { r0->$8 || r1->$11 || r2->$12 || r3->$13 }
;PUSH $-1 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $-1
; ensure(): $-1 gets register r0 { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
; loading $-1 to register r0
;move $-1 r0 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;push r0 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;PUSH  liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;PUSHREG liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;push r1 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;push r2 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;push r3 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;JSR GetValue liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;jsr GetValue 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;POPREG liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;pop r2 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;pop r1 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;pop r0 	; { r0->$-1 || r1->$11 || r2->$12 || r3->$13 }
;POP $T18 liveout: ; { $13 $11 $12 $10 a0 $T18 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $T18
; ensure(): $T18 gets register r0 { r0->$T18 || r1->$11 || r2->$12 || r3->$13 }
; loading $-20 to register r0
;move $-20 r0 	; { r0->$T18 || r1->$11 || r2->$12 || r3->$13 }
;pop r0 	; { r0->$T18 || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T18 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T18* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T18 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T18* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T18 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T18* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T18 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T18* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T18 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T18* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T18 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T18* || r1->$11 || r2->$12 || r3->$13 }
;POP  liveout: ; { $13 $11 $12 $10 a0 $T18 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T18* || r1->$11 || r2->$12 || r3->$13 }
;STOREF $T18 $-2 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T18 has register r0
; freeing unused variable r1
; allocate() has to spill $-2
; ensure(): $-2 gets register r1 { r0->$T18* || r1->$-2 || r2->$12 || r3->$13 }
; loading $-2 to register r1
;move $-2 r1 	; { r0->$T18* || r1->$-2 || r2->$12 || r3->$13 }
;move r0 r1 	; { r0->$T18* || r1->$-2 || r2->$12 || r3->$13 }
; freeing unused variable r0
; spilling varialbe $T18
;move r0 $-20 	; { r0->$T18* || r1->$-2* || r2->$12 || r3->$13 }
;JUMP label8 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $13
;move r3 $13 	; { r0-><null> || r1->$-2* || r2->$12 || r3->$13 }
; spilling varialbe $12
;move r2 $12 	; { r0-><null> || r1->$-2* || r2->$12 || r3-><null> }
; spilling varialbe $-2
;move r1 $-2 	; { r0-><null> || r1->$-2* || r2-><null> || r3-><null> }
;jmp label8 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label7 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label7 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label8 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label8 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSH $-1 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; freeing unused variable r3
;PUSH  liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSHREG liveout: ; { $13 $11 $12 $10 a0 $7 $8 $-2 $9 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JSR Incre liveout: ; { $13 $11 $12 $7 $8 $-2 $9 $10 a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;jsr Incre 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { $13 $11 $12 $7 $8 $-2 $9 $10 a0 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T19 liveout: ; { $13 $11 $12 $7 $T19 $8 $-2 $9 $10 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T19 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T19 }
; loading $-21 to register r3
;move $-21 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T19 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T19 }
;POP  liveout: ; { $13 $11 $12 $7 $T19 $8 $-2 $9 $10 a0 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T19* }
;STOREI $T19 $-1 liveout: ; { $13 $11 $12 $7 $8 $-2 $9 $10 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T19 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T19* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T19* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T19* }
; freeing unused variable r3
; spilling varialbe $T19
;move r3 $-21 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T19* }
;JUMP label4 liveout: ; { $13 $11 $12 $7 $8 $-2 $9 $10 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;jmp label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label6 liveout: ; { $-2 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label6 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF $-2 $T20 liveout: ; { a0 $T20 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-2 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; loading $-2 to register r3
;move $-2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; ensure(): $T20 gets register r2 { r0-><null> || r1-><null> || r2->$T20 || r3->$-2 }
; loading $-22 to register r2
;move $-22 r2 	; { r0-><null> || r1-><null> || r2->$T20 || r3->$-2 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T20 || r3->$-2 }
; freeing unused variable r3
;STOREF $T20 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T20 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T20* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T20
;move r2 $-22 	; { r0-><null> || r1-><null> || r2->$T20* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL FindIndex liveout: ; { $13 $14 $11 $12 $7 $8 $9 $10 a0 a1 a2 a3 a4 a5 fmax  }
;label FindIndex 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 2 liveout: ; { $13 $14 $11 $12 $7 $8 $9 $10 a0 a1 a2 a3 a4 a5 fmax  }
;link 77 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T21 liveout: ; { $13 $14 $11 $12 $7 $8 $9 $10 a0 $T21 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T21 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
; loading $-22 to register r3
;move $-22 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
;STOREI $T21 $-1 liveout: ; { $13 $14 $11 $12 $7 $8 $9 $10 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T21 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T21* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T21* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T21* }
; freeing unused variable r3
; spilling varialbe $T21
;move r3 $-22 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T21* }
;LABEL label9 liveout: ; { $13 $14 $11 $12 $7 $8 $9 $10 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;label label9 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI $7 $T22 liveout: ; { $13 $14 $11 $12 $10 a0 $T22 $7 $8 $-1 $9 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; ensure(): $T22 gets register r2 { r0-><null> || r1-><null> || r2->$T22 || r3->$7 }
; loading $-23 to register r2
;move $-23 r2 	; { r0-><null> || r1-><null> || r2->$T22 || r3->$7 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T22 || r3->$7 }
;GEI $-1 $T22 label11 liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-1 gets register r1 { r0-><null> || r1->$-1 || r2->$T22* || r3->$7 }
; loading $-1 to register r1
;move $-1 r1 	; { r0-><null> || r1->$-1 || r2->$T22* || r3->$7 }
; ensure(): $T22 has register r2
;cmpi r1 r2 	; { r0-><null> || r1->$-1 || r2->$T22* || r3->$7 }
; spilling registers at the end of Basic Block
; spilling varialbe $7
;move r3 $7 	; { r0-><null> || r1->$-1 || r2->$T22* || r3->$7 }
; spilling varialbe $T22
;move r2 $-23 	; { r0-><null> || r1->$-1 || r2->$T22* || r3-><null> }
; spilling varialbe $-1
;move r1 $-1 	; { r0-><null> || r1->$-1 || r2-><null> || r3-><null> }
;jge label11 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r1
; freeing unused variable r2
;PUSH $14 liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $14 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
; loading $14 to register r3
;move $14 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
;PUSH $13 liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $13 gets register r2 { r0-><null> || r1-><null> || r2->$13 || r3->$14 }
; loading $13 to register r2
;move $13 r2 	; { r0-><null> || r1-><null> || r2->$13 || r3->$14 }
;push r2 	; { r0-><null> || r1-><null> || r2->$13 || r3->$14 }
;PUSH $12 liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $12 gets register r1 { r0-><null> || r1->$12 || r2->$13 || r3->$14 }
; loading $12 to register r1
;move $12 r1 	; { r0-><null> || r1->$12 || r2->$13 || r3->$14 }
;push r1 	; { r0-><null> || r1->$12 || r2->$13 || r3->$14 }
;PUSH $11 liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $11 gets register r0 { r0->$11 || r1->$12 || r2->$13 || r3->$14 }
; loading $11 to register r0
;move $11 r0 	; { r0->$11 || r1->$12 || r2->$13 || r3->$14 }
;push r0 	; { r0->$11 || r1->$12 || r2->$13 || r3->$14 }
;PUSH $10 liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $10
; ensure(): $10 gets register r0 { r0->$10 || r1->$12 || r2->$13 || r3->$14 }
; loading $10 to register r0
;move $10 r0 	; { r0->$10 || r1->$12 || r2->$13 || r3->$14 }
;push r0 	; { r0->$10 || r1->$12 || r2->$13 || r3->$14 }
;PUSH $9 liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $9
; ensure(): $9 gets register r0 { r0->$9 || r1->$12 || r2->$13 || r3->$14 }
; loading $9 to register r0
;move $9 r0 	; { r0->$9 || r1->$12 || r2->$13 || r3->$14 }
;push r0 	; { r0->$9 || r1->$12 || r2->$13 || r3->$14 }
;PUSH $-1 liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $-1
; ensure(): $-1 gets register r0 { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
; loading $-1 to register r0
;move $-1 r0 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;push r0 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;PUSH  liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;PUSHREG liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;push r1 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;push r2 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;push r3 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;JSR GetValue liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;jsr GetValue 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;POPREG liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;pop r2 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;pop r1 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;pop r0 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;POP $T25 liveout: ; { $13 $14 $11 $12 $10 a0 $T25 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $T25
; ensure(): $T25 gets register r0 { r0->$T25 || r1->$12 || r2->$13 || r3->$14 }
; loading $-26 to register r0
;move $-26 r0 	; { r0->$T25 || r1->$12 || r2->$13 || r3->$14 }
;pop r0 	; { r0->$T25 || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T25 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T25* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T25 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T25* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T25 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T25* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T25 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T25* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T25 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T25* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T25 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T25* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T25 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T25* || r1->$12 || r2->$13 || r3->$14 }
;PUSH $T25 liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T25 has register r0
;push r0 	; { r0->$T25* || r1->$12 || r2->$13 || r3->$14 }
; freeing unused variable r0
; spilling varialbe $T25
;move r0 $-26 	; { r0->$T25* || r1->$12 || r2->$13 || r3->$14 }
;PUSH $8 liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; ensure(): $8 gets register r0 { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
; loading $8 to register r0
;move $8 r0 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;push r0 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;PUSH  liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;PUSHREG liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;push r1 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;push r2 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;push r3 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;JSR IsEqual liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;jsr IsEqual 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;POPREG liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;pop r2 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;pop r1 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;pop r0 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;POP $T26 liveout: ; { $13 $14 $11 $12 $10 a0 $T26 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $T26
; ensure(): $T26 gets register r0 { r0->$T26 || r1->$12 || r2->$13 || r3->$14 }
; loading $-27 to register r0
;move $-27 r0 	; { r0->$T26 || r1->$12 || r2->$13 || r3->$14 }
;pop r0 	; { r0->$T26 || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T26 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T26* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T26 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$T26* || r1->$12 || r2->$13 || r3->$14 }
;STOREI 1 $T27 liveout: ; { $13 $14 $11 $12 $10 a0 $T27 $T26 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; spilling varialbe $T26
;move r0 $-27 	; { r0->$T26* || r1->$12 || r2->$13 || r3->$14 }
; allocate() has to spill $T27
; ensure(): $T27 gets register r0 { r0->$T27 || r1->$12 || r2->$13 || r3->$14 }
; loading $-28 to register r0
;move $-28 r0 	; { r0->$T27 || r1->$12 || r2->$13 || r3->$14 }
;move 1 r0 	; { r0->$T27 || r1->$12 || r2->$13 || r3->$14 }
;NEI $T26 $T27 label12 liveout: ; { $13 $14 $11 $12 $10 a0 $7 $8 $9 $-1 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r1
; allocate() has to spill $T26
; ensure(): $T26 gets register r1 { r0->$T27* || r1->$T26 || r2->$13 || r3->$14 }
; loading $-27 to register r1
;move $-27 r1 	; { r0->$T27* || r1->$T26 || r2->$13 || r3->$14 }
; ensure(): $T27 has register r0
;cmpi r1 r0 	; { r0->$T27* || r1->$T26 || r2->$13 || r3->$14 }
; spilling registers at the end of Basic Block
; spilling varialbe $14
;move r3 $14 	; { r0->$T27* || r1->$T26 || r2->$13 || r3->$14 }
; spilling varialbe $13
;move r2 $13 	; { r0->$T27* || r1->$T26 || r2->$13 || r3-><null> }
; spilling varialbe $T26
;move r1 $-27 	; { r0->$T27* || r1->$T26 || r2-><null> || r3-><null> }
; spilling varialbe $T27
;move r0 $-28 	; { r0->$T27* || r1-><null> || r2-><null> || r3-><null> }
;jne label12 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r1
; freeing unused variable r0
;STOREI $-1 $T28 liveout: ; { a0 a1 a2 a3 a4 a5 fmax $T28  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; ensure(): $T28 gets register r2 { r0-><null> || r1-><null> || r2->$T28 || r3->$-1 }
; loading $-29 to register r2
;move $-29 r2 	; { r0-><null> || r1-><null> || r2->$T28 || r3->$-1 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T28 || r3->$-1 }
; freeing unused variable r3
;STOREI $T28 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T28 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T28* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T28
;move r2 $-29 	; { r0-><null> || r1-><null> || r2->$T28* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label13 liveout: ; { $13 $14 $11 $12 $7 $8 $9 $10 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;jmp label13 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label12 liveout: ; { $13 $14 $11 $12 $7 $8 $9 $10 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label12 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label13 liveout: ; { $13 $14 $11 $12 $7 $8 $9 $10 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label13 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T23 liveout: ; { $13 $14 $11 $12 $7 $8 $9 $10 $-1 a0 a1 $T23 a2 a3 a4 a5 fmax  }
; ensure(): $T23 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T23 }
; loading $-24 to register r3
;move $-24 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T23 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T23 }
;ADDI $-1 $T23 $T24 liveout: ; { $13 $14 $11 $12 $10 a0 $T24 $7 $8 $9 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T23* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T23* }
; ensure(): $T23 has register r3
; switching owner of register $-1 to $T24 { r0-><null> || r1-><null> || r2->$-1 || r3->$T23* }
;addi r3 r2 	; { r0-><null> || r1-><null> || r2->$T24 || r3->$T23* }
; freeing unused variable r3
; spilling varialbe $T23
;move r3 $-24 	; { r0-><null> || r1-><null> || r2->$T24* || r3->$T23* }
;STOREI $T24 $-1 liveout: ; { $13 $14 $11 $12 $7 $8 $9 $10 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T24 has register r2
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2->$T24* || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2->$T24* || r3->$-1 }
;move r2 r3 	; { r0-><null> || r1-><null> || r2->$T24* || r3->$-1 }
; freeing unused variable r2
; spilling varialbe $T24
;move r2 $-25 	; { r0-><null> || r1-><null> || r2->$T24* || r3->$-1* }
;JUMP label9 liveout: ; { $13 $14 $11 $12 $7 $8 $9 $10 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1* }
;jmp label9 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label11 liveout: ; { $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label11 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI $-1 $T29 liveout: ; { a0 a1 a2 a3 a4 a5 fmax $T29  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; ensure(): $T29 gets register r2 { r0-><null> || r1-><null> || r2->$T29 || r3->$-1 }
; loading $-30 to register r2
;move $-30 r2 	; { r0-><null> || r1-><null> || r2->$T29 || r3->$-1 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T29 || r3->$-1 }
; freeing unused variable r3
;STOREI $T29 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T29 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T29* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T29
;move r2 $-30 	; { r0-><null> || r1-><null> || r2->$T29* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL IsEqual liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
;label IsEqual 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
;link 76 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSH $8 liveout: ; { $7 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; freeing unused variable r3
;PUSH $7 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; freeing unused variable r3
;PUSH  liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSHREG liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JSR IsNotEqual liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;jsr IsNotEqual 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T30 liveout: ; { a0 a1 $T30 a2 a3 a4 a5 fmax  }
; ensure(): $T30 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T30 }
; loading $-30 to register r3
;move $-30 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T30 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T30 }
;POP  liveout: ; { a0 a1 $T30 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T30* }
;POP  liveout: ; { a0 a1 $T30 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T30* }
;STOREI 0 $T31 liveout: ; { a0 a1 $T30 a2 a3 a4 $T31 a5 fmax  }
; ensure(): $T31 gets register r2 { r0-><null> || r1-><null> || r2->$T31 || r3->$T30* }
; loading $-31 to register r2
;move $-31 r2 	; { r0-><null> || r1-><null> || r2->$T31 || r3->$T30* }
;move 0 r2 	; { r0-><null> || r1-><null> || r2->$T31 || r3->$T30* }
;NEI $T30 $T31 label14 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T30 has register r3
; ensure(): $T31 has register r2
;cmpi r3 r2 	; { r0-><null> || r1-><null> || r2->$T31* || r3->$T30* }
; spilling registers at the end of Basic Block
; spilling varialbe $T30
;move r3 $-30 	; { r0-><null> || r1-><null> || r2->$T31* || r3->$T30* }
; spilling varialbe $T31
;move r2 $-31 	; { r0-><null> || r1-><null> || r2->$T31* || r3-><null> }
;jne label14 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r2
;STOREI 1 $T32 liveout: ; { a0 a1 a2 a3 $T32 a4 a5 fmax  }
; ensure(): $T32 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T32 }
; loading $-32 to register r3
;move $-32 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T32 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T32 }
;STOREI $T32 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T32 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T32* }
; freeing unused variable r3
; spilling varialbe $T32
;move r3 $-32 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T32* }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label15 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;jmp label15 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label14 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label14 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label15 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label15 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T33 liveout: ; { $T33 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T33 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T33 }
; loading $-33 to register r3
;move $-33 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T33 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T33 }
;STOREI $T33 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T33 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T33* }
; freeing unused variable r3
; spilling varialbe $T33
;move r3 $-33 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T33* }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL IsNotEqual liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
;label IsNotEqual 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
;link 76 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF $8 $T34 liveout: ; { $7 $T34 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T34 gets register r2 { r0-><null> || r1-><null> || r2->$T34 || r3->$8 }
; loading $-34 to register r2
;move $-34 r2 	; { r0-><null> || r1-><null> || r2->$T34 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T34 || r3->$8 }
; freeing unused variable r3
;EQF $7 $T34 label16 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2->$T34* || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2->$T34* || r3->$7 }
; ensure(): $T34 has register r2
;cmpr r3 r2 	; { r0-><null> || r1-><null> || r2->$T34* || r3->$7 }
; spilling registers at the end of Basic Block
; spilling varialbe $7
;move r3 $7 	; { r0-><null> || r1-><null> || r2->$T34* || r3->$7 }
; spilling varialbe $T34
;move r2 $-34 	; { r0-><null> || r1-><null> || r2->$T34* || r3-><null> }
;jeq label16 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r2
;STOREI 1 $T35 liveout: ; { a0 $T35 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T35 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T35 }
; loading $-35 to register r3
;move $-35 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T35 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T35 }
;STOREI $T35 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T35 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T35* }
; freeing unused variable r3
; spilling varialbe $T35
;move r3 $-35 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T35* }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label17 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;jmp label17 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label16 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label16 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label17 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label17 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T36 liveout: ; { a0 $T36 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T36 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T36 }
; loading $-36 to register r3
;move $-36 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T36 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T36 }
;STOREI $T36 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T36 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T36* }
; freeing unused variable r3
; spilling varialbe $T36
;move r3 $-36 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T36* }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL GetValue liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 a1 a2 a3 a4 a5 fmax  }
;label GetValue 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 a1 a2 a3 a4 a5 fmax  }
;link 76 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T37 liveout: ; { $13 $11 $12 $10 a0 $T37 $7 $8 $9 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T37 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T37 }
; loading $-37 to register r3
;move $-37 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T37 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T37 }
;NEI $7 $T37 label18 liveout: ; { $13 $11 $12 $10 a0 $7 $8 $9 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T37* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T37* }
; ensure(): $T37 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T37* }
; spilling registers at the end of Basic Block
; spilling varialbe $T37
;move r3 $-37 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T37* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label18 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $8 $T38 liveout: ; { $T38 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T38 gets register r2 { r0-><null> || r1-><null> || r2->$T38 || r3->$8 }
; loading $-38 to register r2
;move $-38 r2 	; { r0-><null> || r1-><null> || r2->$T38 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T38 || r3->$8 }
; freeing unused variable r3
;STOREF $T38 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T38 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T38* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T38
;move r2 $-38 	; { r0-><null> || r1-><null> || r2->$T38* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label19 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;jmp label19 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label18 liveout: ; { $13 $11 $12 $7 $10 $9 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label18 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T39 liveout: ; { $13 $11 $12 $10 a0 $T39 $7 $9 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T39 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T39 }
; loading $-39 to register r3
;move $-39 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T39 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T39 }
;NEI $7 $T39 label20 liveout: ; { $13 $11 $12 $7 $10 $9 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T39* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T39* }
; ensure(): $T39 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T39* }
; spilling registers at the end of Basic Block
; spilling varialbe $T39
;move r3 $-39 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T39* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label20 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $9 $T40 liveout: ; { a0 a1 a2 a3 a4 $T40 a5 fmax  }
; ensure(): $9 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$9 }
; loading $9 to register r3
;move $9 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$9 }
; ensure(): $T40 gets register r2 { r0-><null> || r1-><null> || r2->$T40 || r3->$9 }
; loading $-40 to register r2
;move $-40 r2 	; { r0-><null> || r1-><null> || r2->$T40 || r3->$9 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T40 || r3->$9 }
; freeing unused variable r3
;STOREF $T40 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T40 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T40* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T40
;move r2 $-40 	; { r0-><null> || r1-><null> || r2->$T40* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label21 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;jmp label21 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label20 liveout: ; { $13 $11 $12 $7 $10 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label20 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 2 $T41 liveout: ; { $13 $11 $12 $7 $10 a0 a1 a2 a3 $T41 a4 a5 fmax  }
; ensure(): $T41 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T41 }
; loading $-41 to register r3
;move $-41 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T41 }
;move 2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T41 }
;NEI $7 $T41 label22 liveout: ; { $13 $11 $12 $7 $10 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T41* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T41* }
; ensure(): $T41 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T41* }
; spilling registers at the end of Basic Block
; spilling varialbe $T41
;move r3 $-41 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T41* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label22 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $10 $T42 liveout: ; { a0 a1 a2 $T42 a3 a4 a5 fmax  }
; ensure(): $10 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$10 }
; loading $10 to register r3
;move $10 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$10 }
; ensure(): $T42 gets register r2 { r0-><null> || r1-><null> || r2->$T42 || r3->$10 }
; loading $-42 to register r2
;move $-42 r2 	; { r0-><null> || r1-><null> || r2->$T42 || r3->$10 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T42 || r3->$10 }
; freeing unused variable r3
;STOREF $T42 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T42 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T42* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T42
;move r2 $-42 	; { r0-><null> || r1-><null> || r2->$T42* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label23 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;jmp label23 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label22 liveout: ; { $13 $11 $12 $7 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label22 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 3 $T43 liveout: ; { $13 $11 $12 $7 a0 a1 $T43 a2 a3 a4 a5 fmax  }
; ensure(): $T43 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T43 }
; loading $-43 to register r3
;move $-43 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T43 }
;move 3 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T43 }
;NEI $7 $T43 label24 liveout: ; { $13 $11 $12 $7 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T43* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T43* }
; ensure(): $T43 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T43* }
; spilling registers at the end of Basic Block
; spilling varialbe $T43
;move r3 $-43 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T43* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label24 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $11 $T44 liveout: ; { a0 $T44 a1 a2 a3 a4 a5 fmax  }
; ensure(): $11 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$11 }
; loading $11 to register r3
;move $11 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$11 }
; ensure(): $T44 gets register r2 { r0-><null> || r1-><null> || r2->$T44 || r3->$11 }
; loading $-44 to register r2
;move $-44 r2 	; { r0-><null> || r1-><null> || r2->$T44 || r3->$11 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T44 || r3->$11 }
; freeing unused variable r3
;STOREF $T44 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T44 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T44* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T44
;move r2 $-44 	; { r0-><null> || r1-><null> || r2->$T44* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label25 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;jmp label25 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label24 liveout: ; { $13 $12 $7 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label24 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 4 $T45 liveout: ; { $13 $12 $7 a0 $T45 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T45 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T45 }
; loading $-45 to register r3
;move $-45 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T45 }
;move 4 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T45 }
;NEI $7 $T45 label26 liveout: ; { $13 $7 $12 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T45* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T45* }
; ensure(): $T45 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T45* }
; spilling registers at the end of Basic Block
; spilling varialbe $T45
;move r3 $-45 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T45* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label26 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $12 $T46 liveout: ; { $T46 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $12 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$12 }
; loading $12 to register r3
;move $12 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$12 }
; ensure(): $T46 gets register r2 { r0-><null> || r1-><null> || r2->$T46 || r3->$12 }
; loading $-46 to register r2
;move $-46 r2 	; { r0-><null> || r1-><null> || r2->$T46 || r3->$12 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T46 || r3->$12 }
; freeing unused variable r3
;STOREF $T46 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T46 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T46* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T46
;move r2 $-46 	; { r0-><null> || r1-><null> || r2->$T46* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label27 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;jmp label27 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label26 liveout: ; { $13 $7 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label26 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 5 $T47 liveout: ; { $13 $7 $T47 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T47 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T47 }
; loading $-47 to register r3
;move $-47 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T47 }
;move 5 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T47 }
;NEI $7 $T47 label28 liveout: ; { $13 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T47* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T47* }
; ensure(): $T47 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T47* }
; spilling registers at the end of Basic Block
; spilling varialbe $T47
;move r3 $-47 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T47* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label28 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $13 $T48 liveout: ; { $T48 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $13 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
; loading $13 to register r3
;move $13 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
; ensure(): $T48 gets register r2 { r0-><null> || r1-><null> || r2->$T48 || r3->$13 }
; loading $-48 to register r2
;move $-48 r2 	; { r0-><null> || r1-><null> || r2->$T48 || r3->$13 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T48 || r3->$13 }
; freeing unused variable r3
;STOREF $T48 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T48 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T48* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T48
;move r2 $-48 	; { r0-><null> || r1-><null> || r2->$T48* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label29 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;jmp label29 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label28 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label28 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label29 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label29 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label27 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label27 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label25 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label25 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label23 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label23 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label21 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label21 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label19 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label19 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL SetAValue liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
;label SetAValue 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
;link 76 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T49 liveout: ; { $T49 $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T49 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T49 }
; loading $-49 to register r3
;move $-49 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T49 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T49 }
;NEI $7 $T49 label30 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T49* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T49* }
; ensure(): $T49 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T49* }
; spilling registers at the end of Basic Block
; spilling varialbe $T49
;move r3 $-49 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T49* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label30 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $8 $T50 liveout: ; { $8 a1 a2 a3 $T50 a4 a5 fmax  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T50 gets register r2 { r0-><null> || r1-><null> || r2->$T50 || r3->$8 }
; loading $-50 to register r2
;move $-50 r2 	; { r0-><null> || r1-><null> || r2->$T50 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T50 || r3->$8 }
;STOREF $T50 a0 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T50 has register r2
; ensure(): a0 gets register r1 { r0-><null> || r1->a0 || r2->$T50* || r3->$8 }
; loading a0 to register r1
;move a0 r1 	; { r0-><null> || r1->a0 || r2->$T50* || r3->$8 }
;move r2 r1 	; { r0-><null> || r1->a0 || r2->$T50* || r3->$8 }
; freeing unused variable r2
; spilling varialbe $T50
;move r2 $-50 	; { r0-><null> || r1->a0* || r2->$T50* || r3->$8 }
;JUMP label31 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $8
;move r3 $8 	; { r0-><null> || r1->a0* || r2-><null> || r3->$8 }
; spilling varialbe a0
;move r1 a0 	; { r0-><null> || r1->a0* || r2-><null> || r3-><null> }
;jmp label31 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label30 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label30 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T51 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 $T51 fmax  }
; ensure(): $T51 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T51 }
; loading $-51 to register r3
;move $-51 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T51 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T51 }
;NEI $7 $T51 label32 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T51* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T51* }
; ensure(): $T51 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T51* }
; spilling registers at the end of Basic Block
; spilling varialbe $T51
;move r3 $-51 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T51* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label32 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $8 $T52 liveout: ; { $8 a0 a2 a3 a4 a5 $T52 fmax  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T52 gets register r2 { r0-><null> || r1-><null> || r2->$T52 || r3->$8 }
; loading $-52 to register r2
;move $-52 r2 	; { r0-><null> || r1-><null> || r2->$T52 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T52 || r3->$8 }
;STOREF $T52 a1 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T52 has register r2
; ensure(): a1 gets register r1 { r0-><null> || r1->a1 || r2->$T52* || r3->$8 }
; loading a1 to register r1
;move a1 r1 	; { r0-><null> || r1->a1 || r2->$T52* || r3->$8 }
;move r2 r1 	; { r0-><null> || r1->a1 || r2->$T52* || r3->$8 }
; freeing unused variable r2
; spilling varialbe $T52
;move r2 $-52 	; { r0-><null> || r1->a1* || r2->$T52* || r3->$8 }
;JUMP label33 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $8
;move r3 $8 	; { r0-><null> || r1->a1* || r2-><null> || r3->$8 }
; spilling varialbe a1
;move r1 a1 	; { r0-><null> || r1->a1* || r2-><null> || r3-><null> }
;jmp label33 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label32 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label32 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 2 $T53 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax $T53  }
; ensure(): $T53 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T53 }
; loading $-53 to register r3
;move $-53 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T53 }
;move 2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T53 }
;NEI $7 $T53 label34 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T53* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T53* }
; ensure(): $T53 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T53* }
; spilling registers at the end of Basic Block
; spilling varialbe $T53
;move r3 $-53 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T53* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label34 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $8 $T54 liveout: ; { $8 a0 a1 a3 a4 a5 fmax $T54  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T54 gets register r2 { r0-><null> || r1-><null> || r2->$T54 || r3->$8 }
; loading $-54 to register r2
;move $-54 r2 	; { r0-><null> || r1-><null> || r2->$T54 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T54 || r3->$8 }
;STOREF $T54 a2 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T54 has register r2
; ensure(): a2 gets register r1 { r0-><null> || r1->a2 || r2->$T54* || r3->$8 }
; loading a2 to register r1
;move a2 r1 	; { r0-><null> || r1->a2 || r2->$T54* || r3->$8 }
;move r2 r1 	; { r0-><null> || r1->a2 || r2->$T54* || r3->$8 }
; freeing unused variable r2
; spilling varialbe $T54
;move r2 $-54 	; { r0-><null> || r1->a2* || r2->$T54* || r3->$8 }
;JUMP label35 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $8
;move r3 $8 	; { r0-><null> || r1->a2* || r2-><null> || r3->$8 }
; spilling varialbe a2
;move r1 a2 	; { r0-><null> || r1->a2* || r2-><null> || r3-><null> }
;jmp label35 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label34 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label34 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 3 $T55 liveout: ; { $T55 $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T55 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T55 }
; loading $-55 to register r3
;move $-55 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T55 }
;move 3 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T55 }
;NEI $7 $T55 label36 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T55* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T55* }
; ensure(): $T55 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T55* }
; spilling registers at the end of Basic Block
; spilling varialbe $T55
;move r3 $-55 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T55* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label36 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $8 $T56 liveout: ; { $T56 $8 a0 a1 a2 a4 a5 fmax  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T56 gets register r2 { r0-><null> || r1-><null> || r2->$T56 || r3->$8 }
; loading $-56 to register r2
;move $-56 r2 	; { r0-><null> || r1-><null> || r2->$T56 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T56 || r3->$8 }
;STOREF $T56 a3 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T56 has register r2
; ensure(): a3 gets register r1 { r0-><null> || r1->a3 || r2->$T56* || r3->$8 }
; loading a3 to register r1
;move a3 r1 	; { r0-><null> || r1->a3 || r2->$T56* || r3->$8 }
;move r2 r1 	; { r0-><null> || r1->a3 || r2->$T56* || r3->$8 }
; freeing unused variable r2
; spilling varialbe $T56
;move r2 $-56 	; { r0-><null> || r1->a3* || r2->$T56* || r3->$8 }
;JUMP label37 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $8
;move r3 $8 	; { r0-><null> || r1->a3* || r2-><null> || r3->$8 }
; spilling varialbe a3
;move r1 a3 	; { r0-><null> || r1->a3* || r2-><null> || r3-><null> }
;jmp label37 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label36 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label36 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 4 $T57 liveout: ; { $T57 $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T57 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T57 }
; loading $-57 to register r3
;move $-57 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T57 }
;move 4 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T57 }
;NEI $7 $T57 label38 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T57* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T57* }
; ensure(): $T57 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T57* }
; spilling registers at the end of Basic Block
; spilling varialbe $T57
;move r3 $-57 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T57* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label38 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $8 $T58 liveout: ; { $T58 $8 a0 a1 a2 a3 a5 fmax  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T58 gets register r2 { r0-><null> || r1-><null> || r2->$T58 || r3->$8 }
; loading $-58 to register r2
;move $-58 r2 	; { r0-><null> || r1-><null> || r2->$T58 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T58 || r3->$8 }
;STOREF $T58 a4 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T58 has register r2
; ensure(): a4 gets register r1 { r0-><null> || r1->a4 || r2->$T58* || r3->$8 }
; loading a4 to register r1
;move a4 r1 	; { r0-><null> || r1->a4 || r2->$T58* || r3->$8 }
;move r2 r1 	; { r0-><null> || r1->a4 || r2->$T58* || r3->$8 }
; freeing unused variable r2
; spilling varialbe $T58
;move r2 $-58 	; { r0-><null> || r1->a4* || r2->$T58* || r3->$8 }
;JUMP label39 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $8
;move r3 $8 	; { r0-><null> || r1->a4* || r2-><null> || r3->$8 }
; spilling varialbe a4
;move r1 a4 	; { r0-><null> || r1->a4* || r2-><null> || r3-><null> }
;jmp label39 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label38 liveout: ; { $7 $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label38 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 5 $T59 liveout: ; { $7 $8 $T59 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T59 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T59 }
; loading $-59 to register r3
;move $-59 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T59 }
;move 5 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T59 }
;NEI $7 $T59 label40 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T59* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T59* }
; ensure(): $T59 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T59* }
; spilling registers at the end of Basic Block
; spilling varialbe $T59
;move r3 $-59 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T59* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label40 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $8 $T60 liveout: ; { $8 a0 a1 a2 $T60 a3 a4 fmax  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T60 gets register r2 { r0-><null> || r1-><null> || r2->$T60 || r3->$8 }
; loading $-60 to register r2
;move $-60 r2 	; { r0-><null> || r1-><null> || r2->$T60 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T60 || r3->$8 }
;STOREF $T60 a5 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T60 has register r2
; ensure(): a5 gets register r1 { r0-><null> || r1->a5 || r2->$T60* || r3->$8 }
; loading a5 to register r1
;move a5 r1 	; { r0-><null> || r1->a5 || r2->$T60* || r3->$8 }
;move r2 r1 	; { r0-><null> || r1->a5 || r2->$T60* || r3->$8 }
; freeing unused variable r2
; spilling varialbe $T60
;move r2 $-60 	; { r0-><null> || r1->a5* || r2->$T60* || r3->$8 }
;JUMP label41 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $8
;move r3 $8 	; { r0-><null> || r1->a5* || r2-><null> || r3->$8 }
; spilling varialbe a5
;move r1 a5 	; { r0-><null> || r1->a5* || r2-><null> || r3-><null> }
;jmp label41 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label40 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label40 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label41 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label41 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label39 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label39 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label37 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label37 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label35 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label35 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label33 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label33 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label31 liveout: ; { $8 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label31 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF $8 $T61 liveout: ; { a0 a1 $T61 a2 a3 a4 a5 fmax  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T61 gets register r2 { r0-><null> || r1-><null> || r2->$T61 || r3->$8 }
; loading $-61 to register r2
;move $-61 r2 	; { r0-><null> || r1-><null> || r2->$T61 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T61 || r3->$8 }
; freeing unused variable r3
;STOREF $T61 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T61 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T61* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T61
;move r2 $-61 	; { r0-><null> || r1-><null> || r2->$T61* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL SYSIN liveout: ; { $T30 fmax  }
;label SYSIN 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 4 liveout: ; { $T30 fmax  }
;link 79 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T62 liveout: ; { $T30 fmax $T62  }
; ensure(): $T62 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T62 }
; loading $-65 to register r3
;move $-65 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T62 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T62 }
;STOREI $T62 $-1 liveout: ; { $T30 fmax  }
; ensure(): $T62 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T62* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T62* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T62* }
; freeing unused variable r3
; spilling varialbe $T62
;move r3 $-65 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T62* }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;STOREI 6 $T63 liveout: ; { $T30 fmax $T63  }
; ensure(): $T63 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T63 }
; loading $-66 to register r3
;move $-66 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T63 }
;move 6 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T63 }
;STOREI $T63 $-2 liveout: ; { $-2 $T30 fmax  }
; ensure(): $T63 has register r3
; ensure(): $-2 gets register r2 { r0-><null> || r1-><null> || r2->$-2 || r3->$T63* }
; loading $-2 to register r2
;move $-2 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T63* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T63* }
; freeing unused variable r3
; spilling varialbe $T63
;move r3 $-66 	; { r0-><null> || r1-><null> || r2->$-2* || r3->$T63* }
;READF a0 liveout: ; { $-2 a0 $T30 fmax  }
; ensure(): a0 gets register r3 { r0-><null> || r1-><null> || r2->$-2* || r3->a0 }
; loading a0 to register r3
;move a0 r3 	; { r0-><null> || r1-><null> || r2->$-2* || r3->a0 }
;sys readr r3 	; { r0-><null> || r1-><null> || r2->$-2* || r3->a0 }
;READF a1 liveout: ; { $-2 a0 a1 $T30 fmax  }
; ensure(): a1 gets register r1 { r0-><null> || r1->a1 || r2->$-2* || r3->a0* }
; loading a1 to register r1
;move a1 r1 	; { r0-><null> || r1->a1 || r2->$-2* || r3->a0* }
;sys readr r1 	; { r0-><null> || r1->a1 || r2->$-2* || r3->a0* }
;READF a2 liveout: ; { $-2 a0 a1 $T30 a2 fmax  }
; ensure(): a2 gets register r0 { r0->a2 || r1->a1* || r2->$-2* || r3->a0* }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->a1* || r2->$-2* || r3->a0* }
;sys readr r0 	; { r0->a2 || r1->a1* || r2->$-2* || r3->a0* }
;READF a3 liveout: ; { $-2 a0 a1 $T30 a2 a3 fmax  }
; freeing unused variable r0
; spilling varialbe a2
;move r0 a2 	; { r0->a2* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->a1* || r2->$-2* || r3->a0* }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->a1* || r2->$-2* || r3->a0* }
;sys readr r0 	; { r0->a3 || r1->a1* || r2->$-2* || r3->a0* }
;READF a4 liveout: ; { $-2 a0 a1 $T30 a2 a3 a4 fmax  }
; freeing unused variable r0
; spilling varialbe a3
;move r0 a3 	; { r0->a3* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill a4
; ensure(): a4 gets register r0 { r0->a4 || r1->a1* || r2->$-2* || r3->a0* }
; loading a4 to register r0
;move a4 r0 	; { r0->a4 || r1->a1* || r2->$-2* || r3->a0* }
;sys readr r0 	; { r0->a4 || r1->a1* || r2->$-2* || r3->a0* }
;READF a5 liveout: ; { $-2 a0 a1 $T30 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; spilling varialbe a4
;move r0 a4 	; { r0->a4* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill a5
; ensure(): a5 gets register r0 { r0->a5 || r1->a1* || r2->$-2* || r3->a0* }
; loading a5 to register r0
;move a5 r0 	; { r0->a5 || r1->a1* || r2->$-2* || r3->a0* }
;sys readr r0 	; { r0->a5 || r1->a1* || r2->$-2* || r3->a0* }
;WRITES inputMessage liveout: ; { $-2 a0 a1 $T30 a2 a3 a4 a5 fmax  }
;sys writes inputMessage 	; { r0->a5* || r1->a1* || r2->$-2* || r3->a0* }
;STOREI 0 $T64 liveout: ; { $-2 a0 a1 $T30 a2 a3 a4 a5 $T64 fmax  }
; freeing unused variable r0
; spilling varialbe a5
;move r0 a5 	; { r0->a5* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill $T64
; ensure(): $T64 gets register r0 { r0->$T64 || r1->a1* || r2->$-2* || r3->a0* }
; loading $-67 to register r0
;move $-67 r0 	; { r0->$T64 || r1->a1* || r2->$-2* || r3->a0* }
;move 0 r0 	; { r0->$T64 || r1->a1* || r2->$-2* || r3->a0* }
;STOREI $T64 $-1 liveout: ; { $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
; ensure(): $T64 has register r0
; freeing unused variable r1
; spilling varialbe a1
;move r1 a1 	; { r0->$T64* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill $-1
; ensure(): $-1 gets register r1 { r0->$T64* || r1->$-1 || r2->$-2* || r3->a0* }
; loading $-1 to register r1
;move $-1 r1 	; { r0->$T64* || r1->$-1 || r2->$-2* || r3->a0* }
;move r0 r1 	; { r0->$T64* || r1->$-1 || r2->$-2* || r3->a0* }
; freeing unused variable r0
; spilling varialbe $T64
;move r0 $-67 	; { r0->$T64* || r1->$-1* || r2->$-2* || r3->a0* }
;LABEL label42 liveout: ; { $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe a0
;move r3 a0 	; { r0-><null> || r1->$-1* || r2->$-2* || r3->a0* }
; spilling varialbe $-2
;move r2 $-2 	; { r0-><null> || r1->$-1* || r2->$-2* || r3-><null> }
; spilling varialbe $-1
;move r1 $-1 	; { r0-><null> || r1->$-1* || r2-><null> || r3-><null> }
;label label42 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 2 $T65 liveout: ; { $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 $T65 fmax  }
; ensure(): $T65 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T65 }
; loading $-68 to register r3
;move $-68 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T65 }
;move 2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T65 }
;DIVI $-2 $T65 $T66 liveout: ; { $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
; ensure(): $-2 gets register r2 { r0-><null> || r1-><null> || r2->$-2 || r3->$T65* }
; loading $-2 to register r2
;move $-2 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T65* }
; ensure(): $T65 has register r3
; switching owner of register $-2 to $T66 { r0-><null> || r1-><null> || r2->$-2 || r3->$T65* }
;divi r3 r2 	; { r0-><null> || r1-><null> || r2->$T66 || r3->$T65* }
; freeing unused variable r3
; spilling varialbe $T65
;move r3 $-68 	; { r0-><null> || r1-><null> || r2->$T66* || r3->$T65* }
; freeing unused variable r2
; spilling varialbe $T66
;move r2 $-69 	; { r0-><null> || r1-><null> || r2->$T66* || r3-><null> }
;GEI $-1 $T30 label44 liveout: ; { $-2 $-1 a0 $T30 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; ensure(): $T30 gets register r2 { r0-><null> || r1-><null> || r2->$T30 || r3->$-1 }
; loading $-33 to register r2
;move $-33 r2 	; { r0-><null> || r1-><null> || r2->$T30 || r3->$-1 }
;cmpi r3 r2 	; { r0-><null> || r1-><null> || r2->$T30 || r3->$-1 }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2->$T30 || r3->$-1 }
; spilling varialbe $T30
;move r2 $-33 	; { r0-><null> || r1-><null> || r2->$T30 || r3-><null> }
;jge label44 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r2
;PUSH a5 liveout: ; { $-2 $-1 a0 $T30 a1 a2 a3 a4 a5 fmax  }
; ensure(): a5 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->a5 }
; loading a5 to register r3
;move a5 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->a5 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->a5 }
;PUSH a4 liveout: ; { $-2 $-1 a0 $T30 a1 a2 a3 a4 a5 fmax  }
; ensure(): a4 gets register r2 { r0-><null> || r1-><null> || r2->a4 || r3->a5 }
; loading a4 to register r2
;move a4 r2 	; { r0-><null> || r1-><null> || r2->a4 || r3->a5 }
;push r2 	; { r0-><null> || r1-><null> || r2->a4 || r3->a5 }
;PUSH a3 liveout: ; { $-2 $-1 a0 $T30 a1 a2 a3 a4 a5 fmax  }
; ensure(): a3 gets register r1 { r0-><null> || r1->a3 || r2->a4 || r3->a5 }
; loading a3 to register r1
;move a3 r1 	; { r0-><null> || r1->a3 || r2->a4 || r3->a5 }
;push r1 	; { r0-><null> || r1->a3 || r2->a4 || r3->a5 }
;PUSH a2 liveout: ; { $-2 $-1 a0 $T30 a1 a2 a3 a4 a5 fmax  }
; ensure(): a2 gets register r0 { r0->a2 || r1->a3 || r2->a4 || r3->a5 }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->a3 || r2->a4 || r3->a5 }
;push r0 	; { r0->a2 || r1->a3 || r2->a4 || r3->a5 }
;PUSH a1 liveout: ; { $-2 $-1 a0 $T30 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a1
; ensure(): a1 gets register r0 { r0->a1 || r1->a3 || r2->a4 || r3->a5 }
; loading a1 to register r0
;move a1 r0 	; { r0->a1 || r1->a3 || r2->a4 || r3->a5 }
;push r0 	; { r0->a1 || r1->a3 || r2->a4 || r3->a5 }
;PUSH a0 liveout: ; { $-2 $-1 a0 $T30 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a0
; ensure(): a0 gets register r0 { r0->a0 || r1->a3 || r2->a4 || r3->a5 }
; loading a0 to register r0
;move a0 r0 	; { r0->a0 || r1->a3 || r2->a4 || r3->a5 }
;push r0 	; { r0->a0 || r1->a3 || r2->a4 || r3->a5 }
;PUSH $-1 liveout: ; { $-2 $-1 a0 $T30 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill $-1
; ensure(): $-1 gets register r0 { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
; loading $-1 to register r0
;move $-1 r0 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;push r0 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;PUSH  liveout: ; { $-2 $-1 a0 $T30 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;PUSHREG liveout: ; { $-2 $-1 a0 $T30 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;push r1 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;push r2 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;push r3 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
;JSR GetValue liveout: ; { $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
; spilling varialbe a5
;move r3 a5 	; { r0->$-1 || r1->a3 || r2->a4 || r3->a5 }
; spilling varialbe a4
;move r2 a4 	; { r0->$-1 || r1->a3 || r2->a4 || r3-><null> }
; spilling varialbe a3
;move r1 a3 	; { r0->$-1 || r1->a3 || r2-><null> || r3-><null> }
;jsr GetValue 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;POP $T69 liveout: ; { $T69 $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
; ensure(): $T69 gets register r3 { r0->$-1 || r1-><null> || r2-><null> || r3->$T69 }
; loading $-72 to register r3
;move $-72 r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T69 }
;pop r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T69 }
;POP  liveout: ; { $T69 $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T69* }
;POP  liveout: ; { $T69 $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T69* }
;POP  liveout: ; { $T69 $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T69* }
;POP  liveout: ; { $T69 $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T69* }
;POP  liveout: ; { $T69 $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T69* }
;POP  liveout: ; { $T69 $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T69* }
;POP  liveout: ; { $T69 $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T69* }
;STOREF $T69 $-3 liveout: ; { $-2 $-1 a0 $-3 a1 $T30 a2 a3 a4 a5 fmax  }
; ensure(): $T69 has register r3
; ensure(): $-3 gets register r2 { r0->$-1 || r1-><null> || r2->$-3 || r3->$T69* }
; loading $-3 to register r2
;move $-3 r2 	; { r0->$-1 || r1-><null> || r2->$-3 || r3->$T69* }
;move r3 r2 	; { r0->$-1 || r1-><null> || r2->$-3 || r3->$T69* }
; freeing unused variable r3
; spilling varialbe $T69
;move r3 $-72 	; { r0->$-1 || r1-><null> || r2->$-3* || r3->$T69* }
;WRITEF $-3 liveout: ; { $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
; ensure(): $-3 has register r2
;sys writer r2 	; { r0->$-1 || r1-><null> || r2->$-3* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $-3
;move r2 $-3 	; { r0->$-1 || r1-><null> || r2->$-3* || r3-><null> }
;WRITES eol liveout: ; { $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
;sys writes eol 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T67 liveout: ; { $T67 $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
; ensure(): $T67 gets register r3 { r0->$-1 || r1-><null> || r2-><null> || r3->$T67 }
; loading $-70 to register r3
;move $-70 r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T67 }
;move 1 r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T67 }
;ADDI $-1 $T67 $T68 liveout: ; { $T68 $-2 a0 a1 $T30 a2 a3 a4 a5 fmax  }
; ensure(): $-1 has register r0
; ensure(): $T67 has register r3
; switching owner of register $-1 to $T68 { r0->$-1 || r1-><null> || r2-><null> || r3->$T67* }
;addi r3 r0 	; { r0->$T68 || r1-><null> || r2-><null> || r3->$T67* }
; freeing unused variable r3
; spilling varialbe $T67
;move r3 $-70 	; { r0->$T68* || r1-><null> || r2-><null> || r3->$T67* }
;STOREI $T68 $-1 liveout: ; { $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
; ensure(): $T68 has register r0
; ensure(): $-1 gets register r3 { r0->$T68* || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0->$T68* || r1-><null> || r2-><null> || r3->$-1 }
;move r0 r3 	; { r0->$T68* || r1-><null> || r2-><null> || r3->$-1 }
; freeing unused variable r0
; spilling varialbe $T68
;move r0 $-71 	; { r0->$T68* || r1-><null> || r2-><null> || r3->$-1* }
;JUMP label42 liveout: ; { $-2 $-1 a0 a1 $T30 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1* }
;jmp label42 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label44 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label44 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label45 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label45 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI $-2 $T70 liveout: ; { $-2 $T70 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-2 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; loading $-2 to register r3
;move $-2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; ensure(): $T70 gets register r2 { r0-><null> || r1-><null> || r2->$T70 || r3->$-2 }
; loading $-73 to register r2
;move $-73 r2 	; { r0-><null> || r1-><null> || r2->$T70 || r3->$-2 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T70 || r3->$-2 }
;GEI $-1 $T70 label47 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-1 gets register r1 { r0-><null> || r1->$-1 || r2->$T70* || r3->$-2 }
; loading $-1 to register r1
;move $-1 r1 	; { r0-><null> || r1->$-1 || r2->$T70* || r3->$-2 }
; ensure(): $T70 has register r2
;cmpi r1 r2 	; { r0-><null> || r1->$-1 || r2->$T70* || r3->$-2 }
; spilling registers at the end of Basic Block
; spilling varialbe $-2
;move r3 $-2 	; { r0-><null> || r1->$-1 || r2->$T70* || r3->$-2 }
; spilling varialbe $T70
;move r2 $-73 	; { r0-><null> || r1->$-1 || r2->$T70* || r3-><null> }
; spilling varialbe $-1
;move r1 $-1 	; { r0-><null> || r1->$-1 || r2-><null> || r3-><null> }
;jge label47 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r1
; freeing unused variable r2
;PUSH $-1 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;PUSH  liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;PUSHREG liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;JSR Incre liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;jsr Incre 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;POPREG liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;POP $T71 liveout: ; { $-2 $-1 a0 $T71 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T71 gets register r2 { r0-><null> || r1-><null> || r2->$T71 || r3->$-1 }
; loading $-74 to register r2
;move $-74 r2 	; { r0-><null> || r1-><null> || r2->$T71 || r3->$-1 }
;pop r2 	; { r0-><null> || r1-><null> || r2->$T71 || r3->$-1 }
;POP  liveout: ; { $-2 $-1 a0 $T71 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2->$T71* || r3->$-1 }
;PUSH $T71 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T71 has register r2
;push r2 	; { r0-><null> || r1-><null> || r2->$T71* || r3->$-1 }
; freeing unused variable r2
; spilling varialbe $T71
;move r2 $-74 	; { r0-><null> || r1-><null> || r2->$T71* || r3->$-1 }
;PUSH  liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;PUSHREG liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;JSR Decre liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;jsr Decre 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;POPREG liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;POP $T72 liveout: ; { $-2 $-1 a0 $T72 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T72 gets register r2 { r0-><null> || r1-><null> || r2->$T72 || r3->$-1 }
; loading $-75 to register r2
;move $-75 r2 	; { r0-><null> || r1-><null> || r2->$T72 || r3->$-1 }
;pop r2 	; { r0-><null> || r1-><null> || r2->$T72 || r3->$-1 }
;POP  liveout: ; { $-2 $-1 a0 $T72 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2->$T72* || r3->$-1 }
;PUSH $T72 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T72 has register r2
;push r2 	; { r0-><null> || r1-><null> || r2->$T72* || r3->$-1 }
; freeing unused variable r2
; spilling varialbe $T72
;move r2 $-75 	; { r0-><null> || r1-><null> || r2->$T72* || r3->$-1 }
;PUSH  liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;PUSHREG liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;JSR Incre liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;jsr Incre 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;POPREG liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;POP $T73 liveout: ; { $T73 $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T73 gets register r2 { r0-><null> || r1-><null> || r2->$T73 || r3->$-1 }
; loading $-76 to register r2
;move $-76 r2 	; { r0-><null> || r1-><null> || r2->$T73 || r3->$-1 }
;pop r2 	; { r0-><null> || r1-><null> || r2->$T73 || r3->$-1 }
;POP  liveout: ; { $T73 $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$-1 }
;PUSH a5 liveout: ; { $T73 $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): a5 gets register r1 { r0-><null> || r1->a5 || r2->$T73* || r3->$-1 }
; loading a5 to register r1
;move a5 r1 	; { r0-><null> || r1->a5 || r2->$T73* || r3->$-1 }
;push r1 	; { r0-><null> || r1->a5 || r2->$T73* || r3->$-1 }
;PUSH a4 liveout: ; { $T73 $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): a4 gets register r0 { r0->a4 || r1->a5 || r2->$T73* || r3->$-1 }
; loading a4 to register r0
;move a4 r0 	; { r0->a4 || r1->a5 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a4 || r1->a5 || r2->$T73* || r3->$-1 }
;PUSH a3 liveout: ; { $T73 $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->a5 || r2->$T73* || r3->$-1 }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->a5 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a3 || r1->a5 || r2->$T73* || r3->$-1 }
;PUSH a2 liveout: ; { $T73 $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a2
; ensure(): a2 gets register r0 { r0->a2 || r1->a5 || r2->$T73* || r3->$-1 }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->a5 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a2 || r1->a5 || r2->$T73* || r3->$-1 }
;PUSH a1 liveout: ; { $T73 $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a1
; ensure(): a1 gets register r0 { r0->a1 || r1->a5 || r2->$T73* || r3->$-1 }
; loading a1 to register r0
;move a1 r0 	; { r0->a1 || r1->a5 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a1 || r1->a5 || r2->$T73* || r3->$-1 }
;PUSH a0 liveout: ; { $T73 $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; freeing unused variable r0
; allocate() has to spill a0
; ensure(): a0 gets register r0 { r0->a0 || r1->a5 || r2->$T73* || r3->$-1 }
; loading a0 to register r0
;move a0 r0 	; { r0->a0 || r1->a5 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a0 || r1->a5 || r2->$T73* || r3->$-1 }
;PUSH $-1 liveout: ; { $T73 $-2 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-1 has register r3
;push r3 	; { r0->a0 || r1->a5 || r2->$T73* || r3->$-1 }
; freeing unused variable r3
;PUSH  liveout: ; { $T73 $-2 a0 a1 a2 a3 a4 a5 fmax  }
;push 	; { r0->a0 || r1->a5 || r2->$T73* || r3-><null> }
;PUSHREG liveout: ; { $T73 $-2 a0 a1 a2 a3 a4 a5 fmax  }
;push r0 	; { r0->a0 || r1->a5 || r2->$T73* || r3-><null> }
;push r1 	; { r0->a0 || r1->a5 || r2->$T73* || r3-><null> }
;push r2 	; { r0->a0 || r1->a5 || r2->$T73* || r3-><null> }
;push r3 	; { r0->a0 || r1->a5 || r2->$T73* || r3-><null> }
;JSR GetValue liveout: ; { $T73 $-2 a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
; spilling varialbe a5
;move r1 a5 	; { r0->a0 || r1->a5 || r2->$T73* || r3-><null> }
; spilling varialbe a0
;move r0 a0 	; { r0->a0 || r1-><null> || r2->$T73* || r3-><null> }
;jsr GetValue 	; { r0-><null> || r1-><null> || r2->$T73* || r3-><null> }
;POPREG liveout: ; { $T73 $-2 a0 a1 a2 a3 a4 a5 fmax  }
;pop r3 	; { r0-><null> || r1-><null> || r2->$T73* || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2->$T73* || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2->$T73* || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2->$T73* || r3-><null> }
;POP $T74 liveout: ; { $T73 $T74 $-2 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T74 gets register r3 { r0-><null> || r1-><null> || r2->$T73* || r3->$T74 }
; loading $-77 to register r3
;move $-77 r3 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74 }
;pop r3 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74 }
;POP  liveout: ; { $T73 $T74 $-2 a0 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 $-2 a0 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 $-2 a0 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 $-2 a0 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 $-2 a0 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 $-2 a0 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 $-2 a0 a1 a2 a3 a4 a5 fmax  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;STOREF $T74 $-3 liveout: ; { $T73 $-2 a0 $-3 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T74 has register r3
; ensure(): $-3 gets register r1 { r0-><null> || r1->$-3 || r2->$T73* || r3->$T74* }
; loading $-3 to register r1
;move $-3 r1 	; { r0-><null> || r1->$-3 || r2->$T73* || r3->$T74* }
;move r3 r1 	; { r0-><null> || r1->$-3 || r2->$T73* || r3->$T74* }
; freeing unused variable r3
; spilling varialbe $T74
;move r3 $-77 	; { r0-><null> || r1->$-3* || r2->$T73* || r3->$T74* }
;WRITEF $-3 liveout: ; { $T73 $-2 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-3 has register r1
;sys writer r1 	; { r0-><null> || r1->$-3* || r2->$T73* || r3-><null> }
; freeing unused variable r1
; spilling varialbe $-3
;move r1 $-3 	; { r0-><null> || r1->$-3* || r2->$T73* || r3-><null> }
;WRITES eol liveout: ; { $T73 $-2 a0 a1 a2 a3 a4 a5 fmax  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2->$T73* || r3-><null> }
;STOREI $T73 $-1 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T73 has register r2
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2->$T73* || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$-1 }
;move r2 r3 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$-1 }
; freeing unused variable r2
; spilling varialbe $T73
;move r2 $-76 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$-1* }
;JUMP label45 liveout: ; { $-2 $-1 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1* }
;jmp label45 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label47 liveout: ; { $-2 a0 a1 a2 a3 a4 a5 fmax  }
; spilling registers at the end of Basic Block
;label label47 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;WRITES eol liveout: ; { $-2 a0 a1 a2 a3 a4 a5 fmax  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI $-2 $T75 liveout: ; { $T75 a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $-2 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; loading $-2 to register r3
;move $-2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; ensure(): $T75 gets register r2 { r0-><null> || r1-><null> || r2->$T75 || r3->$-2 }
; loading $-78 to register r2
;move $-78 r2 	; { r0-><null> || r1-><null> || r2->$T75 || r3->$-2 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T75 || r3->$-2 }
; freeing unused variable r3
;STOREI $T75 $6 liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; ensure(): $T75 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T75* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T75
;move r2 $-78 	; { r0-><null> || r1-><null> || r2->$T75* || r3-><null> }
;UNLINK liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { a0 a1 a2 a3 a4 a5 fmax  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }

str inputMessage "inputs are: \n"
str sortMessage "\n sorting... \n"
str space " "
str eol "\n"
var fmax
var a0
var a1
var a2
var a3
var a4
var a5
push
push
push
push
push
jsr main
sys halt
label Incre
link 76
move $-1 r3
move 1 r3
move $7 r2
addi r3 r2
move r3 $-1
move r2 $6
move r2 $-2
unlnk
ret
label Decre
link 76
move $-3 r3
move 1 r3
move $7 r2
subi r3 r2
move r3 $-3
move r2 $6
move r2 $-4
unlnk
ret
label main
link 80
move $-9 r3
move 1000.00 r3
move fmax r2
move r3 r2
move r3 $-9
push
push r0
push r1
push r2
push r3
move r2 fmax
jsr SYSIN
pop r3
pop r2
pop r1
pop r0
move $-10 r3
pop r3
move $-1 r2
move r3 r2
move r3 $-10
sys writes sortMessage
move $-11 r3
move 0 r3
move $-2 r1
move r3 r1
move r3 $-11
move r2 $-1
move r1 $-2
label label1
move $-1 r3
move $-12 r2
move r3 r2
move $-2 r1
cmpi r1 r2
move r3 $-1
move r2 $-12
move r1 $-2
jge label3
move a5 r3
push r3
move a4 r2
push r2
move a3 r1
push r1
move a2 r0
push r0
move a1 r0
push r0
move a0 r0
push r0
move $-1 r0
push r0
push
push r0
push r1
push r2
push r3
move r3 a5
move r2 a4
move r1 a3
jsr FindMin
pop r3
pop r2
pop r1
pop r0
move $-15 r3
pop r3
pop
pop
pop
pop
pop
pop
pop
move $-4 r2
move r3 r2
move r3 $-15
move a5 r3
push r3
move a4 r1
push r1
move a3 r0
push r0
move a2 r0
push r0
move a1 r0
push r0
move a0 r0
push r0
push r2
move $-1 r0
push r0
push
push r0
push r1
push r2
push r3
move r3 a5
move r1 a4
jsr FindIndex
pop r3
pop r2
pop r1
pop r0
move $-16 r3
pop r3
pop
pop
pop
pop
pop
pop
pop
pop
move $-3 r1
move r3 r1
move r3 $-16
move fmax r3
push r3
push r1
move r1 $-3
push
push r0
push r1
push r2
push r3
move r3 fmax
jsr SetAValue
pop r3
pop r2
pop r1
pop r0
move $-17 r3
pop r3
pop
pop
move fmax r1
move r3 r1
move r3 $-17
sys writer r2
move r2 $-4
sys writes eol
move $-13 r3
move 1 r3
move $-2 r2
addi r3 r2
move r3 $-13
move $-2 r3
move r2 r3
move r2 $-14
move r3 $-2
move r1 fmax
move r0 $-1
jmp label1
label label3
sys writes eol
unlnk
ret
label FindMin
link 78
move $8 r3
move $-16 r2
move r3 r2
move $-2 r1
move r2 r1
move r2 $-16
move $-17 r2
move 1 r2
move $-1 r0
move r2 r0
move r2 $-17
move r3 $8
move r1 $-2
move r0 $-1
label label4
move $7 r3
move $-18 r2
move r3 r2
move $-1 r1
cmpi r1 r2
move r3 $7
move r2 $-18
move r1 $-1
jge label6
move $13 r3
push r3
move $12 r2
push r2
move $11 r1
push r1
move $10 r0
push r0
move $9 r0
push r0
move $8 r0
push r0
move $-1 r0
push r0
push
push r0
push r1
push r2
push r3
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-19 r0
pop r0
pop
pop
pop
pop
pop
pop
pop
move $-2 r1
cmpr r0 r1
move r3 $13
move r2 $12
move r1 $-2
move r0 $-19
jge label7
move $13 r3
push r3
move $12 r2
push r2
move $11 r1
push r1
move $10 r0
push r0
move $9 r0
push r0
move $8 r0
push r0
move $-1 r0
push r0
push
push r0
push r1
push r2
push r3
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-20 r0
pop r0
pop
pop
pop
pop
pop
pop
pop
move $-2 r1
move r0 r1
move r0 $-20
move r3 $13
move r2 $12
move r1 $-2
jmp label8
label label7
label label8
move $-1 r3
push r3
push
push r0
push r1
push r2
push r3
jsr Incre
pop r3
pop r2
pop r1
pop r0
move $-21 r3
pop r3
pop
move $-1 r2
move r3 r2
move r3 $-21
move r2 $-1
jmp label4
label label6
move $-2 r3
move $-22 r2
move r3 r2
move r2 $6
move r2 $-22
unlnk
ret
label FindIndex
link 77
move $-22 r3
move 0 r3
move $-1 r2
move r3 r2
move r3 $-22
move r2 $-1
label label9
move $7 r3
move $-23 r2
move r3 r2
move $-1 r1
cmpi r1 r2
move r3 $7
move r2 $-23
move r1 $-1
jge label11
move $14 r3
push r3
move $13 r2
push r2
move $12 r1
push r1
move $11 r0
push r0
move $10 r0
push r0
move $9 r0
push r0
move $-1 r0
push r0
push
push r0
push r1
push r2
push r3
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-26 r0
pop r0
pop
pop
pop
pop
pop
pop
pop
push r0
move r0 $-26
move $8 r0
push r0
push
push r0
push r1
push r2
push r3
jsr IsEqual
pop r3
pop r2
pop r1
pop r0
move $-27 r0
pop r0
pop
pop
move r0 $-27
move $-28 r0
move 1 r0
move $-27 r1
cmpi r1 r0
move r3 $14
move r2 $13
move r1 $-27
move r0 $-28
jne label12
move $-1 r3
move $-29 r2
move r3 r2
move r2 $6
move r2 $-29
unlnk
ret
jmp label13
label label12
label label13
move $-24 r3
move 1 r3
move $-1 r2
addi r3 r2
move r3 $-24
move $-1 r3
move r2 r3
move r2 $-25
move r3 $-1
jmp label9
label label11
move $-1 r3
move $-30 r2
move r3 r2
move r2 $6
move r2 $-30
unlnk
ret
label IsEqual
link 76
move $8 r3
push r3
move $7 r3
push r3
push
push r0
push r1
push r2
push r3
jsr IsNotEqual
pop r3
pop r2
pop r1
pop r0
move $-30 r3
pop r3
pop
pop
move $-31 r2
move 0 r2
cmpi r3 r2
move r3 $-30
move r2 $-31
jne label14
move $-32 r3
move 1 r3
move r3 $6
move r3 $-32
unlnk
ret
jmp label15
label label14
label label15
move $-33 r3
move 0 r3
move r3 $6
move r3 $-33
unlnk
ret
label IsNotEqual
link 76
move $8 r3
move $-34 r2
move r3 r2
move $7 r3
cmpr r3 r2
move r3 $7
move r2 $-34
jeq label16
move $-35 r3
move 1 r3
move r3 $6
move r3 $-35
unlnk
ret
jmp label17
label label16
label label17
move $-36 r3
move 0 r3
move r3 $6
move r3 $-36
unlnk
ret
label GetValue
link 76
move $-37 r3
move 0 r3
move $7 r2
cmpi r2 r3
move r3 $-37
move r2 $7
jne label18
move $8 r3
move $-38 r2
move r3 r2
move r2 $6
move r2 $-38
unlnk
ret
jmp label19
label label18
move $-39 r3
move 1 r3
move $7 r2
cmpi r2 r3
move r3 $-39
move r2 $7
jne label20
move $9 r3
move $-40 r2
move r3 r2
move r2 $6
move r2 $-40
unlnk
ret
jmp label21
label label20
move $-41 r3
move 2 r3
move $7 r2
cmpi r2 r3
move r3 $-41
move r2 $7
jne label22
move $10 r3
move $-42 r2
move r3 r2
move r2 $6
move r2 $-42
unlnk
ret
jmp label23
label label22
move $-43 r3
move 3 r3
move $7 r2
cmpi r2 r3
move r3 $-43
move r2 $7
jne label24
move $11 r3
move $-44 r2
move r3 r2
move r2 $6
move r2 $-44
unlnk
ret
jmp label25
label label24
move $-45 r3
move 4 r3
move $7 r2
cmpi r2 r3
move r3 $-45
move r2 $7
jne label26
move $12 r3
move $-46 r2
move r3 r2
move r2 $6
move r2 $-46
unlnk
ret
jmp label27
label label26
move $-47 r3
move 5 r3
move $7 r2
cmpi r2 r3
move r3 $-47
move r2 $7
jne label28
move $13 r3
move $-48 r2
move r3 r2
move r2 $6
move r2 $-48
unlnk
ret
jmp label29
label label28
label label29
label label27
label label25
label label23
label label21
label label19
label SetAValue
link 76
move $-49 r3
move 0 r3
move $7 r2
cmpi r2 r3
move r3 $-49
move r2 $7
jne label30
move $8 r3
move $-50 r2
move r3 r2
move a0 r1
move r2 r1
move r2 $-50
move r3 $8
move r1 a0
jmp label31
label label30
move $-51 r3
move 1 r3
move $7 r2
cmpi r2 r3
move r3 $-51
move r2 $7
jne label32
move $8 r3
move $-52 r2
move r3 r2
move a1 r1
move r2 r1
move r2 $-52
move r3 $8
move r1 a1
jmp label33
label label32
move $-53 r3
move 2 r3
move $7 r2
cmpi r2 r3
move r3 $-53
move r2 $7
jne label34
move $8 r3
move $-54 r2
move r3 r2
move a2 r1
move r2 r1
move r2 $-54
move r3 $8
move r1 a2
jmp label35
label label34
move $-55 r3
move 3 r3
move $7 r2
cmpi r2 r3
move r3 $-55
move r2 $7
jne label36
move $8 r3
move $-56 r2
move r3 r2
move a3 r1
move r2 r1
move r2 $-56
move r3 $8
move r1 a3
jmp label37
label label36
move $-57 r3
move 4 r3
move $7 r2
cmpi r2 r3
move r3 $-57
move r2 $7
jne label38
move $8 r3
move $-58 r2
move r3 r2
move a4 r1
move r2 r1
move r2 $-58
move r3 $8
move r1 a4
jmp label39
label label38
move $-59 r3
move 5 r3
move $7 r2
cmpi r2 r3
move r3 $-59
move r2 $7
jne label40
move $8 r3
move $-60 r2
move r3 r2
move a5 r1
move r2 r1
move r2 $-60
move r3 $8
move r1 a5
jmp label41
label label40
label label41
label label39
label label37
label label35
label label33
label label31
move $8 r3
move $-61 r2
move r3 r2
move r2 $6
move r2 $-61
unlnk
ret
label SYSIN
link 79
move $-65 r3
move 0 r3
move $-1 r2
move r3 r2
move r3 $-65
move r2 $-1
move $-66 r3
move 6 r3
move $-2 r2
move r3 r2
move r3 $-66
move a0 r3
sys readr r3
move a1 r1
sys readr r1
move a2 r0
sys readr r0
move r0 a2
move a3 r0
sys readr r0
move r0 a3
move a4 r0
sys readr r0
move r0 a4
move a5 r0
sys readr r0
sys writes inputMessage
move r0 a5
move $-67 r0
move 0 r0
move r1 a1
move $-1 r1
move r0 r1
move r0 $-67
move r3 a0
move r2 $-2
move r1 $-1
label label42
move $-68 r3
move 2 r3
move $-2 r2
divi r3 r2
move r3 $-68
move r2 $-69
move $-1 r3
move $-33 r2
cmpi r3 r2
move r3 $-1
move r2 $-33
jge label44
move a5 r3
push r3
move a4 r2
push r2
move a3 r1
push r1
move a2 r0
push r0
move a1 r0
push r0
move a0 r0
push r0
move $-1 r0
push r0
push
push r0
push r1
push r2
push r3
move r3 a5
move r2 a4
move r1 a3
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-72 r3
pop r3
pop
pop
pop
pop
pop
pop
pop
move $-3 r2
move r3 r2
move r3 $-72
sys writer r2
move r2 $-3
sys writes eol
move $-70 r3
move 1 r3
addi r3 r0
move r3 $-70
move $-1 r3
move r0 r3
move r0 $-71
move r3 $-1
jmp label42
label label44
label label45
move $-2 r3
move $-73 r2
move r3 r2
move $-1 r1
cmpi r1 r2
move r3 $-2
move r2 $-73
move r1 $-1
jge label47
move $-1 r3
push r3
push
push r0
push r1
push r2
push r3
jsr Incre
pop r3
pop r2
pop r1
pop r0
move $-74 r2
pop r2
pop
push r2
move r2 $-74
push
push r0
push r1
push r2
push r3
jsr Decre
pop r3
pop r2
pop r1
pop r0
move $-75 r2
pop r2
pop
push r2
move r2 $-75
push
push r0
push r1
push r2
push r3
jsr Incre
pop r3
pop r2
pop r1
pop r0
move $-76 r2
pop r2
pop
move a5 r1
push r1
move a4 r0
push r0
move a3 r0
push r0
move a2 r0
push r0
move a1 r0
push r0
move a0 r0
push r0
push r3
push
push r0
push r1
push r2
push r3
move r1 a5
move r0 a0
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-77 r3
pop r3
pop
pop
pop
pop
pop
pop
pop
move $-3 r1
move r3 r1
move r3 $-77
sys writer r1
move r1 $-3
sys writes eol
move $-1 r3
move r2 r3
move r2 $-76
move r3 $-1
jmp label45
label label47
sys writes eol
move $-2 r3
move $-78 r2
move r3 r2
move r2 $6
move r2 $-78
unlnk
ret
