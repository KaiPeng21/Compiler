;Symbol table GLOBAL
; return type: null
; subscope local var size: 0
;scope type: GLOBAL_TYPE 
;name space type STRING value " " local slot location: -1
;name eol type STRING value "\n" local slot location: -2
;name buggy type STRING value "This is a bug\n" local slot location: -3


;Symbol table PRINT
; return type: VOID
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name val type INT parameter slot location: 7


;Symbol table BUG
; return type: VOID
; subscope local var size: 0
;scope type: FUNC_TYPE 


;Symbol table main
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name a type INT local slot location: -1
;name b type INT local slot location: -2
;name c type INT local slot location: -3


;Symbol table BUG2
; return type: VOID
; subscope local var size: 0
;scope type: FUNC_TYPE 


;Symbol table MULT
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name a type INT parameter slot location: 7
;name b type INT parameter slot location: 8
;name ret1 type INT local slot location: -1


; searching slot location for -- val -- in function scope PRINT and get location 7

; pre-conversion assignOutputID: a
; searching slot location for -- a -- in function scope main and get location -1

; post-conversion assignOutputID: $-1
; pre-conversion assignOutputID: b
; searching slot location for -- b -- in function scope main and get location -2

; post-conversion assignOutputID: $-2
; searching slot location for -- a -- in function scope main and get location -1

; searching slot location for -- a -- in function scope main and get location -1

; searching slot location for -- a -- in function scope main and get location -1

; searching slot location for -- b -- in function scope main and get location -2

; searching slot location for -- b -- in function scope main and get location -2

; searching slot location for -- a -- in function scope main and get location -1

; searching slot location for -- a -- in function scope main and get location -1

; searching slot location for -- b -- in function scope main and get location -2

; searching slot location for -- b -- in function scope main and get location -2

; pre-conversion assignOutputID: c
; searching slot location for -- c -- in function scope main and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- a -- in function scope main and get location -1

; searching slot location for -- b -- in function scope main and get location -2

; searching slot location for -- c -- in function scope main and get location -3

; searching slot location for -- c -- in function scope main and get location -3

; searching slot location for -- c -- in function scope main and get location -3

; pre-conversion assignOutputID: c
; searching slot location for -- c -- in function scope main and get location -3

; post-conversion assignOutputID: $-3
;OPT BUG
; SUBSCOPE for function scope: main

;return assignExpr: 0
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; pre-conversion assignOutputID: ret1
; searching slot location for -- ret1 -- in function scope MULT and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- a -- in function scope MULT and get location 7

; searching slot location for -- b -- in function scope MULT and get location 8

; searching slot location for -- ret1 -- in function scope MULT and get location -1

; searching slot location for -- ret1 -- in function scope MULT and get location -1

;OPT BUG
; SUBSCOPE for function scope: MULT

;return assignExpr: ret1
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false

;IR code
;PUSH
;JSR main
;HALT

;LABEL PRINT		 Under Func Scope: PRINT
;LINK 1			 Under Func Scope: PRINT
;WRITEI $7		 Under Func Scope: PRINT
;WRITES eol		 Under Func Scope: PRINT
;UNLINK			 Under Func Scope: PRINT
;RET			 Under Func Scope: PRINT

;LABEL BUG		 Under Func Scope: BUG
;LINK 1			 Under Func Scope: BUG
;WRITES buggy		 Under Func Scope: BUG
;UNLINK			 Under Func Scope: BUG
;RET			 Under Func Scope: BUG

;LABEL main		 Under Func Scope: main
;LINK 4			 Under Func Scope: main
;STOREI 5 $T1		 Under Func Scope: main
;STOREI $T1 $-1		 Under Func Scope: main
;STOREI 2 $T2		 Under Func Scope: main
;ADDI $T2 $-1 $T3	 Under Func Scope: main
;STOREI $T3 $-2		 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH $-2		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR MULT		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T4		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;PUSH $T4		 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR MULT		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T5		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;PUSH $-2		 Under Func Scope: main
;PUSH $T5		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR MULT		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T6		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREI $T6 $-3		 Under Func Scope: main
;WRITEI $-1		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEI $-2		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEI $-3		 Under Func Scope: main
;PUSH $-3		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR PRINT		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T7		 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREI $T7 $-3		 Under Func Scope: main
;STOREI 0 $T8		 Under Func Scope: main
;STOREI $T8 $6		 Under Func Scope: main
;UNLINK			 Under Func Scope: main
;RET			 Under Func Scope: main

;LABEL BUG2		 Under Func Scope: BUG2
;LINK 1			 Under Func Scope: BUG2
;WRITES buggy		 Under Func Scope: BUG2
;UNLINK			 Under Func Scope: BUG2
;RET			 Under Func Scope: BUG2

;LABEL MULT		 Under Func Scope: MULT
;LINK 2			 Under Func Scope: MULT
;MULTI $7 $8 $T9	 Under Func Scope: MULT
;STOREI $T9 $-1		 Under Func Scope: MULT
;STOREI $-1 $T10	 Under Func Scope: MULT
;STOREI $T10 $6		 Under Func Scope: MULT
;UNLINK			 Under Func Scope: MULT
;RET			 Under Func Scope: MULT

; ========= CFG IR NODE =========

;LABEL PRINT		P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL PRINT			S: ;WRITEI $7	
;WRITEI $7		P: ;LINK 1				S: ;WRITES eol	
;WRITES eol		P: ;WRITEI $7			S: ;UNLINK	
;UNLINK			P: ;WRITES eol			S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL BUG		P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL BUG			S: ;WRITES buggy	
;WRITES buggy		P: ;LINK 1				S: ;UNLINK	
;UNLINK			P: ;WRITES buggy			S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL main		P: 					S: ;LINK 4		 <== BB leader
;LINK 4			P: ;LABEL main			S: ;STOREI 5 $T1	
;STOREI 5 $T1		P: ;LINK 4				S: ;STOREI $T1 $-1	
;STOREI $T1 $-1		P: ;STOREI 5 $T1			S: ;STOREI 2 $T2	
;STOREI 2 $T2		P: ;STOREI $T1 $-1			S: ;ADDI $T2 $-1 $T3	
;ADDI $T2 $-1 $T3	P: ;STOREI 2 $T2			S: ;STOREI $T3 $-2	
;STOREI $T3 $-2		P: ;ADDI $T2 $-1 $T3		S: ;PUSH $-1	
;PUSH $-1		P: ;STOREI $T3 $-2			S: ;PUSH $-2	
;PUSH $-2		P: ;PUSH $-1				S: ;PUSH 	
;PUSH 			P: ;PUSH $-2			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR MULT	
;JSR MULT		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR MULT			S: ;POP $T4	
;POP $T4		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T4			S: ;POP 	
;POP 			P: ;POP 				S: ;PUSH $T4	
;PUSH $T4		P: ;POP 				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $T4				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR MULT	
;JSR MULT		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR MULT			S: ;POP $T5	
;POP $T5		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T5			S: ;POP 	
;POP 			P: ;POP 				S: ;PUSH $-2	
;PUSH $-2		P: ;POP 				S: ;PUSH $T5	
;PUSH $T5		P: ;PUSH $-2				S: ;PUSH 	
;PUSH 			P: ;PUSH $T5			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR MULT	
;JSR MULT		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR MULT			S: ;POP $T6	
;POP $T6		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T6			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI $T6 $-3	
;STOREI $T6 $-3		P: ;POP 				S: ;WRITEI $-1	
;WRITEI $-1		P: ;STOREI $T6 $-3			S: ;WRITES space	
;WRITES space		P: ;WRITEI $-1			S: ;WRITEI $-2	
;WRITEI $-2		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEI $-2			S: ;WRITEI $-3	
;WRITEI $-3		P: ;WRITES space			S: ;PUSH $-3	
;PUSH $-3		P: ;WRITEI $-3				S: ;PUSH 	
;PUSH 			P: ;PUSH $-3			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR PRINT	
;JSR PRINT		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR PRINT			S: ;POP $T7	
;POP $T7		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T7			S: ;STOREI $T7 $-3	
;STOREI $T7 $-3		P: ;POP 				S: ;STOREI 0 $T8	
;STOREI 0 $T8		P: ;STOREI $T7 $-3			S: ;STOREI $T8 $6	
;STOREI $T8 $6		P: ;STOREI 0 $T8			S: ;UNLINK	
;UNLINK			P: ;STOREI $T8 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL BUG2		P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL BUG2			S: ;WRITES buggy	
;WRITES buggy		P: ;LINK 1				S: ;UNLINK	
;UNLINK			P: ;WRITES buggy			S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL MULT		P: 					S: ;LINK 2		 <== BB leader
;LINK 2			P: ;LABEL MULT			S: ;MULTI $7 $8 $T9	
;MULTI $7 $8 $T9	P: ;LINK 2				S: ;STOREI $T9 $-1	
;STOREI $T9 $-1		P: ;MULTI $7 $8 $T9		S: ;STOREI $-1 $T10	
;STOREI $-1 $T10	P: ;STOREI $T9 $-1			S: ;STOREI $T10 $6	
;STOREI $T10 $6		P: ;STOREI $-1 $T10		S: ;UNLINK	
;UNLINK			P: ;STOREI $T10 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

; ========= CFG IR NODE / KILL/ GEN =========

;LABEL PRINT		Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;WRITEI $7		Kill: 				Gen: $7, 
;WRITES eol		Kill: 				Gen: 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL BUG		Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;WRITES buggy		Kill: 				Gen: 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL main		Kill: 				Gen: 
;LINK 4			Kill: 				Gen: 
;STOREI 5 $T1		Kill: $T1, 			Gen: 
;STOREI $T1 $-1		Kill: $-1, 			Gen: $T1, 
;STOREI 2 $T2		Kill: $T2, 			Gen: 
;ADDI $T2 $-1 $T3	Kill: $T3, 				Gen: $T2, $-1, 
;STOREI $T3 $-2		Kill: $-2, 			Gen: $T3, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH $-2		Kill: 					Gen: $-2, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR MULT		Kill: 					Gen: 
;POPREG			Kill: 				Gen: 
;POP $T4		Kill: $T4, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;PUSH $T4		Kill: 					Gen: $T4, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR MULT		Kill: 					Gen: 
;POPREG			Kill: 				Gen: 
;POP $T5		Kill: $T5, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;PUSH $-2		Kill: 					Gen: $-2, 
;PUSH $T5		Kill: 					Gen: $T5, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR MULT		Kill: 					Gen: 
;POPREG			Kill: 				Gen: 
;POP $T6		Kill: $T6, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T6 $-3		Kill: $-3, 			Gen: $T6, 
;WRITEI $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;WRITEI $-2		Kill: 				Gen: $-2, 
;WRITES space		Kill: 				Gen: 
;WRITEI $-3		Kill: 				Gen: $-3, 
;PUSH $-3		Kill: 					Gen: $-3, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR PRINT		Kill: 				Gen: 
;POPREG			Kill: 				Gen: 
;POP $T7		Kill: $T7, 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T7 $-3		Kill: $-3, 			Gen: $T7, 
;STOREI 0 $T8		Kill: $T8, 			Gen: 
;STOREI $T8 $6		Kill: $6, 			Gen: $T8, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL BUG2		Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;WRITES buggy		Kill: 				Gen: 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL MULT		Kill: 				Gen: 
;LINK 2			Kill: 				Gen: 
;MULTI $7 $8 $T9	Kill: $T9, 				Gen: $7, $8, 
;STOREI $T9 $-1		Kill: $-1, 			Gen: $T9, 
;STOREI $-1 $T10	Kill: $T10, 				Gen: $-1, 
;STOREI $T10 $6		Kill: $6, 			Gen: $T10, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

; ========= CFG IR NODE / LIVE IN / LIVE OUT =========

;LABEL PRINT		Live IN: $7, 			Live OUT: $7, 
;LINK 1			Live IN: $7, 			Live OUT: $7, 
;WRITEI $7		Live IN: $7, 				Live OUT: 
;WRITES eol		Live IN: 				Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 

;LABEL BUG		Live IN: 				Live OUT: 
;LINK 1			Live IN: 			Live OUT: 
;WRITES buggy		Live IN: 				Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 

;LABEL main		Live IN: 				Live OUT: 
;LINK 4			Live IN: 			Live OUT: 
;STOREI 5 $T1		Live IN: 				Live OUT: $T1, 
;STOREI $T1 $-1		Live IN: $T1, 			Live OUT: $-1, 
;STOREI 2 $T2		Live IN: $-1, 			Live OUT: $T2, $-1, 
;ADDI $T2 $-1 $T3	Live IN: $T2, $-1, 			Live OUT: $T3, $-1, 
;STOREI $T3 $-2		Live IN: $T3, $-1, 		Live OUT: $-2, $-1, 
;PUSH $-1		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH $-2		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH 			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;PUSHREG		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;JSR MULT		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;POPREG			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POP $T4		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, $T4, 
;POP 			Live IN: $-2, $-1, $T4, 		Live OUT: $-2, $-1, $T4, 
;POP 			Live IN: $-2, $-1, $T4, 		Live OUT: $-2, $-1, $T4, 
;PUSH $T4		Live IN: $-2, $-1, $T4, 		Live OUT: $-2, $-1, 
;PUSH $-1		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH 			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;PUSHREG		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;JSR MULT		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;POPREG			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POP $T5		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, $T5, 
;POP 			Live IN: $-2, $-1, $T5, 		Live OUT: $-2, $-1, $T5, 
;POP 			Live IN: $-2, $-1, $T5, 		Live OUT: $-2, $-1, $T5, 
;PUSH $-2		Live IN: $-2, $-1, $T5, 		Live OUT: $-2, $-1, $T5, 
;PUSH $T5		Live IN: $-2, $-1, $T5, 		Live OUT: $-2, $-1, 
;PUSH 			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;PUSHREG		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;JSR MULT		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;POPREG			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POP $T6		Live IN: $-2, $-1, 			Live OUT: $-2, $T6, $-1, 
;POP 			Live IN: $T6, $-2, $-1, 		Live OUT: $-2, $T6, $-1, 
;POP 			Live IN: $T6, $-2, $-1, 		Live OUT: $-2, $T6, $-1, 
;STOREI $T6 $-3		Live IN: $T6, $-2, $-1, 		Live OUT: $-2, $-1, $-3, 
;WRITEI $-1		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-3, 
;WRITES space		Live IN: $-2, $-3, 		Live OUT: $-2, $-3, 
;WRITEI $-2		Live IN: $-2, $-3, 			Live OUT: $-3, 
;WRITES space		Live IN: $-3, 			Live OUT: $-3, 
;WRITEI $-3		Live IN: $-3, 			Live OUT: $-3, 
;PUSH $-3		Live IN: $-3, 				Live OUT: 
;PUSH 			Live IN: 				Live OUT: 
;PUSHREG		Live IN: 				Live OUT: 
;JSR PRINT		Live IN: 				Live OUT: 
;POPREG			Live IN: 			Live OUT: 
;POP $T7		Live IN: 				Live OUT: $T7, 
;POP 			Live IN: $T7, 			Live OUT: $T7, 
;STOREI $T7 $-3		Live IN: $T7, 			Live OUT: 
;STOREI 0 $T8		Live IN: 				Live OUT: $T8, 
;STOREI $T8 $6		Live IN: $T8, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 

;LABEL BUG2		Live IN: 				Live OUT: 
;LINK 1			Live IN: 			Live OUT: 
;WRITES buggy		Live IN: 				Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 

;LABEL MULT		Live IN: $8, $7, 			Live OUT: $7, $8, 
;LINK 2			Live IN: $8, $7, 		Live OUT: $7, $8, 
;MULTI $7 $8 $T9	Live IN: $8, $7, 			Live OUT: $T9, 
;STOREI $T9 $-1		Live IN: $T9, 			Live OUT: $-1, 
;STOREI $-1 $T10	Live IN: $-1, 				Live OUT: $T10, 
;STOREI $T10 $6		Live IN: $T10, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 
;str space " " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str eol "\n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str buggy "This is a bug\n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;jsr main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;sys halt 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL PRINT liveout: ; { $7  }
;label PRINT 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $7  }
;link 11 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;WRITEI $7 liveout: ; {  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
;sys writei r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; freeing unused variable r3
;WRITES eol liveout: ; {  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL BUG liveout: ; {  }
;label BUG 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; {  }
;link 11 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;WRITES buggy liveout: ; {  }
;sys writes buggy 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL main liveout: ; {  }
;label main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 4 liveout: ; {  }
;link 14 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 5 $T1 liveout: ; { $T1  }
; ensure(): $T1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
; loading $-4 to register r3
;move $-4 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;move 5 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;STOREI $T1 $-1 liveout: ; { $-1  }
; ensure(): $T1 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T1* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T1* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T1* }
; freeing unused variable r3
; spilling varialbe $T1
;move r3 $-4 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T1* }
;STOREI 2 $T2 liveout: ; { $T2 $-1  }
; ensure(): $T2 gets register r3 { r0-><null> || r1-><null> || r2->$-1* || r3->$T2 }
; loading $-5 to register r3
;move $-5 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T2 }
;move 2 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T2 }
;ADDI $T2 $-1 $T3 liveout: ; { $T3 $-1  }
; ensure(): $T2 has register r3
; ensure(): $-1 has register r2
; switching owner of register $T2 to $T3 { r0-><null> || r1-><null> || r2->$-1* || r3->$T2* }
; spilling varialbe $T2
;move r3 $-5 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T2* }
;addi r2 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T3 }
;STOREI $T3 $-2 liveout: ; { $-2 $-1  }
; ensure(): $T3 has register r3
; ensure(): $-2 gets register r1 { r0-><null> || r1->$-2 || r2->$-1* || r3->$T3* }
; loading $-2 to register r1
;move $-2 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T3* }
;move r3 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T3* }
; freeing unused variable r3
; spilling varialbe $T3
;move r3 $-6 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T3* }
;PUSH $-1 liveout: ; { $-2 $-1  }
; ensure(): $-1 has register r2
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH $-2 liveout: ; { $-2 $-1  }
; ensure(): $-2 has register r1
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH  liveout: ; { $-2 $-1  }
;push 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSHREG liveout: ; { $-2 $-1  }
;push r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;JSR MULT liveout: ; { $-2 $-1  }
; writing back global variables prior a function call
;jsr MULT 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POPREG liveout: ; { $-2 $-1  }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POP $T4 liveout: ; { $-2 $-1 $T4  }
; ensure(): $T4 gets register r3 { r0-><null> || r1->$-2* || r2->$-1* || r3->$T4 }
; loading $-7 to register r3
;move $-7 r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T4 }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T4 }
;POP  liveout: ; { $-2 $-1 $T4  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T4* }
;POP  liveout: ; { $-2 $-1 $T4  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T4* }
;PUSH $T4 liveout: ; { $-2 $-1  }
; ensure(): $T4 has register r3
;push r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T4* }
; freeing unused variable r3
; spilling varialbe $T4
;move r3 $-7 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T4* }
;PUSH $-1 liveout: ; { $-2 $-1  }
; ensure(): $-1 has register r2
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH  liveout: ; { $-2 $-1  }
;push 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSHREG liveout: ; { $-2 $-1  }
;push r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;JSR MULT liveout: ; { $-2 $-1  }
; writing back global variables prior a function call
;jsr MULT 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POPREG liveout: ; { $-2 $-1  }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POP $T5 liveout: ; { $-2 $-1 $T5  }
; ensure(): $T5 gets register r3 { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5 }
; loading $-8 to register r3
;move $-8 r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5 }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5 }
;POP  liveout: ; { $-2 $-1 $T5  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5* }
;POP  liveout: ; { $-2 $-1 $T5  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5* }
;PUSH $-2 liveout: ; { $-2 $-1 $T5  }
; ensure(): $-2 has register r1
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5* }
;PUSH $T5 liveout: ; { $-2 $-1  }
; ensure(): $T5 has register r3
;push r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5* }
; freeing unused variable r3
; spilling varialbe $T5
;move r3 $-8 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5* }
;PUSH  liveout: ; { $-2 $-1  }
;push 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSHREG liveout: ; { $-2 $-1  }
;push r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;JSR MULT liveout: ; { $-2 $-1  }
; writing back global variables prior a function call
;jsr MULT 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POPREG liveout: ; { $-2 $-1  }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POP $T6 liveout: ; { $-2 $T6 $-1  }
; ensure(): $T6 gets register r3 { r0-><null> || r1->$-2* || r2->$-1* || r3->$T6 }
; loading $-9 to register r3
;move $-9 r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T6 }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T6 }
;POP  liveout: ; { $-2 $T6 $-1  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T6* }
;POP  liveout: ; { $-2 $T6 $-1  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T6* }
;STOREI $T6 $-3 liveout: ; { $-2 $-1 $-3  }
; ensure(): $T6 has register r3
; ensure(): $-3 gets register r0 { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T6* }
; loading $-3 to register r0
;move $-3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T6* }
;move r3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T6* }
; freeing unused variable r3
; spilling varialbe $T6
;move r3 $-9 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3->$T6* }
;WRITEI $-1 liveout: ; { $-2 $-3  }
; ensure(): $-1 has register r2
;sys writei r2 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
;WRITEI $-2 liveout: ; { $-3  }
; ensure(): $-2 has register r1
;sys writei r1 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
; freeing unused variable r1
; spilling varialbe $-2
;move r1 $-2 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
;WRITES space liveout: ; { $-3  }
;sys writes space 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITEI $-3 liveout: ; { $-3  }
; ensure(): $-3 has register r0
;sys writei r0 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;PUSH $-3 liveout: ; {  }
; ensure(): $-3 has register r0
;push r0 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r0
; spilling varialbe $-3
;move r0 $-3 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;PUSH  liveout: ; {  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSHREG liveout: ; {  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JSR PRINT liveout: ; {  }
; writing back global variables prior a function call
;jsr PRINT 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; {  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T7 liveout: ; { $T7  }
; ensure(): $T7 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T7 }
; loading $-10 to register r3
;move $-10 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T7 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T7 }
;POP  liveout: ; { $T7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T7* }
;STOREI $T7 $-3 liveout: ; {  }
; ensure(): $T7 has register r3
; ensure(): $-3 gets register r2 { r0-><null> || r1-><null> || r2->$-3 || r3->$T7* }
; loading $-3 to register r2
;move $-3 r2 	; { r0-><null> || r1-><null> || r2->$-3 || r3->$T7* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-3 || r3->$T7* }
; freeing unused variable r3
; spilling varialbe $T7
;move r3 $-10 	; { r0-><null> || r1-><null> || r2->$-3* || r3->$T7* }
; freeing unused variable r2
; spilling varialbe $-3
;move r2 $-3 	; { r0-><null> || r1-><null> || r2->$-3* || r3-><null> }
;STOREI 0 $T8 liveout: ; { $T8  }
; ensure(): $T8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T8 }
; loading $-11 to register r3
;move $-11 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T8 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T8 }
;STOREI $T8 $6 liveout: ; {  }
; ensure(): $T8 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T8* }
; freeing unused variable r3
; spilling varialbe $T8
;move r3 $-11 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T8* }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL BUG2 liveout: ; {  }
;label BUG2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; {  }
;link 11 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;WRITES buggy liveout: ; {  }
;sys writes buggy 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL MULT liveout: ; { $7 $8  }
;label MULT 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 2 liveout: ; { $7 $8  }
;link 12 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;MULTI $7 $8 $T9 liveout: ; { $T9  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; ensure(): $8 gets register r2 { r0-><null> || r1-><null> || r2->$8 || r3->$7 }
; loading $8 to register r2
;move $8 r2 	; { r0-><null> || r1-><null> || r2->$8 || r3->$7 }
; switching owner of register $7 to $T9 { r0-><null> || r1-><null> || r2->$8 || r3->$7 }
;muli r2 r3 	; { r0-><null> || r1-><null> || r2->$8 || r3->$T9 }
; freeing unused variable r2
;STOREI $T9 $-1 liveout: ; { $-1  }
; ensure(): $T9 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T9* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T9* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T9* }
; freeing unused variable r3
; spilling varialbe $T9
;move r3 $-10 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T9* }
;STOREI $-1 $T10 liveout: ; { $T10  }
; ensure(): $-1 has register r2
; ensure(): $T10 gets register r3 { r0-><null> || r1-><null> || r2->$-1* || r3->$T10 }
; loading $-11 to register r3
;move $-11 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T10 }
;move r2 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T10 }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T10* }
;STOREI $T10 $6 liveout: ; {  }
; ensure(): $T10 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T10* }
; freeing unused variable r3
; spilling varialbe $T10
;move r3 $-11 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T10* }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }

str space " "
str eol "\n"
str buggy "This is a bug\n"
push
push
push
push
push
jsr main
sys halt
label PRINT
link 11
move $7 r3
sys writei r3
sys writes eol
unlnk
ret
label BUG
link 11
sys writes buggy
unlnk
ret
label main
link 14
move $-4 r3
move 5 r3
move $-1 r2
move r3 r2
move r3 $-4
move $-5 r3
move 2 r3
move r3 $-5
addi r2 r3
move $-2 r1
move r3 r1
move r3 $-6
push r2
push r1
push
push r0
push r1
push r2
push r3
jsr MULT
pop r3
pop r2
pop r1
pop r0
move $-7 r3
pop r3
pop
pop
push r3
move r3 $-7
push r2
push
push r0
push r1
push r2
push r3
jsr MULT
pop r3
pop r2
pop r1
pop r0
move $-8 r3
pop r3
pop
pop
push r1
push r3
move r3 $-8
push
push r0
push r1
push r2
push r3
jsr MULT
pop r3
pop r2
pop r1
pop r0
move $-9 r3
pop r3
pop
pop
move $-3 r0
move r3 r0
move r3 $-9
sys writei r2
move r2 $-1
sys writes space
sys writei r1
move r1 $-2
sys writes space
sys writei r0
push r0
move r0 $-3
push
push r0
push r1
push r2
push r3
jsr PRINT
pop r3
pop r2
pop r1
pop r0
move $-10 r3
pop r3
pop
move $-3 r2
move r3 r2
move r3 $-10
move r2 $-3
move $-11 r3
move 0 r3
move r3 $6
move r3 $-11
unlnk
ret
label BUG2
link 11
sys writes buggy
unlnk
ret
label MULT
link 12
move $7 r3
move $8 r2
muli r2 r3
move $-1 r2
move r3 r2
move r3 $-10
move $-11 r3
move r2 r3
move r2 $-1
move r3 $6
move r3 $-11
unlnk
ret
