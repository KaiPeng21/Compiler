; Error while creating symbol table
; Error while creating symbol table
;Symbol table GLOBAL
; return type: null
; subscope local var size: 0
;scope type: GLOBAL_TYPE 
;name input type STRING value "Please enter an integer number: " local slot location: -1
;name eol type STRING value "\n" local slot location: -2


;Symbol table factorial
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name a type INT parameter slot location: 7
;name ret type INT local slot location: -1
;name tret type INT local slot location: -2


;Symbol table BLOCK 1
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 2
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table main
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name num type INT local slot location: -1
;name result type INT local slot location: -2


;Symbol table BLOCK 3
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 4
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 5
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 6
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


; SUBSCOPE for function scope: factorial
; SUBSCOPE block ID: 1 scopeType: IF

; searching slot location for -- a -- in function scope factorial and get location 7

;exit Cond: = :: a :: 1
; searching slot location for -- a -- in function scope factorial and get location 7

;OPT BUG
; SUBSCOPE for function scope: factorial
; SUBSCOPE block ID: 1 scopeType: IF

;return assignExpr: 1
;left: 1
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: factorial
; SUBSCOPE block ID: 2 scopeType: ELSE

; searching slot location for -- a -- in function scope factorial and get location 7

; pre-conversion assignOutputID: tret
; searching slot location for -- tret -- in function scope factorial and get location -2

; post-conversion assignOutputID: $-2
; pre-conversion assignOutputID: ret
; searching slot location for -- ret -- in function scope factorial and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- tret -- in function scope factorial and get location -2

; searching slot location for -- a -- in function scope factorial and get location 7

; searching slot location for -- ret -- in function scope factorial and get location -1

; searching slot location for -- ret -- in function scope factorial and get location -1

;OPT BUG
; SUBSCOPE for function scope: factorial

;return assignExpr: ret
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; searching slot location for -- num -- in function scope main and get location -1

; SUBSCOPE for function scope: main
; SUBSCOPE block ID: 3 scopeType: IF

; searching slot location for -- num -- in function scope main and get location -1

;exit Cond: = :: num :: 1
; searching slot location for -- num -- in function scope main and get location -1

; pre-conversion assignOutputID: result
; searching slot location for -- result -- in function scope main and get location -2

; post-conversion assignOutputID: $-2
; SUBSCOPE for function scope: main
; SUBSCOPE block ID: 4 scopeType: ELSE

; SUBSCOPE for function scope: main
; SUBSCOPE block ID: 4 scopeType: ELSE
; SUBSCOPE block ID: 5 scopeType: IF

; searching slot location for -- num -- in function scope main and get location -1

;exit Cond: > :: num :: 1
; searching slot location for -- num -- in function scope main and get location -1

; searching slot location for -- num -- in function scope main and get location -1

; searching slot location for -- num -- in function scope main and get location -1

; pre-conversion assignOutputID: result
; searching slot location for -- result -- in function scope main and get location -2

; post-conversion assignOutputID: $-2
; SUBSCOPE for function scope: main
; SUBSCOPE block ID: 4 scopeType: ELSE
; SUBSCOPE block ID: 6 scopeType: ELSE

; pre-conversion assignOutputID: result
; searching slot location for -- result -- in function scope main and get location -2

; post-conversion assignOutputID: $-2
; searching slot location for -- result -- in function scope main and get location -2

;OPT BUG
; SUBSCOPE for function scope: main

;return assignExpr: 0
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false

;IR code
;PUSH
;JSR main
;HALT

;LABEL factorial	 Under Func Scope: factorial
;LINK 3			 Under Func Scope: factorial
;STOREI 1 $T1		 Under Func Scope: factorial
;NEI $7 $T1 label1	 Under Func Scope: factorial
;STOREI 1 $T2		 Under Func Scope: factorial
;STOREI $T2 $6		 Under Func Scope: factorial
;UNLINK			 Under Func Scope: factorial
;RET			 Under Func Scope: factorial
;JUMP label2		 Under Func Scope: factorial
;LABEL label1		 Under Func Scope: factorial
;STOREI 1 $T3		 Under Func Scope: factorial
;SUBI $7 $T3 $T4	 Under Func Scope: factorial
;PUSH $T4		 Under Func Scope: factorial
;PUSH 			 Under Func Scope: factorial
;PUSHREG		 Under Func Scope: factorial
;JSR factorial		 Under Func Scope: factorial
;POPREG			 Under Func Scope: factorial
;POP $T5		 Under Func Scope: factorial
;POP 			 Under Func Scope: factorial
;STOREI $T5 $-2		 Under Func Scope: factorial
;MULTI $-2 $7 $T6	 Under Func Scope: factorial
;STOREI $T6 $-1		 Under Func Scope: factorial
;LABEL label2		 Under Func Scope: factorial
;STOREI $-1 $T7		 Under Func Scope: factorial
;STOREI $T7 $6		 Under Func Scope: factorial
;UNLINK			 Under Func Scope: factorial
;RET			 Under Func Scope: factorial

;LABEL main		 Under Func Scope: main
;LINK 3			 Under Func Scope: main
;WRITES input		 Under Func Scope: main
;READI $-1		 Under Func Scope: main
;STOREI 1 $T8		 Under Func Scope: main
;NEI $-1 $T8 label3	 Under Func Scope: main
;STOREI 1 $T9		 Under Func Scope: main
;STOREI $T9 $-2		 Under Func Scope: main
;JUMP label4		 Under Func Scope: main
;LABEL label3		 Under Func Scope: main
;STOREI 1 $T10		 Under Func Scope: main
;LEI $-1 $T10 label5	 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR factorial		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T11		 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREI $T11 $-2	 Under Func Scope: main
;JUMP label6		 Under Func Scope: main
;LABEL label5		 Under Func Scope: main
;STOREI 0 $T12		 Under Func Scope: main
;STOREI $T12 $-2	 Under Func Scope: main
;LABEL label6		 Under Func Scope: main
;LABEL label4		 Under Func Scope: main
;WRITEI $-2		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;STOREI 0 $T13		 Under Func Scope: main
;STOREI $T13 $6		 Under Func Scope: main
;UNLINK			 Under Func Scope: main
;RET			 Under Func Scope: main

; ========= CFG IR NODE =========

;LABEL factorial	P: 					S: ;LINK 3		 <== BB leader
;LINK 3			P: ;LABEL factorial		S: ;STOREI 1 $T1	
;STOREI 1 $T1		P: ;LINK 3				S: ;NEI $7 $T1 label1	
;NEI $7 $T1 label1	P: ;STOREI 1 $T1			S: ;STOREI 1 $T2	;LABEL label1	
;STOREI 1 $T2		P: ;NEI $7 $T1 label1		S: ;STOREI $T2 $6		 <== BB leader
;STOREI $T2 $6		P: ;STOREI 1 $T2			S: ;UNLINK	
;UNLINK			P: ;STOREI $T2 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label2		P: ;RET				S: ;LABEL label2	
;LABEL label1		P: ;NEI $7 $T1 label1		S: ;STOREI 1 $T3		 <== BB leader
;STOREI 1 $T3		P: ;LABEL label1			S: ;SUBI $7 $T3 $T4	
;SUBI $7 $T3 $T4	P: ;STOREI 1 $T3			S: ;PUSH $T4	
;PUSH $T4		P: ;SUBI $7 $T3 $T4			S: ;PUSH 	
;PUSH 			P: ;PUSH $T4			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR factorial	
;JSR factorial		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR factorial		S: ;POP $T5	
;POP $T5		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T5			S: ;STOREI $T5 $-2	
;STOREI $T5 $-2		P: ;POP 				S: ;MULTI $-2 $7 $T6	
;MULTI $-2 $7 $T6	P: ;STOREI $T5 $-2			S: ;STOREI $T6 $-1	
;STOREI $T6 $-1		P: ;MULTI $-2 $7 $T6		S: ;LABEL label2	
;LABEL label2		P: ;STOREI $T6 $-1	;JUMP label2		S: ;STOREI $-1 $T7		 <== BB leader
;STOREI $-1 $T7		P: ;LABEL label2			S: ;STOREI $T7 $6	
;STOREI $T7 $6		P: ;STOREI $-1 $T7		S: ;UNLINK	
;UNLINK			P: ;STOREI $T7 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL main		P: 					S: ;LINK 3		 <== BB leader
;LINK 3			P: ;LABEL main			S: ;WRITES input	
;WRITES input		P: ;LINK 3				S: ;READI $-1	
;READI $-1		P: ;WRITES input			S: ;STOREI 1 $T8	
;STOREI 1 $T8		P: ;READI $-1			S: ;NEI $-1 $T8 label3	
;NEI $-1 $T8 label3	P: ;STOREI 1 $T8			S: ;STOREI 1 $T9	;LABEL label3	
;STOREI 1 $T9		P: ;NEI $-1 $T8 label3		S: ;STOREI $T9 $-2		 <== BB leader
;STOREI $T9 $-2		P: ;STOREI 1 $T9			S: ;JUMP label4	
;JUMP label4		P: ;STOREI $T9 $-2			S: ;LABEL label4	
;LABEL label3		P: ;NEI $-1 $T8 label3		S: ;STOREI 1 $T10		 <== BB leader
;STOREI 1 $T10		P: ;LABEL label3			S: ;LEI $-1 $T10 label5	
;LEI $-1 $T10 label5	P: ;STOREI 1 $T10			S: ;PUSH $-1	;LABEL label5	
;PUSH $-1		P: ;LEI $-1 $T10 label5		S: ;PUSH 		 <== BB leader
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR factorial	
;JSR factorial		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR factorial		S: ;POP $T11	
;POP $T11		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T11			S: ;STOREI $T11 $-2	
;STOREI $T11 $-2	P: ;POP 				S: ;JUMP label6	
;JUMP label6		P: ;STOREI $T11 $-2			S: ;LABEL label6	
;LABEL label5		P: ;LEI $-1 $T10 label5		S: ;STOREI 0 $T12		 <== BB leader
;STOREI 0 $T12		P: ;LABEL label5			S: ;STOREI $T12 $-2	
;STOREI $T12 $-2	P: ;STOREI 0 $T12			S: ;LABEL label6	
;LABEL label6		P: ;STOREI $T12 $-2	;JUMP label6		S: ;LABEL label4		 <== BB leader
;LABEL label4		P: ;LABEL label6	;JUMP label4		S: ;WRITEI $-2		 <== BB leader
;WRITEI $-2		P: ;LABEL label4			S: ;WRITES eol	
;WRITES eol		P: ;WRITEI $-2			S: ;STOREI 0 $T13	
;STOREI 0 $T13		P: ;WRITES eol			S: ;STOREI $T13 $6	
;STOREI $T13 $6		P: ;STOREI 0 $T13		S: ;UNLINK	
;UNLINK			P: ;STOREI $T13 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

; ========= CFG IR NODE / KILL/ GEN =========

;LABEL factorial	Kill: 					Gen: 
;LINK 3			Kill: 				Gen: 
;STOREI 1 $T1		Kill: $T1, 			Gen: 
;NEI $7 $T1 label1	Kill: 				Gen: $T1, $7, 
;STOREI 1 $T2		Kill: $T2, 			Gen: 
;STOREI $T2 $6		Kill: $6, 			Gen: $T2, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label2		Kill: 				Gen: 
;LABEL label1		Kill: 				Gen: 
;STOREI 1 $T3		Kill: $T3, 			Gen: 
;SUBI $7 $T3 $T4	Kill: $T4, 				Gen: $T3, $7, 
;PUSH $T4		Kill: 					Gen: $T4, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR factorial		Kill: 				Gen: 
;POPREG			Kill: 				Gen: 
;POP $T5		Kill: $T5, 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T5 $-2		Kill: $-2, 			Gen: $T5, 
;MULTI $-2 $7 $T6	Kill: $T6, 				Gen: $7, $-2, 
;STOREI $T6 $-1		Kill: $-1, 			Gen: $T6, 
;LABEL label2		Kill: 				Gen: 
;STOREI $-1 $T7		Kill: $T7, 			Gen: $-1, 
;STOREI $T7 $6		Kill: $6, 			Gen: $T7, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL main		Kill: 				Gen: 
;LINK 3			Kill: 				Gen: 
;WRITES input		Kill: 				Gen: 
;READI $-1		Kill: $-1, 				Gen: 
;STOREI 1 $T8		Kill: $T8, 			Gen: 
;NEI $-1 $T8 label3	Kill: 				Gen: $-1, $T8, 
;STOREI 1 $T9		Kill: $T9, 			Gen: 
;STOREI $T9 $-2		Kill: $-2, 			Gen: $T9, 
;JUMP label4		Kill: 				Gen: 
;LABEL label3		Kill: 				Gen: 
;STOREI 1 $T10		Kill: $T10, 			Gen: 
;LEI $-1 $T10 label5	Kill: 				Gen: $T10, $-1, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR factorial		Kill: 				Gen: 
;POPREG			Kill: 				Gen: 
;POP $T11		Kill: $T11, 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T11 $-2	Kill: $-2, 				Gen: $T11, 
;JUMP label6		Kill: 				Gen: 
;LABEL label5		Kill: 				Gen: 
;STOREI 0 $T12		Kill: $T12, 			Gen: 
;STOREI $T12 $-2	Kill: $-2, 				Gen: $T12, 
;LABEL label6		Kill: 				Gen: 
;LABEL label4		Kill: 				Gen: 
;WRITEI $-2		Kill: 				Gen: $-2, 
;WRITES eol		Kill: 				Gen: 
;STOREI 0 $T13		Kill: $T13, 			Gen: 
;STOREI $T13 $6		Kill: $6, 			Gen: $T13, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

; ========= CFG IR NODE / LIVE IN / LIVE OUT =========

;LABEL factorial	Live IN: $7, 				Live OUT: $7, 
;LINK 3			Live IN: $7, 			Live OUT: $7, 
;STOREI 1 $T1		Live IN: $7, 			Live OUT: $T1, $7, 
;NEI $7 $T1 label1	Live IN: $T1, $7, 			Live OUT: $7, 
;STOREI 1 $T2		Live IN: 				Live OUT: $T2, 
;STOREI $T2 $6		Live IN: $T2, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 
;JUMP label2		Live IN: $-1, 			Live OUT: $-1, 
;LABEL label1		Live IN: $7, 			Live OUT: $7, 
;STOREI 1 $T3		Live IN: $7, 			Live OUT: $T3, $7, 
;SUBI $7 $T3 $T4	Live IN: $T3, $7, 			Live OUT: $7, $T4, 
;PUSH $T4		Live IN: $T4, $7, 			Live OUT: $7, 
;PUSH 			Live IN: $7, 			Live OUT: $7, 
;PUSHREG		Live IN: $7, 				Live OUT: $7, 
;JSR factorial		Live IN: $7, 			Live OUT: $7, 
;POPREG			Live IN: $7, 			Live OUT: $7, 
;POP $T5		Live IN: $7, 				Live OUT: $7, $T5, 
;POP 			Live IN: $T5, $7, 			Live OUT: $7, $T5, 
;STOREI $T5 $-2		Live IN: $T5, $7, 		Live OUT: $7, $-2, 
;MULTI $-2 $7 $T6	Live IN: $-2, $7, 			Live OUT: $T6, 
;STOREI $T6 $-1		Live IN: $T6, 			Live OUT: $-1, 
;LABEL label2		Live IN: $-1, 			Live OUT: $-1, 
;STOREI $-1 $T7		Live IN: $-1, 			Live OUT: $T7, 
;STOREI $T7 $6		Live IN: $T7, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 

;LABEL main		Live IN: 				Live OUT: 
;LINK 3			Live IN: 			Live OUT: 
;WRITES input		Live IN: 				Live OUT: 
;READI $-1		Live IN: 				Live OUT: $-1, 
;STOREI 1 $T8		Live IN: $-1, 			Live OUT: $-1, $T8, 
;NEI $-1 $T8 label3	Live IN: $T8, $-1, 			Live OUT: $-1, 
;STOREI 1 $T9		Live IN: 				Live OUT: $T9, 
;STOREI $T9 $-2		Live IN: $T9, 			Live OUT: $-2, 
;JUMP label4		Live IN: $-2, 			Live OUT: $-2, 
;LABEL label3		Live IN: $-1, 			Live OUT: $-1, 
;STOREI 1 $T10		Live IN: $-1, 			Live OUT: $T10, $-1, 
;LEI $-1 $T10 label5	Live IN: $T10, $-1, 		Live OUT: $-1, 
;PUSH $-1		Live IN: $-1, 				Live OUT: 
;PUSH 			Live IN: 				Live OUT: 
;PUSHREG		Live IN: 				Live OUT: 
;JSR factorial		Live IN: 				Live OUT: 
;POPREG			Live IN: 			Live OUT: 
;POP $T11		Live IN: 				Live OUT: $T11, 
;POP 			Live IN: $T11, 			Live OUT: $T11, 
;STOREI $T11 $-2	Live IN: $T11, 				Live OUT: $-2, 
;JUMP label6		Live IN: $-2, 			Live OUT: $-2, 
;LABEL label5		Live IN: 				Live OUT: 
;STOREI 0 $T12		Live IN: 				Live OUT: $T12, 
;STOREI $T12 $-2	Live IN: $T12, 				Live OUT: $-2, 
;LABEL label6		Live IN: $-2, 			Live OUT: $-2, 
;LABEL label4		Live IN: $-2, 			Live OUT: $-2, 
;WRITEI $-2		Live IN: $-2, 			Live OUT: 
;WRITES eol		Live IN: 				Live OUT: 
;STOREI 0 $T13		Live IN: 				Live OUT: $T13, 
;STOREI $T13 $6		Live IN: $T13, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 
;str input "Please enter an integer number: " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str eol "\n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;jsr main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;sys halt 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL factorial liveout: ; { $7  }
;label factorial 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 3 liveout: ; { $7  }
;link 16 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T1 liveout: ; { $T1 $7  }
; ensure(): $T1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
; loading $-3 to register r3
;move $-3 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;NEI $7 $T1 label1 liveout: ; { $7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; ensure(): $T1 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; spilling registers at the end of Basic Block
; spilling varialbe $T1
;move r3 $-3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREI 1 $T2 liveout: ; { $T2  }
; ensure(): $T2 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T2 }
; loading $-4 to register r3
;move $-4 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T2 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T2 }
;STOREI $T2 $6 liveout: ; {  }
; ensure(): $T2 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T2* }
; freeing unused variable r3
; spilling varialbe $T2
;move r3 $-4 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T2* }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label2 liveout: ; { $-1  }
; spilling registers at the end of Basic Block
;jmp label2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label1 liveout: ; { $7  }
; spilling registers at the end of Basic Block
;label label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T3 liveout: ; { $T3 $7  }
; ensure(): $T3 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
; loading $-5 to register r3
;move $-5 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
;SUBI $7 $T3 $T4 liveout: ; { $7 $T4  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T3* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T3* }
; ensure(): $T3 has register r3
; switching owner of register $7 to $T4 { r0-><null> || r1-><null> || r2->$7 || r3->$T3* }
;subi r3 r2 	; { r0-><null> || r1-><null> || r2->$T4 || r3->$T3* }
; freeing unused variable r3
; spilling varialbe $T3
;move r3 $-5 	; { r0-><null> || r1-><null> || r2->$T4* || r3->$T3* }
;PUSH $T4 liveout: ; { $7  }
; ensure(): $T4 has register r2
;push r2 	; { r0-><null> || r1-><null> || r2->$T4* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T4
;move r2 $-6 	; { r0-><null> || r1-><null> || r2->$T4* || r3-><null> }
;PUSH  liveout: ; { $7  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSHREG liveout: ; { $7  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JSR factorial liveout: ; { $7  }
; writing back global variables prior a function call
;jsr factorial 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { $7  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T5 liveout: ; { $7 $T5  }
; ensure(): $T5 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T5 }
; loading $-7 to register r3
;move $-7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5 }
;POP  liveout: ; { $7 $T5  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5* }
;STOREI $T5 $-2 liveout: ; { $7 $-2  }
; ensure(): $T5 has register r3
; ensure(): $-2 gets register r2 { r0-><null> || r1-><null> || r2->$-2 || r3->$T5* }
; loading $-2 to register r2
;move $-2 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T5* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T5* }
; freeing unused variable r3
; spilling varialbe $T5
;move r3 $-7 	; { r0-><null> || r1-><null> || r2->$-2* || r3->$T5* }
;MULTI $-2 $7 $T6 liveout: ; { $T6  }
; ensure(): $-2 has register r2
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2->$-2* || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2->$-2* || r3->$7 }
; switching owner of register $-2 to $T6 { r0-><null> || r1-><null> || r2->$-2* || r3->$7 }
; spilling varialbe $-2
;move r2 $-2 	; { r0-><null> || r1-><null> || r2->$-2* || r3->$7 }
;muli r3 r2 	; { r0-><null> || r1-><null> || r2->$T6 || r3->$7 }
; freeing unused variable r3
;STOREI $T6 $-1 liveout: ; { $-1  }
; ensure(): $T6 has register r2
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2->$T6* || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2->$T6* || r3->$-1 }
;move r2 r3 	; { r0-><null> || r1-><null> || r2->$T6* || r3->$-1 }
; freeing unused variable r2
; spilling varialbe $T6
;move r2 $-8 	; { r0-><null> || r1-><null> || r2->$T6* || r3->$-1* }
;LABEL label2 liveout: ; { $-1  }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1* }
;label label2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI $-1 $T7 liveout: ; { $T7  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; ensure(): $T7 gets register r2 { r0-><null> || r1-><null> || r2->$T7 || r3->$-1 }
; loading $-9 to register r2
;move $-9 r2 	; { r0-><null> || r1-><null> || r2->$T7 || r3->$-1 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T7 || r3->$-1 }
; freeing unused variable r3
;STOREI $T7 $6 liveout: ; {  }
; ensure(): $T7 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T7* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T7
;move r2 $-9 	; { r0-><null> || r1-><null> || r2->$T7* || r3-><null> }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL main liveout: ; {  }
;label main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 3 liveout: ; {  }
;link 16 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;WRITES input liveout: ; {  }
;sys writes input 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;READI $-1 liveout: ; { $-1  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;sys readi r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;STOREI 1 $T8 liveout: ; { $-1 $T8  }
; ensure(): $T8 gets register r2 { r0-><null> || r1-><null> || r2->$T8 || r3->$-1* }
; loading $-10 to register r2
;move $-10 r2 	; { r0-><null> || r1-><null> || r2->$T8 || r3->$-1* }
;move 1 r2 	; { r0-><null> || r1-><null> || r2->$T8 || r3->$-1* }
;NEI $-1 $T8 label3 liveout: ; { $-1  }
; ensure(): $-1 has register r3
; ensure(): $T8 has register r2
;cmpi r3 r2 	; { r0-><null> || r1-><null> || r2->$T8* || r3->$-1* }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2->$T8* || r3->$-1* }
; spilling varialbe $T8
;move r2 $-10 	; { r0-><null> || r1-><null> || r2->$T8* || r3-><null> }
;jne label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r2
;STOREI 1 $T9 liveout: ; { $T9  }
; ensure(): $T9 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T9 }
; loading $-11 to register r3
;move $-11 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T9 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T9 }
;STOREI $T9 $-2 liveout: ; { $-2  }
; ensure(): $T9 has register r3
; ensure(): $-2 gets register r2 { r0-><null> || r1-><null> || r2->$-2 || r3->$T9* }
; loading $-2 to register r2
;move $-2 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T9* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T9* }
; freeing unused variable r3
; spilling varialbe $T9
;move r3 $-11 	; { r0-><null> || r1-><null> || r2->$-2* || r3->$T9* }
;JUMP label4 liveout: ; { $-2  }
; spilling registers at the end of Basic Block
; spilling varialbe $-2
;move r2 $-2 	; { r0-><null> || r1-><null> || r2->$-2* || r3-><null> }
;jmp label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label3 liveout: ; { $-1  }
; spilling registers at the end of Basic Block
;label label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T10 liveout: ; { $T10 $-1  }
; ensure(): $T10 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T10 }
; loading $-12 to register r3
;move $-12 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T10 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T10 }
;LEI $-1 $T10 label5 liveout: ; { $-1  }
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T10* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T10* }
; ensure(): $T10 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T10* }
; spilling registers at the end of Basic Block
; spilling varialbe $T10
;move r3 $-12 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T10* }
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1 || r3-><null> }
;jle label5 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;PUSH $-1 liveout: ; {  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; freeing unused variable r3
;PUSH  liveout: ; {  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSHREG liveout: ; {  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JSR factorial liveout: ; {  }
; writing back global variables prior a function call
;jsr factorial 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; {  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T11 liveout: ; { $T11  }
; ensure(): $T11 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T11 }
; loading $-13 to register r3
;move $-13 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T11 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T11 }
;POP  liveout: ; { $T11  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T11* }
;STOREI $T11 $-2 liveout: ; { $-2  }
; ensure(): $T11 has register r3
; ensure(): $-2 gets register r2 { r0-><null> || r1-><null> || r2->$-2 || r3->$T11* }
; loading $-2 to register r2
;move $-2 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T11* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T11* }
; freeing unused variable r3
; spilling varialbe $T11
;move r3 $-13 	; { r0-><null> || r1-><null> || r2->$-2* || r3->$T11* }
;JUMP label6 liveout: ; { $-2  }
; spilling registers at the end of Basic Block
; spilling varialbe $-2
;move r2 $-2 	; { r0-><null> || r1-><null> || r2->$-2* || r3-><null> }
;jmp label6 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label5 liveout: ; {  }
; spilling registers at the end of Basic Block
;label label5 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T12 liveout: ; { $T12  }
; ensure(): $T12 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T12 }
; loading $-14 to register r3
;move $-14 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T12 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T12 }
;STOREI $T12 $-2 liveout: ; { $-2  }
; ensure(): $T12 has register r3
; ensure(): $-2 gets register r2 { r0-><null> || r1-><null> || r2->$-2 || r3->$T12* }
; loading $-2 to register r2
;move $-2 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T12* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T12* }
; freeing unused variable r3
; spilling varialbe $T12
;move r3 $-14 	; { r0-><null> || r1-><null> || r2->$-2* || r3->$T12* }
;LABEL label6 liveout: ; { $-2  }
; spilling registers at the end of Basic Block
; spilling varialbe $-2
;move r2 $-2 	; { r0-><null> || r1-><null> || r2->$-2* || r3-><null> }
;label label6 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label4 liveout: ; { $-2  }
; spilling registers at the end of Basic Block
;label label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;WRITEI $-2 liveout: ; {  }
; ensure(): $-2 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; loading $-2 to register r3
;move $-2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
;sys writei r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; freeing unused variable r3
;WRITES eol liveout: ; {  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T13 liveout: ; { $T13  }
; ensure(): $T13 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T13 }
; loading $-15 to register r3
;move $-15 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T13 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T13 }
;STOREI $T13 $6 liveout: ; {  }
; ensure(): $T13 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T13* }
; freeing unused variable r3
; spilling varialbe $T13
;move r3 $-15 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T13* }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }

str input "Please enter an integer number: "
str eol "\n"
push
push
push
push
push
jsr main
sys halt
label factorial
link 16
move $-3 r3
move 1 r3
move $7 r2
cmpi r2 r3
move r3 $-3
move r2 $7
jne label1
move $-4 r3
move 1 r3
move r3 $6
move r3 $-4
unlnk
ret
jmp label2
label label1
move $-5 r3
move 1 r3
move $7 r2
subi r3 r2
move r3 $-5
push r2
move r2 $-6
push
push r0
push r1
push r2
push r3
jsr factorial
pop r3
pop r2
pop r1
pop r0
move $-7 r3
pop r3
pop
move $-2 r2
move r3 r2
move r3 $-7
move $7 r3
move r2 $-2
muli r3 r2
move $-1 r3
move r2 r3
move r2 $-8
move r3 $-1
label label2
move $-1 r3
move $-9 r2
move r3 r2
move r2 $6
move r2 $-9
unlnk
ret
label main
link 16
sys writes input
move $-1 r3
sys readi r3
move $-10 r2
move 1 r2
cmpi r3 r2
move r3 $-1
move r2 $-10
jne label3
move $-11 r3
move 1 r3
move $-2 r2
move r3 r2
move r3 $-11
move r2 $-2
jmp label4
label label3
move $-12 r3
move 1 r3
move $-1 r2
cmpi r2 r3
move r3 $-12
move r2 $-1
jle label5
move $-1 r3
push r3
push
push r0
push r1
push r2
push r3
jsr factorial
pop r3
pop r2
pop r1
pop r0
move $-13 r3
pop r3
pop
move $-2 r2
move r3 r2
move r3 $-13
move r2 $-2
jmp label6
label label5
move $-14 r3
move 0 r3
move $-2 r2
move r3 r2
move r3 $-14
move r2 $-2
label label6
label label4
move $-2 r3
sys writei r3
sys writes eol
move $-15 r3
move 0 r3
move r3 $6
move r3 $-15
unlnk
ret
