; Error while creating symbol table
; Error while creating symbol table
;Symbol table GLOBAL
; return type: null
; subscope local var size: 0
;scope type: GLOBAL_TYPE 
;name space type STRING value " " local slot location: -1
;name eol type STRING value "\n" local slot location: -2
;name smS type STRING value " is smaller than " local slot location: -3
;name leS type STRING value " is larger than or equal to " local slot location: -4


;Symbol table INCRE
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name i type INT parameter slot location: 7


;Symbol table main
; return type: VOID
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name b type FLOAT local slot location: -1
;name c type FLOAT local slot location: -2
;name res type INT local slot location: -3


;Symbol table IsLargerThanOrEqualTo
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name j type FLOAT parameter slot location: 7
;name k type FLOAT parameter slot location: 8


;Symbol table BLOCK 1
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table IsSmallerThan
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name j type FLOAT parameter slot location: 7
;name k type FLOAT parameter slot location: 8


;Symbol table BLOCK 2
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


; searching slot location for -- i -- in function scope INCRE and get location 7

;OPT BUG
; SUBSCOPE for function scope: INCRE

;return assignExpr: i+1
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; pre-conversion assignOutputID: b
; searching slot location for -- b -- in function scope main and get location -1

; post-conversion assignOutputID: $-1
; pre-conversion assignOutputID: c
; searching slot location for -- c -- in function scope main and get location -2

; post-conversion assignOutputID: $-2
; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- c -- in function scope main and get location -2

; pre-conversion assignOutputID: res
; searching slot location for -- res -- in function scope main and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- res -- in function scope main and get location -3

; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- c -- in function scope main and get location -2

; pre-conversion assignOutputID: res
; searching slot location for -- res -- in function scope main and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- res -- in function scope main and get location -3

; pre-conversion assignOutputID: b
; searching slot location for -- b -- in function scope main and get location -1

; post-conversion assignOutputID: $-1
; pre-conversion assignOutputID: c
; searching slot location for -- c -- in function scope main and get location -2

; post-conversion assignOutputID: $-2
; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- c -- in function scope main and get location -2

; pre-conversion assignOutputID: res
; searching slot location for -- res -- in function scope main and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- res -- in function scope main and get location -3

; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- c -- in function scope main and get location -2

; pre-conversion assignOutputID: res
; searching slot location for -- res -- in function scope main and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- res -- in function scope main and get location -3

; pre-conversion assignOutputID: b
; searching slot location for -- b -- in function scope main and get location -1

; post-conversion assignOutputID: $-1
; pre-conversion assignOutputID: c
; searching slot location for -- c -- in function scope main and get location -2

; post-conversion assignOutputID: $-2
; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- c -- in function scope main and get location -2

; pre-conversion assignOutputID: res
; searching slot location for -- res -- in function scope main and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- res -- in function scope main and get location -3

; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- c -- in function scope main and get location -2

; pre-conversion assignOutputID: res
; searching slot location for -- res -- in function scope main and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- b -- in function scope main and get location -1

; searching slot location for -- c -- in function scope main and get location -2

; searching slot location for -- res -- in function scope main and get location -3

; SUBSCOPE for function scope: IsLargerThanOrEqualTo
; SUBSCOPE block ID: 1 scopeType: IF

; searching slot location for -- j -- in function scope IsLargerThanOrEqualTo and get location 7

;exit Cond: >= :: j :: k
; searching slot location for -- j -- in function scope IsLargerThanOrEqualTo and get location 7

; searching slot location for -- k -- in function scope IsLargerThanOrEqualTo and get location 8

;OPT BUG
; SUBSCOPE for function scope: IsLargerThanOrEqualTo
; SUBSCOPE block ID: 1 scopeType: IF

;return assignExpr: 1
;left: 1
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsLargerThanOrEqualTo
; SUBSCOPE block ID: 2 scopeType: ELSE

;OPT BUG
; SUBSCOPE for function scope: IsLargerThanOrEqualTo

;return assignExpr: 0
;left: 1
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsSmallerThan
; SUBSCOPE block ID: 3 scopeType: IF

; searching slot location for -- j -- in function scope IsSmallerThan and get location 7

; searching slot location for -- j -- in function scope IsSmallerThan and get location 7

; searching slot location for -- k -- in function scope IsSmallerThan and get location 8

; searching slot location for -- k -- in function scope IsSmallerThan and get location 8

;exit Cond: != :: IsLargerThanOrEqualTo(j,k) :: 0
;OPT BUG
; SUBSCOPE for function scope: IsSmallerThan
; SUBSCOPE block ID: 3 scopeType: IF

;return assignExpr: 0
;left: 0
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsSmallerThan
; SUBSCOPE block ID: 4 scopeType: ELSE

;OPT BUG
; SUBSCOPE for function scope: IsSmallerThan

;return assignExpr: 1
;left: 0
;right: 
;IRAction.isIF_ELSE_sameReturn(): false

;IR code
;PUSH
;JSR main
;HALT

;LABEL INCRE		 Under Func Scope: INCRE
;LINK 1			 Under Func Scope: INCRE
;STOREI 1 $T1		 Under Func Scope: INCRE
;ADDI $7 $T1 $T2	 Under Func Scope: INCRE
;STOREI $T2 $6		 Under Func Scope: INCRE
;UNLINK			 Under Func Scope: INCRE
;RET			 Under Func Scope: INCRE

;LABEL main		 Under Func Scope: main
;LINK 4			 Under Func Scope: main
;STOREF 5.2 $T3		 Under Func Scope: main
;STOREF $T3 $-1		 Under Func Scope: main
;STOREF 6.4 $T4		 Under Func Scope: main
;STOREF $T4 $-2		 Under Func Scope: main
;PUSH $-2		 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR IsLargerThanOrEqualTo	 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T5		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREI $T5 $-3		 Under Func Scope: main
;WRITEF $-1		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-2		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITES leS		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEI $-3		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;PUSH $-2		 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR IsSmallerThan	 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T6		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREI $T6 $-3		 Under Func Scope: main
;WRITEF $-1		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-2		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITES smS		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEI $-3		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;STOREF 7.2 $T7		 Under Func Scope: main
;STOREF $T7 $-1		 Under Func Scope: main
;STOREF 7.2 $T8		 Under Func Scope: main
;STOREF $T8 $-2		 Under Func Scope: main
;PUSH $-2		 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR IsLargerThanOrEqualTo	 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T9		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREI $T9 $-3		 Under Func Scope: main
;WRITEF $-1		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-2		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITES leS		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEI $-3		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;PUSH $-2		 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR IsSmallerThan	 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T10		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREI $T10 $-3	 Under Func Scope: main
;WRITEF $-1		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-2		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITES smS		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEI $-3		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;STOREF 21.2 $T11	 Under Func Scope: main
;STOREF $T11 $-1	 Under Func Scope: main
;STOREF 19.8 $T12	 Under Func Scope: main
;STOREF $T12 $-2	 Under Func Scope: main
;PUSH $-2		 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR IsLargerThanOrEqualTo	 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T13		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREI $T13 $-3	 Under Func Scope: main
;WRITEF $-1		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-2		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITES leS		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEI $-3		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;PUSH $-2		 Under Func Scope: main
;PUSH $-1		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR IsSmallerThan	 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T14		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREI $T14 $-3	 Under Func Scope: main
;WRITEF $-1		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEF $-2		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITES smS		 Under Func Scope: main
;WRITES space		 Under Func Scope: main
;WRITEI $-3		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;UNLINK			 Under Func Scope: main
;RET			 Under Func Scope: main

;LABEL IsLargerThanOrEqualTo	 Under Func Scope: IsLargerThanOrEqualTo
;LINK 1			 Under Func Scope: IsLargerThanOrEqualTo
;STOREF $8 $T15		 Under Func Scope: IsLargerThanOrEqualTo
;LTF $7 $T15 label1	 Under Func Scope: IsLargerThanOrEqualTo
;STOREI 1 $T16		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI $T16 $6		 Under Func Scope: IsLargerThanOrEqualTo
;UNLINK			 Under Func Scope: IsLargerThanOrEqualTo
;RET			 Under Func Scope: IsLargerThanOrEqualTo
;JUMP label2		 Under Func Scope: IsLargerThanOrEqualTo
;LABEL label1		 Under Func Scope: IsLargerThanOrEqualTo
;LABEL label2		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI 0 $T17		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI $T17 $6		 Under Func Scope: IsLargerThanOrEqualTo
;UNLINK			 Under Func Scope: IsLargerThanOrEqualTo
;RET			 Under Func Scope: IsLargerThanOrEqualTo

;LABEL IsSmallerThan	 Under Func Scope: IsSmallerThan
;LINK 1			 Under Func Scope: IsSmallerThan
;PUSH $8		 Under Func Scope: IsSmallerThan
;PUSH $7		 Under Func Scope: IsSmallerThan
;PUSH 			 Under Func Scope: IsSmallerThan
;PUSHREG		 Under Func Scope: IsSmallerThan
;JSR IsLargerThanOrEqualTo	 Under Func Scope: IsSmallerThan
;POPREG			 Under Func Scope: IsSmallerThan
;POP $T18		 Under Func Scope: IsSmallerThan
;POP 			 Under Func Scope: IsSmallerThan
;POP 			 Under Func Scope: IsSmallerThan
;STOREI 0 $T19		 Under Func Scope: IsSmallerThan
;EQI $T18 $T19 label3	 Under Func Scope: IsSmallerThan
;STOREI 0 $T20		 Under Func Scope: IsSmallerThan
;STOREI $T20 $6		 Under Func Scope: IsSmallerThan
;UNLINK			 Under Func Scope: IsSmallerThan
;RET			 Under Func Scope: IsSmallerThan
;JUMP label4		 Under Func Scope: IsSmallerThan
;LABEL label3		 Under Func Scope: IsSmallerThan
;LABEL label4		 Under Func Scope: IsSmallerThan
;STOREI 1 $T21		 Under Func Scope: IsSmallerThan
;STOREI $T21 $6		 Under Func Scope: IsSmallerThan
;UNLINK			 Under Func Scope: IsSmallerThan
;RET			 Under Func Scope: IsSmallerThan

; ========= CFG IR NODE =========

;LABEL INCRE		P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL INCRE			S: ;STOREI 1 $T1	
;STOREI 1 $T1		P: ;LINK 1				S: ;ADDI $7 $T1 $T2	
;ADDI $7 $T1 $T2	P: ;STOREI 1 $T1			S: ;STOREI $T2 $6	
;STOREI $T2 $6		P: ;ADDI $7 $T1 $T2		S: ;UNLINK	
;UNLINK			P: ;STOREI $T2 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL main		P: 					S: ;LINK 4		 <== BB leader
;LINK 4			P: ;LABEL main			S: ;STOREF 5.2 $T3	
;STOREF 5.2 $T3		P: ;LINK 4			S: ;STOREF $T3 $-1	
;STOREF $T3 $-1		P: ;STOREF 5.2 $T3		S: ;STOREF 6.4 $T4	
;STOREF 6.4 $T4		P: ;STOREF $T3 $-1		S: ;STOREF $T4 $-2	
;STOREF $T4 $-2		P: ;STOREF 6.4 $T4		S: ;PUSH $-2	
;PUSH $-2		P: ;STOREF $T4 $-2			S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $-2				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsLargerThanOrEqualTo	
;JSR IsLargerThanOrEqualTo	P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR IsLargerThanOrEqualTo		S: ;POP $T5	
;POP $T5		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T5			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI $T5 $-3	
;STOREI $T5 $-3		P: ;POP 				S: ;WRITEF $-1	
;WRITEF $-1		P: ;STOREI $T5 $-3			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-1			S: ;WRITEF $-2	
;WRITEF $-2		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-2			S: ;WRITES leS	
;WRITES leS		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITES leS			S: ;WRITEI $-3	
;WRITEI $-3		P: ;WRITES space			S: ;WRITES eol	
;WRITES eol		P: ;WRITEI $-3			S: ;PUSH $-2	
;PUSH $-2		P: ;WRITES eol				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $-2				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsSmallerThan	
;JSR IsSmallerThan	P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR IsSmallerThan		S: ;POP $T6	
;POP $T6		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T6			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI $T6 $-3	
;STOREI $T6 $-3		P: ;POP 				S: ;WRITEF $-1	
;WRITEF $-1		P: ;STOREI $T6 $-3			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-1			S: ;WRITEF $-2	
;WRITEF $-2		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-2			S: ;WRITES smS	
;WRITES smS		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITES smS			S: ;WRITEI $-3	
;WRITEI $-3		P: ;WRITES space			S: ;WRITES eol	
;WRITES eol		P: ;WRITEI $-3			S: ;STOREF 7.2 $T7	
;STOREF 7.2 $T7		P: ;WRITES eol			S: ;STOREF $T7 $-1	
;STOREF $T7 $-1		P: ;STOREF 7.2 $T7		S: ;STOREF 7.2 $T8	
;STOREF 7.2 $T8		P: ;STOREF $T7 $-1		S: ;STOREF $T8 $-2	
;STOREF $T8 $-2		P: ;STOREF 7.2 $T8		S: ;PUSH $-2	
;PUSH $-2		P: ;STOREF $T8 $-2			S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $-2				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsLargerThanOrEqualTo	
;JSR IsLargerThanOrEqualTo	P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR IsLargerThanOrEqualTo		S: ;POP $T9	
;POP $T9		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T9			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI $T9 $-3	
;STOREI $T9 $-3		P: ;POP 				S: ;WRITEF $-1	
;WRITEF $-1		P: ;STOREI $T9 $-3			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-1			S: ;WRITEF $-2	
;WRITEF $-2		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-2			S: ;WRITES leS	
;WRITES leS		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITES leS			S: ;WRITEI $-3	
;WRITEI $-3		P: ;WRITES space			S: ;WRITES eol	
;WRITES eol		P: ;WRITEI $-3			S: ;PUSH $-2	
;PUSH $-2		P: ;WRITES eol				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $-2				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsSmallerThan	
;JSR IsSmallerThan	P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR IsSmallerThan		S: ;POP $T10	
;POP $T10		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T10			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI $T10 $-3	
;STOREI $T10 $-3	P: ;POP 				S: ;WRITEF $-1	
;WRITEF $-1		P: ;STOREI $T10 $-3			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-1			S: ;WRITEF $-2	
;WRITEF $-2		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-2			S: ;WRITES smS	
;WRITES smS		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITES smS			S: ;WRITEI $-3	
;WRITEI $-3		P: ;WRITES space			S: ;WRITES eol	
;WRITES eol		P: ;WRITEI $-3			S: ;STOREF 21.2 $T11	
;STOREF 21.2 $T11	P: ;WRITES eol				S: ;STOREF $T11 $-1	
;STOREF $T11 $-1	P: ;STOREF 21.2 $T11			S: ;STOREF 19.8 $T12	
;STOREF 19.8 $T12	P: ;STOREF $T11 $-1			S: ;STOREF $T12 $-2	
;STOREF $T12 $-2	P: ;STOREF 19.8 $T12			S: ;PUSH $-2	
;PUSH $-2		P: ;STOREF $T12 $-2			S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $-2				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsLargerThanOrEqualTo	
;JSR IsLargerThanOrEqualTo	P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR IsLargerThanOrEqualTo		S: ;POP $T13	
;POP $T13		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T13			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI $T13 $-3	
;STOREI $T13 $-3	P: ;POP 				S: ;WRITEF $-1	
;WRITEF $-1		P: ;STOREI $T13 $-3			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-1			S: ;WRITEF $-2	
;WRITEF $-2		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-2			S: ;WRITES leS	
;WRITES leS		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITES leS			S: ;WRITEI $-3	
;WRITEI $-3		P: ;WRITES space			S: ;WRITES eol	
;WRITES eol		P: ;WRITEI $-3			S: ;PUSH $-2	
;PUSH $-2		P: ;WRITES eol				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $-2				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsSmallerThan	
;JSR IsSmallerThan	P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR IsSmallerThan		S: ;POP $T14	
;POP $T14		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T14			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI $T14 $-3	
;STOREI $T14 $-3	P: ;POP 				S: ;WRITEF $-1	
;WRITEF $-1		P: ;STOREI $T14 $-3			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-1			S: ;WRITEF $-2	
;WRITEF $-2		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-2			S: ;WRITES smS	
;WRITES smS		P: ;WRITES space			S: ;WRITES space	
;WRITES space		P: ;WRITES smS			S: ;WRITEI $-3	
;WRITEI $-3		P: ;WRITES space			S: ;WRITES eol	
;WRITES eol		P: ;WRITEI $-3			S: ;UNLINK	
;UNLINK			P: ;WRITES eol			S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL IsLargerThanOrEqualTo	P: 				S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL IsLargerThanOrEqualTo		S: ;STOREF $8 $T15	
;STOREF $8 $T15		P: ;LINK 1			S: ;LTF $7 $T15 label1	
;LTF $7 $T15 label1	P: ;STOREF $8 $T15			S: ;STOREI 1 $T16	;LABEL label1	
;STOREI 1 $T16		P: ;LTF $7 $T15 label1		S: ;STOREI $T16 $6		 <== BB leader
;STOREI $T16 $6		P: ;STOREI 1 $T16		S: ;UNLINK	
;UNLINK			P: ;STOREI $T16 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label2		P: ;RET				S: ;LABEL label2	
;LABEL label1		P: ;LTF $7 $T15 label1		S: ;LABEL label2		 <== BB leader
;LABEL label2		P: ;LABEL label1	;JUMP label2		S: ;STOREI 0 $T17		 <== BB leader
;STOREI 0 $T17		P: ;LABEL label2			S: ;STOREI $T17 $6	
;STOREI $T17 $6		P: ;STOREI 0 $T17		S: ;UNLINK	
;UNLINK			P: ;STOREI $T17 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL IsSmallerThan	P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL IsSmallerThan		S: ;PUSH $8	
;PUSH $8		P: ;LINK 1				S: ;PUSH $7	
;PUSH $7		P: ;PUSH $8				S: ;PUSH 	
;PUSH 			P: ;PUSH $7			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsLargerThanOrEqualTo	
;JSR IsLargerThanOrEqualTo	P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR IsLargerThanOrEqualTo		S: ;POP $T18	
;POP $T18		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T18			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI 0 $T19	
;STOREI 0 $T19		P: ;POP 				S: ;EQI $T18 $T19 label3	
;EQI $T18 $T19 label3	P: ;STOREI 0 $T19			S: ;STOREI 0 $T20	;LABEL label3	
;STOREI 0 $T20		P: ;EQI $T18 $T19 label3		S: ;STOREI $T20 $6		 <== BB leader
;STOREI $T20 $6		P: ;STOREI 0 $T20		S: ;UNLINK	
;UNLINK			P: ;STOREI $T20 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label4		P: ;RET				S: ;LABEL label4	
;LABEL label3		P: ;EQI $T18 $T19 label3		S: ;LABEL label4		 <== BB leader
;LABEL label4		P: ;LABEL label3	;JUMP label4		S: ;STOREI 1 $T21		 <== BB leader
;STOREI 1 $T21		P: ;LABEL label4			S: ;STOREI $T21 $6	
;STOREI $T21 $6		P: ;STOREI 1 $T21		S: ;UNLINK	
;UNLINK			P: ;STOREI $T21 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

; ========= CFG IR NODE / KILL/ GEN =========

;LABEL INCRE		Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;STOREI 1 $T1		Kill: $T1, 			Gen: 
;ADDI $7 $T1 $T2	Kill: $T2, 				Gen: $T1, $7, 
;STOREI $T2 $6		Kill: $6, 			Gen: $T2, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL main		Kill: 				Gen: 
;LINK 4			Kill: 				Gen: 
;STOREF 5.2 $T3		Kill: $T3, 			Gen: 
;STOREF $T3 $-1		Kill: $-1, 			Gen: $T3, 
;STOREF 6.4 $T4		Kill: $T4, 			Gen: 
;STOREF $T4 $-2		Kill: $-2, 			Gen: $T4, 
;PUSH $-2		Kill: 					Gen: $-2, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsLargerThanOrEqualTo	Kill: 			Gen: 
;POPREG			Kill: 				Gen: 
;POP $T5		Kill: $T5, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T5 $-3		Kill: $-3, 			Gen: $T5, 
;WRITEF $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-2		Kill: 				Gen: $-2, 
;WRITES space		Kill: 				Gen: 
;WRITES leS		Kill: 				Gen: 
;WRITES space		Kill: 				Gen: 
;WRITEI $-3		Kill: 				Gen: $-3, 
;WRITES eol		Kill: 				Gen: 
;PUSH $-2		Kill: 					Gen: $-2, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsSmallerThan	Kill: 				Gen: 
;POPREG			Kill: 				Gen: 
;POP $T6		Kill: $T6, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T6 $-3		Kill: $-3, 			Gen: $T6, 
;WRITEF $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-2		Kill: 				Gen: $-2, 
;WRITES space		Kill: 				Gen: 
;WRITES smS		Kill: 				Gen: 
;WRITES space		Kill: 				Gen: 
;WRITEI $-3		Kill: 				Gen: $-3, 
;WRITES eol		Kill: 				Gen: 
;STOREF 7.2 $T7		Kill: $T7, 			Gen: 
;STOREF $T7 $-1		Kill: $-1, 			Gen: $T7, 
;STOREF 7.2 $T8		Kill: $T8, 			Gen: 
;STOREF $T8 $-2		Kill: $-2, 			Gen: $T8, 
;PUSH $-2		Kill: 					Gen: $-2, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsLargerThanOrEqualTo	Kill: 			Gen: 
;POPREG			Kill: 				Gen: 
;POP $T9		Kill: $T9, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T9 $-3		Kill: $-3, 			Gen: $T9, 
;WRITEF $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-2		Kill: 				Gen: $-2, 
;WRITES space		Kill: 				Gen: 
;WRITES leS		Kill: 				Gen: 
;WRITES space		Kill: 				Gen: 
;WRITEI $-3		Kill: 				Gen: $-3, 
;WRITES eol		Kill: 				Gen: 
;PUSH $-2		Kill: 					Gen: $-2, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsSmallerThan	Kill: 				Gen: 
;POPREG			Kill: 				Gen: 
;POP $T10		Kill: $T10, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T10 $-3	Kill: $-3, 				Gen: $T10, 
;WRITEF $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-2		Kill: 				Gen: $-2, 
;WRITES space		Kill: 				Gen: 
;WRITES smS		Kill: 				Gen: 
;WRITES space		Kill: 				Gen: 
;WRITEI $-3		Kill: 				Gen: $-3, 
;WRITES eol		Kill: 				Gen: 
;STOREF 21.2 $T11	Kill: $T11, 				Gen: 
;STOREF $T11 $-1	Kill: $-1, 				Gen: $T11, 
;STOREF 19.8 $T12	Kill: $T12, 				Gen: 
;STOREF $T12 $-2	Kill: $-2, 				Gen: $T12, 
;PUSH $-2		Kill: 					Gen: $-2, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsLargerThanOrEqualTo	Kill: 			Gen: 
;POPREG			Kill: 				Gen: 
;POP $T13		Kill: $T13, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T13 $-3	Kill: $-3, 				Gen: $T13, 
;WRITEF $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-2		Kill: 				Gen: $-2, 
;WRITES space		Kill: 				Gen: 
;WRITES leS		Kill: 				Gen: 
;WRITES space		Kill: 				Gen: 
;WRITEI $-3		Kill: 				Gen: $-3, 
;WRITES eol		Kill: 				Gen: 
;PUSH $-2		Kill: 					Gen: $-2, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsSmallerThan	Kill: 				Gen: 
;POPREG			Kill: 				Gen: 
;POP $T14		Kill: $T14, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T14 $-3	Kill: $-3, 				Gen: $T14, 
;WRITEF $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;WRITEF $-2		Kill: 				Gen: $-2, 
;WRITES space		Kill: 				Gen: 
;WRITES smS		Kill: 				Gen: 
;WRITES space		Kill: 				Gen: 
;WRITEI $-3		Kill: 				Gen: $-3, 
;WRITES eol		Kill: 				Gen: 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL IsLargerThanOrEqualTo	Kill: 			Gen: 
;LINK 1			Kill: 				Gen: 
;STOREF $8 $T15		Kill: $T15, 			Gen: $8, 
;LTF $7 $T15 label1	Kill: 				Gen: $7, $T15, 
;STOREI 1 $T16		Kill: $T16, 			Gen: 
;STOREI $T16 $6		Kill: $6, 			Gen: $T16, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label2		Kill: 				Gen: 
;LABEL label1		Kill: 				Gen: 
;LABEL label2		Kill: 				Gen: 
;STOREI 0 $T17		Kill: $T17, 			Gen: 
;STOREI $T17 $6		Kill: $6, 			Gen: $T17, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL IsSmallerThan	Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;PUSH $8		Kill: 					Gen: $8, 
;PUSH $7		Kill: 					Gen: $7, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsLargerThanOrEqualTo	Kill: 			Gen: 
;POPREG			Kill: 				Gen: 
;POP $T18		Kill: $T18, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI 0 $T19		Kill: $T19, 			Gen: 
;EQI $T18 $T19 label3	Kill: 				Gen: $T19, $T18, 
;STOREI 0 $T20		Kill: $T20, 			Gen: 
;STOREI $T20 $6		Kill: $6, 			Gen: $T20, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label4		Kill: 				Gen: 
;LABEL label3		Kill: 				Gen: 
;LABEL label4		Kill: 				Gen: 
;STOREI 1 $T21		Kill: $T21, 			Gen: 
;STOREI $T21 $6		Kill: $6, 			Gen: $T21, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

; ========= CFG IR NODE / LIVE IN / LIVE OUT =========

;LABEL INCRE		Live IN: $7, 			Live OUT: $7, 
;LINK 1			Live IN: $7, 			Live OUT: $7, 
;STOREI 1 $T1		Live IN: $7, 			Live OUT: $T1, $7, 
;ADDI $7 $T1 $T2	Live IN: $7, $T1, 			Live OUT: $T2, 
;STOREI $T2 $6		Live IN: $T2, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 

;LABEL main		Live IN: 				Live OUT: 
;LINK 4			Live IN: 			Live OUT: 
;STOREF 5.2 $T3		Live IN: 			Live OUT: $T3, 
;STOREF $T3 $-1		Live IN: $T3, 			Live OUT: $-1, 
;STOREF 6.4 $T4		Live IN: $-1, 			Live OUT: $-1, $T4, 
;STOREF $T4 $-2		Live IN: $T4, $-1, 		Live OUT: $-2, $-1, 
;PUSH $-2		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH $-1		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH 			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;PUSHREG		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;JSR IsLargerThanOrEqualTo	Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POPREG			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POP $T5		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, $T5, 
;POP 			Live IN: $-2, $-1, $T5, 		Live OUT: $-2, $-1, $T5, 
;POP 			Live IN: $-2, $-1, $T5, 		Live OUT: $-2, $-1, $T5, 
;STOREI $T5 $-3		Live IN: $-2, $-1, $T5, 		Live OUT: $-2, $-1, $-3, 
;WRITEF $-1		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES space		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITEF $-2		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES space		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES leS		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES space		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITEI $-3		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, 
;WRITES eol		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH $-2		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH $-1		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH 			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;PUSHREG		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;JSR IsSmallerThan	Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;POPREG			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POP $T6		Live IN: $-2, $-1, 			Live OUT: $-2, $T6, $-1, 
;POP 			Live IN: $T6, $-2, $-1, 		Live OUT: $-2, $T6, $-1, 
;POP 			Live IN: $T6, $-2, $-1, 		Live OUT: $-2, $T6, $-1, 
;STOREI $T6 $-3		Live IN: $T6, $-2, $-1, 		Live OUT: $-2, $-1, $-3, 
;WRITEF $-1		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-3, 
;WRITES space		Live IN: $-2, $-3, 		Live OUT: $-2, $-3, 
;WRITEF $-2		Live IN: $-2, $-3, 			Live OUT: $-3, 
;WRITES space		Live IN: $-3, 			Live OUT: $-3, 
;WRITES smS		Live IN: $-3, 			Live OUT: $-3, 
;WRITES space		Live IN: $-3, 			Live OUT: $-3, 
;WRITEI $-3		Live IN: $-3, 			Live OUT: 
;WRITES eol		Live IN: 				Live OUT: 
;STOREF 7.2 $T7		Live IN: 			Live OUT: $T7, 
;STOREF $T7 $-1		Live IN: $T7, 			Live OUT: $-1, 
;STOREF 7.2 $T8		Live IN: $-1, 			Live OUT: $-1, $T8, 
;STOREF $T8 $-2		Live IN: $T8, $-1, 		Live OUT: $-2, $-1, 
;PUSH $-2		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH $-1		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH 			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;PUSHREG		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;JSR IsLargerThanOrEqualTo	Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POPREG			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POP $T9		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, $T9, 
;POP 			Live IN: $-2, $-1, $T9, 		Live OUT: $-2, $-1, $T9, 
;POP 			Live IN: $-2, $-1, $T9, 		Live OUT: $-2, $-1, $T9, 
;STOREI $T9 $-3		Live IN: $-2, $-1, $T9, 		Live OUT: $-2, $-1, $-3, 
;WRITEF $-1		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES space		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITEF $-2		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES space		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES leS		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES space		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITEI $-3		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, 
;WRITES eol		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH $-2		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH $-1		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH 			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;PUSHREG		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;JSR IsSmallerThan	Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;POPREG			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POP $T10		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, $T10, 
;POP 			Live IN: $-2, $T10, $-1, 		Live OUT: $-2, $-1, $T10, 
;POP 			Live IN: $-2, $T10, $-1, 		Live OUT: $-2, $-1, $T10, 
;STOREI $T10 $-3	Live IN: $-2, $T10, $-1, 		Live OUT: $-2, $-1, $-3, 
;WRITEF $-1		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-3, 
;WRITES space		Live IN: $-2, $-3, 		Live OUT: $-2, $-3, 
;WRITEF $-2		Live IN: $-2, $-3, 			Live OUT: $-3, 
;WRITES space		Live IN: $-3, 			Live OUT: $-3, 
;WRITES smS		Live IN: $-3, 			Live OUT: $-3, 
;WRITES space		Live IN: $-3, 			Live OUT: $-3, 
;WRITEI $-3		Live IN: $-3, 			Live OUT: 
;WRITES eol		Live IN: 				Live OUT: 
;STOREF 21.2 $T11	Live IN: 				Live OUT: $T11, 
;STOREF $T11 $-1	Live IN: $T11, 				Live OUT: $-1, 
;STOREF 19.8 $T12	Live IN: $-1, 				Live OUT: $-1, $T12, 
;STOREF $T12 $-2	Live IN: $T12, $-1, 			Live OUT: $-2, $-1, 
;PUSH $-2		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH $-1		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH 			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;PUSHREG		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;JSR IsLargerThanOrEqualTo	Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POPREG			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POP $T13		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, $T13, 
;POP 			Live IN: $-2, $T13, $-1, 		Live OUT: $-2, $-1, $T13, 
;POP 			Live IN: $-2, $T13, $-1, 		Live OUT: $-2, $-1, $T13, 
;STOREI $T13 $-3	Live IN: $-2, $T13, $-1, 		Live OUT: $-2, $-1, $-3, 
;WRITEF $-1		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES space		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITEF $-2		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES space		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES leS		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITES space		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, $-3, 
;WRITEI $-3		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-1, 
;WRITES eol		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH $-2		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH $-1		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;PUSH 			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;PUSHREG		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;JSR IsSmallerThan	Live IN: $-2, $-1, 			Live OUT: $-2, $-1, 
;POPREG			Live IN: $-2, $-1, 		Live OUT: $-2, $-1, 
;POP $T14		Live IN: $-2, $-1, 			Live OUT: $-2, $-1, $T14, 
;POP 			Live IN: $T14, $-2, $-1, 		Live OUT: $-2, $-1, $T14, 
;POP 			Live IN: $T14, $-2, $-1, 		Live OUT: $-2, $-1, $T14, 
;STOREI $T14 $-3	Live IN: $T14, $-2, $-1, 		Live OUT: $-2, $-1, $-3, 
;WRITEF $-1		Live IN: $-2, $-1, $-3, 		Live OUT: $-2, $-3, 
;WRITES space		Live IN: $-2, $-3, 		Live OUT: $-2, $-3, 
;WRITEF $-2		Live IN: $-2, $-3, 			Live OUT: $-3, 
;WRITES space		Live IN: $-3, 			Live OUT: $-3, 
;WRITES smS		Live IN: $-3, 			Live OUT: $-3, 
;WRITES space		Live IN: $-3, 			Live OUT: $-3, 
;WRITEI $-3		Live IN: $-3, 			Live OUT: 
;WRITES eol		Live IN: 				Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 

;LABEL IsLargerThanOrEqualTo	Live IN: $8, $7, 		Live OUT: $7, $8, 
;LINK 1			Live IN: $8, $7, 		Live OUT: $7, $8, 
;STOREF $8 $T15		Live IN: $8, $7, 		Live OUT: $7, $T15, 
;LTF $7 $T15 label1	Live IN: $7, $T15, 			Live OUT: 
;STOREI 1 $T16		Live IN: 				Live OUT: $T16, 
;STOREI $T16 $6		Live IN: $T16, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 
;JUMP label2		Live IN: 				Live OUT: 
;LABEL label1		Live IN: 				Live OUT: 
;LABEL label2		Live IN: 				Live OUT: 
;STOREI 0 $T17		Live IN: 				Live OUT: $T17, 
;STOREI $T17 $6		Live IN: $T17, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 

;LABEL IsSmallerThan	Live IN: $8, $7, 			Live OUT: $7, $8, 
;LINK 1			Live IN: $8, $7, 		Live OUT: $7, $8, 
;PUSH $8		Live IN: $8, $7, 			Live OUT: $7, 
;PUSH $7		Live IN: $7, 				Live OUT: 
;PUSH 			Live IN: 				Live OUT: 
;PUSHREG		Live IN: 				Live OUT: 
;JSR IsLargerThanOrEqualTo	Live IN: 			Live OUT: 
;POPREG			Live IN: 			Live OUT: 
;POP $T18		Live IN: 				Live OUT: $T18, 
;POP 			Live IN: $T18, 			Live OUT: $T18, 
;POP 			Live IN: $T18, 			Live OUT: $T18, 
;STOREI 0 $T19		Live IN: $T18, 			Live OUT: $T19, $T18, 
;EQI $T18 $T19 label3	Live IN: $T19, $T18, 		Live OUT: 
;STOREI 0 $T20		Live IN: 				Live OUT: $T20, 
;STOREI $T20 $6		Live IN: $T20, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 
;JUMP label4		Live IN: 				Live OUT: 
;LABEL label3		Live IN: 				Live OUT: 
;LABEL label4		Live IN: 				Live OUT: 
;STOREI 1 $T21		Live IN: 				Live OUT: $T21, 
;STOREI $T21 $6		Live IN: $T21, 			Live OUT: 
;UNLINK			Live IN: 			Live OUT: 
;RET			Live IN: 				Live OUT: 
;str space " " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str eol "\n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str smS " is smaller than " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str leS " is larger than or equal to " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;jsr main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;sys halt 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL INCRE liveout: ; { $7  }
;label INCRE 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $7  }
;link 22 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T1 liveout: ; { $T1 $7  }
; ensure(): $T1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;ADDI $7 $T1 $T2 liveout: ; { $T2  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; ensure(): $T1 has register r3
; switching owner of register $7 to $T2 { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
;addi r3 r2 	; { r0-><null> || r1-><null> || r2->$T2 || r3->$T1* }
; freeing unused variable r3
; spilling varialbe $T1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2->$T2* || r3->$T1* }
;STOREI $T2 $6 liveout: ; {  }
; ensure(): $T2 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T2* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T2
;move r2 $-2 	; { r0-><null> || r1-><null> || r2->$T2* || r3-><null> }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL main liveout: ; {  }
;label main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 4 liveout: ; {  }
;link 25 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF 5.2 $T3 liveout: ; { $T3  }
; ensure(): $T3 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
; loading $-6 to register r3
;move $-6 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
;move 5.2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
;STOREF $T3 $-1 liveout: ; { $-1  }
; ensure(): $T3 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T3* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T3* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T3* }
; freeing unused variable r3
; spilling varialbe $T3
;move r3 $-6 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T3* }
;STOREF 6.4 $T4 liveout: ; { $-1 $T4  }
; ensure(): $T4 gets register r3 { r0-><null> || r1-><null> || r2->$-1* || r3->$T4 }
; loading $-7 to register r3
;move $-7 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T4 }
;move 6.4 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T4 }
;STOREF $T4 $-2 liveout: ; { $-2 $-1  }
; ensure(): $T4 has register r3
; ensure(): $-2 gets register r1 { r0-><null> || r1->$-2 || r2->$-1* || r3->$T4* }
; loading $-2 to register r1
;move $-2 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T4* }
;move r3 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T4* }
; freeing unused variable r3
; spilling varialbe $T4
;move r3 $-7 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T4* }
;PUSH $-2 liveout: ; { $-2 $-1  }
; ensure(): $-2 has register r1
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH $-1 liveout: ; { $-2 $-1  }
; ensure(): $-1 has register r2
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH  liveout: ; { $-2 $-1  }
;push 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSHREG liveout: ; { $-2 $-1  }
;push r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;JSR IsLargerThanOrEqualTo liveout: ; { $-2 $-1  }
; writing back global variables prior a function call
;jsr IsLargerThanOrEqualTo 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POPREG liveout: ; { $-2 $-1  }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POP $T5 liveout: ; { $-2 $-1 $T5  }
; ensure(): $T5 gets register r3 { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5 }
; loading $-8 to register r3
;move $-8 r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5 }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5 }
;POP  liveout: ; { $-2 $-1 $T5  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5* }
;POP  liveout: ; { $-2 $-1 $T5  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T5* }
;STOREI $T5 $-3 liveout: ; { $-2 $-1 $-3  }
; ensure(): $T5 has register r3
; ensure(): $-3 gets register r0 { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T5* }
; loading $-3 to register r0
;move $-3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T5* }
;move r3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T5* }
; freeing unused variable r3
; spilling varialbe $T5
;move r3 $-8 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3->$T5* }
;WRITEF $-1 liveout: ; { $-2 $-1 $-3  }
; ensure(): $-1 has register r2
;sys writer r2 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-1 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITEF $-2 liveout: ; { $-2 $-1 $-3  }
; ensure(): $-2 has register r1
;sys writer r1 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-1 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES leS liveout: ; { $-2 $-1 $-3  }
;sys writes leS 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-1 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITEI $-3 liveout: ; { $-2 $-1  }
; ensure(): $-3 has register r0
;sys writei r0 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
; freeing unused variable r0
; spilling varialbe $-3
;move r0 $-3 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES eol liveout: ; { $-2 $-1  }
;sys writes eol 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH $-2 liveout: ; { $-2 $-1  }
; ensure(): $-2 has register r1
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH $-1 liveout: ; { $-2 $-1  }
; ensure(): $-1 has register r2
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH  liveout: ; { $-2 $-1  }
;push 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSHREG liveout: ; { $-2 $-1  }
;push r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;JSR IsSmallerThan liveout: ; { $-2 $-1  }
; writing back global variables prior a function call
;jsr IsSmallerThan 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POPREG liveout: ; { $-2 $-1  }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POP $T6 liveout: ; { $-2 $T6 $-1  }
; ensure(): $T6 gets register r3 { r0-><null> || r1->$-2* || r2->$-1* || r3->$T6 }
; loading $-9 to register r3
;move $-9 r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T6 }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T6 }
;POP  liveout: ; { $-2 $T6 $-1  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T6* }
;POP  liveout: ; { $-2 $T6 $-1  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T6* }
;STOREI $T6 $-3 liveout: ; { $-2 $-1 $-3  }
; ensure(): $T6 has register r3
; ensure(): $-3 gets register r0 { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T6* }
; loading $-3 to register r0
;move $-3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T6* }
;move r3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T6* }
; freeing unused variable r3
; spilling varialbe $T6
;move r3 $-9 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3->$T6* }
;WRITEF $-1 liveout: ; { $-2 $-3  }
; ensure(): $-1 has register r2
;sys writer r2 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
;WRITEF $-2 liveout: ; { $-3  }
; ensure(): $-2 has register r1
;sys writer r1 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
; freeing unused variable r1
; spilling varialbe $-2
;move r1 $-2 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
;WRITES space liveout: ; { $-3  }
;sys writes space 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITES smS liveout: ; { $-3  }
;sys writes smS 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITES space liveout: ; { $-3  }
;sys writes space 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITEI $-3 liveout: ; {  }
; ensure(): $-3 has register r0
;sys writei r0 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r0
; spilling varialbe $-3
;move r0 $-3 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITES eol liveout: ; {  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF 7.2 $T7 liveout: ; { $T7  }
; ensure(): $T7 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T7 }
; loading $-10 to register r3
;move $-10 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T7 }
;move 7.2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T7 }
;STOREF $T7 $-1 liveout: ; { $-1  }
; ensure(): $T7 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T7* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T7* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T7* }
; freeing unused variable r3
; spilling varialbe $T7
;move r3 $-10 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T7* }
;STOREF 7.2 $T8 liveout: ; { $-1 $T8  }
; ensure(): $T8 gets register r3 { r0-><null> || r1-><null> || r2->$-1* || r3->$T8 }
; loading $-11 to register r3
;move $-11 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T8 }
;move 7.2 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T8 }
;STOREF $T8 $-2 liveout: ; { $-2 $-1  }
; ensure(): $T8 has register r3
; ensure(): $-2 gets register r1 { r0-><null> || r1->$-2 || r2->$-1* || r3->$T8* }
; loading $-2 to register r1
;move $-2 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T8* }
;move r3 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T8* }
; freeing unused variable r3
; spilling varialbe $T8
;move r3 $-11 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T8* }
;PUSH $-2 liveout: ; { $-2 $-1  }
; ensure(): $-2 has register r1
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH $-1 liveout: ; { $-2 $-1  }
; ensure(): $-1 has register r2
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH  liveout: ; { $-2 $-1  }
;push 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSHREG liveout: ; { $-2 $-1  }
;push r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;JSR IsLargerThanOrEqualTo liveout: ; { $-2 $-1  }
; writing back global variables prior a function call
;jsr IsLargerThanOrEqualTo 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POPREG liveout: ; { $-2 $-1  }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POP $T9 liveout: ; { $-2 $-1 $T9  }
; ensure(): $T9 gets register r3 { r0-><null> || r1->$-2* || r2->$-1* || r3->$T9 }
; loading $-12 to register r3
;move $-12 r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T9 }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T9 }
;POP  liveout: ; { $-2 $-1 $T9  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T9* }
;POP  liveout: ; { $-2 $-1 $T9  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T9* }
;STOREI $T9 $-3 liveout: ; { $-2 $-1 $-3  }
; ensure(): $T9 has register r3
; ensure(): $-3 gets register r0 { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T9* }
; loading $-3 to register r0
;move $-3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T9* }
;move r3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T9* }
; freeing unused variable r3
; spilling varialbe $T9
;move r3 $-12 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3->$T9* }
;WRITEF $-1 liveout: ; { $-2 $-1 $-3  }
; ensure(): $-1 has register r2
;sys writer r2 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-1 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITEF $-2 liveout: ; { $-2 $-1 $-3  }
; ensure(): $-2 has register r1
;sys writer r1 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-1 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES leS liveout: ; { $-2 $-1 $-3  }
;sys writes leS 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-1 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITEI $-3 liveout: ; { $-2 $-1  }
; ensure(): $-3 has register r0
;sys writei r0 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
; freeing unused variable r0
; spilling varialbe $-3
;move r0 $-3 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES eol liveout: ; { $-2 $-1  }
;sys writes eol 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH $-2 liveout: ; { $-2 $-1  }
; ensure(): $-2 has register r1
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH $-1 liveout: ; { $-2 $-1  }
; ensure(): $-1 has register r2
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH  liveout: ; { $-2 $-1  }
;push 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSHREG liveout: ; { $-2 $-1  }
;push r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;JSR IsSmallerThan liveout: ; { $-2 $-1  }
; writing back global variables prior a function call
;jsr IsSmallerThan 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POPREG liveout: ; { $-2 $-1  }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POP $T10 liveout: ; { $-2 $-1 $T10  }
; ensure(): $T10 gets register r3 { r0-><null> || r1->$-2* || r2->$-1* || r3->$T10 }
; loading $-13 to register r3
;move $-13 r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T10 }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T10 }
;POP  liveout: ; { $-2 $-1 $T10  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T10* }
;POP  liveout: ; { $-2 $-1 $T10  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T10* }
;STOREI $T10 $-3 liveout: ; { $-2 $-1 $-3  }
; ensure(): $T10 has register r3
; ensure(): $-3 gets register r0 { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T10* }
; loading $-3 to register r0
;move $-3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T10* }
;move r3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T10* }
; freeing unused variable r3
; spilling varialbe $T10
;move r3 $-13 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3->$T10* }
;WRITEF $-1 liveout: ; { $-2 $-3  }
; ensure(): $-1 has register r2
;sys writer r2 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
;WRITEF $-2 liveout: ; { $-3  }
; ensure(): $-2 has register r1
;sys writer r1 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
; freeing unused variable r1
; spilling varialbe $-2
;move r1 $-2 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
;WRITES space liveout: ; { $-3  }
;sys writes space 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITES smS liveout: ; { $-3  }
;sys writes smS 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITES space liveout: ; { $-3  }
;sys writes space 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITEI $-3 liveout: ; {  }
; ensure(): $-3 has register r0
;sys writei r0 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r0
; spilling varialbe $-3
;move r0 $-3 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITES eol liveout: ; {  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF 21.2 $T11 liveout: ; { $T11  }
; ensure(): $T11 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T11 }
; loading $-14 to register r3
;move $-14 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T11 }
;move 21.2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T11 }
;STOREF $T11 $-1 liveout: ; { $-1  }
; ensure(): $T11 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T11* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T11* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T11* }
; freeing unused variable r3
; spilling varialbe $T11
;move r3 $-14 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T11* }
;STOREF 19.8 $T12 liveout: ; { $-1 $T12  }
; ensure(): $T12 gets register r3 { r0-><null> || r1-><null> || r2->$-1* || r3->$T12 }
; loading $-15 to register r3
;move $-15 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T12 }
;move 19.8 r3 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T12 }
;STOREF $T12 $-2 liveout: ; { $-2 $-1  }
; ensure(): $T12 has register r3
; ensure(): $-2 gets register r1 { r0-><null> || r1->$-2 || r2->$-1* || r3->$T12* }
; loading $-2 to register r1
;move $-2 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T12* }
;move r3 r1 	; { r0-><null> || r1->$-2 || r2->$-1* || r3->$T12* }
; freeing unused variable r3
; spilling varialbe $T12
;move r3 $-15 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T12* }
;PUSH $-2 liveout: ; { $-2 $-1  }
; ensure(): $-2 has register r1
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH $-1 liveout: ; { $-2 $-1  }
; ensure(): $-1 has register r2
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH  liveout: ; { $-2 $-1  }
;push 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSHREG liveout: ; { $-2 $-1  }
;push r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;JSR IsLargerThanOrEqualTo liveout: ; { $-2 $-1  }
; writing back global variables prior a function call
;jsr IsLargerThanOrEqualTo 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POPREG liveout: ; { $-2 $-1  }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POP $T13 liveout: ; { $-2 $-1 $T13  }
; ensure(): $T13 gets register r3 { r0-><null> || r1->$-2* || r2->$-1* || r3->$T13 }
; loading $-16 to register r3
;move $-16 r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T13 }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T13 }
;POP  liveout: ; { $-2 $-1 $T13  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T13* }
;POP  liveout: ; { $-2 $-1 $T13  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T13* }
;STOREI $T13 $-3 liveout: ; { $-2 $-1 $-3  }
; ensure(): $T13 has register r3
; ensure(): $-3 gets register r0 { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T13* }
; loading $-3 to register r0
;move $-3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T13* }
;move r3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T13* }
; freeing unused variable r3
; spilling varialbe $T13
;move r3 $-16 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3->$T13* }
;WRITEF $-1 liveout: ; { $-2 $-1 $-3  }
; ensure(): $-1 has register r2
;sys writer r2 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-1 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITEF $-2 liveout: ; { $-2 $-1 $-3  }
; ensure(): $-2 has register r1
;sys writer r1 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-1 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES leS liveout: ; { $-2 $-1 $-3  }
;sys writes leS 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-1 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITEI $-3 liveout: ; { $-2 $-1  }
; ensure(): $-3 has register r0
;sys writei r0 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
; freeing unused variable r0
; spilling varialbe $-3
;move r0 $-3 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES eol liveout: ; { $-2 $-1  }
;sys writes eol 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH $-2 liveout: ; { $-2 $-1  }
; ensure(): $-2 has register r1
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH $-1 liveout: ; { $-2 $-1  }
; ensure(): $-1 has register r2
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSH  liveout: ; { $-2 $-1  }
;push 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;PUSHREG liveout: ; { $-2 $-1  }
;push r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;push r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;JSR IsSmallerThan liveout: ; { $-2 $-1  }
; writing back global variables prior a function call
;jsr IsSmallerThan 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POPREG liveout: ; { $-2 $-1  }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r2 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r1 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;pop r0 	; { r0-><null> || r1->$-2* || r2->$-1* || r3-><null> }
;POP $T14 liveout: ; { $-2 $-1 $T14  }
; ensure(): $T14 gets register r3 { r0-><null> || r1->$-2* || r2->$-1* || r3->$T14 }
; loading $-17 to register r3
;move $-17 r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T14 }
;pop r3 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T14 }
;POP  liveout: ; { $-2 $-1 $T14  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T14* }
;POP  liveout: ; { $-2 $-1 $T14  }
;pop 	; { r0-><null> || r1->$-2* || r2->$-1* || r3->$T14* }
;STOREI $T14 $-3 liveout: ; { $-2 $-1 $-3  }
; ensure(): $T14 has register r3
; ensure(): $-3 gets register r0 { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T14* }
; loading $-3 to register r0
;move $-3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T14* }
;move r3 r0 	; { r0->$-3 || r1->$-2* || r2->$-1* || r3->$T14* }
; freeing unused variable r3
; spilling varialbe $T14
;move r3 $-17 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3->$T14* }
;WRITEF $-1 liveout: ; { $-2 $-3  }
; ensure(): $-1 has register r2
;sys writer r2 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0->$-3* || r1->$-2* || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { $-2 $-3  }
;sys writes space 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
;WRITEF $-2 liveout: ; { $-3  }
; ensure(): $-2 has register r1
;sys writer r1 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
; freeing unused variable r1
; spilling varialbe $-2
;move r1 $-2 	; { r0->$-3* || r1->$-2* || r2-><null> || r3-><null> }
;WRITES space liveout: ; { $-3  }
;sys writes space 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITES smS liveout: ; { $-3  }
;sys writes smS 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITES space liveout: ; { $-3  }
;sys writes space 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITEI $-3 liveout: ; {  }
; ensure(): $-3 has register r0
;sys writei r0 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r0
; spilling varialbe $-3
;move r0 $-3 	; { r0->$-3* || r1-><null> || r2-><null> || r3-><null> }
;WRITES eol liveout: ; {  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL IsLargerThanOrEqualTo liveout: ; { $7 $8  }
;label IsLargerThanOrEqualTo 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $7 $8  }
;link 22 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF $8 $T15 liveout: ; { $7 $T15  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T15 gets register r2 { r0-><null> || r1-><null> || r2->$T15 || r3->$8 }
; loading $-15 to register r2
;move $-15 r2 	; { r0-><null> || r1-><null> || r2->$T15 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T15 || r3->$8 }
; freeing unused variable r3
;LTF $7 $T15 label1 liveout: ; {  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2->$T15* || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2->$T15* || r3->$7 }
; ensure(): $T15 has register r2
;cmpr r3 r2 	; { r0-><null> || r1-><null> || r2->$T15* || r3->$7 }
; spilling registers at the end of Basic Block
; spilling varialbe $7
;move r3 $7 	; { r0-><null> || r1-><null> || r2->$T15* || r3->$7 }
; spilling varialbe $T15
;move r2 $-15 	; { r0-><null> || r1-><null> || r2->$T15* || r3-><null> }
;jlt label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r2
;STOREI 1 $T16 liveout: ; { $T16  }
; ensure(): $T16 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T16 }
; loading $-16 to register r3
;move $-16 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T16 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T16 }
;STOREI $T16 $6 liveout: ; {  }
; ensure(): $T16 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T16* }
; freeing unused variable r3
; spilling varialbe $T16
;move r3 $-16 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T16* }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label2 liveout: ; {  }
; spilling registers at the end of Basic Block
;jmp label2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label1 liveout: ; {  }
; spilling registers at the end of Basic Block
;label label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label2 liveout: ; {  }
; spilling registers at the end of Basic Block
;label label2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T17 liveout: ; { $T17  }
; ensure(): $T17 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T17 }
; loading $-17 to register r3
;move $-17 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T17 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T17 }
;STOREI $T17 $6 liveout: ; {  }
; ensure(): $T17 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T17* }
; freeing unused variable r3
; spilling varialbe $T17
;move r3 $-17 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T17* }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL IsSmallerThan liveout: ; { $7 $8  }
;label IsSmallerThan 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $7 $8  }
;link 22 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSH $8 liveout: ; { $7  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; freeing unused variable r3
;PUSH $7 liveout: ; {  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; freeing unused variable r3
;PUSH  liveout: ; {  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSHREG liveout: ; {  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JSR IsLargerThanOrEqualTo liveout: ; {  }
; writing back global variables prior a function call
;jsr IsLargerThanOrEqualTo 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; {  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T18 liveout: ; { $T18  }
; ensure(): $T18 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T18 }
; loading $-18 to register r3
;move $-18 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T18 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T18 }
;POP  liveout: ; { $T18  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T18* }
;POP  liveout: ; { $T18  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T18* }
;STOREI 0 $T19 liveout: ; { $T19 $T18  }
; ensure(): $T19 gets register r2 { r0-><null> || r1-><null> || r2->$T19 || r3->$T18* }
; loading $-19 to register r2
;move $-19 r2 	; { r0-><null> || r1-><null> || r2->$T19 || r3->$T18* }
;move 0 r2 	; { r0-><null> || r1-><null> || r2->$T19 || r3->$T18* }
;EQI $T18 $T19 label3 liveout: ; {  }
; ensure(): $T18 has register r3
; ensure(): $T19 has register r2
;cmpi r3 r2 	; { r0-><null> || r1-><null> || r2->$T19* || r3->$T18* }
; spilling registers at the end of Basic Block
; spilling varialbe $T18
;move r3 $-18 	; { r0-><null> || r1-><null> || r2->$T19* || r3->$T18* }
; spilling varialbe $T19
;move r2 $-19 	; { r0-><null> || r1-><null> || r2->$T19* || r3-><null> }
;jeq label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r2
;STOREI 0 $T20 liveout: ; { $T20  }
; ensure(): $T20 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T20 }
; loading $-20 to register r3
;move $-20 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T20 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T20 }
;STOREI $T20 $6 liveout: ; {  }
; ensure(): $T20 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T20* }
; freeing unused variable r3
; spilling varialbe $T20
;move r3 $-20 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T20* }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label4 liveout: ; {  }
; spilling registers at the end of Basic Block
;jmp label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label3 liveout: ; {  }
; spilling registers at the end of Basic Block
;label label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label4 liveout: ; {  }
; spilling registers at the end of Basic Block
;label label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T21 liveout: ; { $T21  }
; ensure(): $T21 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
; loading $-21 to register r3
;move $-21 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
;STOREI $T21 $6 liveout: ; {  }
; ensure(): $T21 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21* }
; freeing unused variable r3
; spilling varialbe $T21
;move r3 $-21 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21* }
;UNLINK liveout: ; {  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; {  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }

str space " "
str eol "\n"
str smS " is smaller than "
str leS " is larger than or equal to "
push
push
push
push
push
jsr main
sys halt
label INCRE
link 22
move $-1 r3
move 1 r3
move $7 r2
addi r3 r2
move r3 $-1
move r2 $6
move r2 $-2
unlnk
ret
label main
link 25
move $-6 r3
move 5.2 r3
move $-1 r2
move r3 r2
move r3 $-6
move $-7 r3
move 6.4 r3
move $-2 r1
move r3 r1
move r3 $-7
push r1
push r2
push
push r0
push r1
push r2
push r3
jsr IsLargerThanOrEqualTo
pop r3
pop r2
pop r1
pop r0
move $-8 r3
pop r3
pop
pop
move $-3 r0
move r3 r0
move r3 $-8
sys writer r2
sys writes space
sys writer r1
sys writes space
sys writes leS
sys writes space
sys writei r0
move r0 $-3
sys writes eol
push r1
push r2
push
push r0
push r1
push r2
push r3
jsr IsSmallerThan
pop r3
pop r2
pop r1
pop r0
move $-9 r3
pop r3
pop
pop
move $-3 r0
move r3 r0
move r3 $-9
sys writer r2
move r2 $-1
sys writes space
sys writer r1
move r1 $-2
sys writes space
sys writes smS
sys writes space
sys writei r0
move r0 $-3
sys writes eol
move $-10 r3
move 7.2 r3
move $-1 r2
move r3 r2
move r3 $-10
move $-11 r3
move 7.2 r3
move $-2 r1
move r3 r1
move r3 $-11
push r1
push r2
push
push r0
push r1
push r2
push r3
jsr IsLargerThanOrEqualTo
pop r3
pop r2
pop r1
pop r0
move $-12 r3
pop r3
pop
pop
move $-3 r0
move r3 r0
move r3 $-12
sys writer r2
sys writes space
sys writer r1
sys writes space
sys writes leS
sys writes space
sys writei r0
move r0 $-3
sys writes eol
push r1
push r2
push
push r0
push r1
push r2
push r3
jsr IsSmallerThan
pop r3
pop r2
pop r1
pop r0
move $-13 r3
pop r3
pop
pop
move $-3 r0
move r3 r0
move r3 $-13
sys writer r2
move r2 $-1
sys writes space
sys writer r1
move r1 $-2
sys writes space
sys writes smS
sys writes space
sys writei r0
move r0 $-3
sys writes eol
move $-14 r3
move 21.2 r3
move $-1 r2
move r3 r2
move r3 $-14
move $-15 r3
move 19.8 r3
move $-2 r1
move r3 r1
move r3 $-15
push r1
push r2
push
push r0
push r1
push r2
push r3
jsr IsLargerThanOrEqualTo
pop r3
pop r2
pop r1
pop r0
move $-16 r3
pop r3
pop
pop
move $-3 r0
move r3 r0
move r3 $-16
sys writer r2
sys writes space
sys writer r1
sys writes space
sys writes leS
sys writes space
sys writei r0
move r0 $-3
sys writes eol
push r1
push r2
push
push r0
push r1
push r2
push r3
jsr IsSmallerThan
pop r3
pop r2
pop r1
pop r0
move $-17 r3
pop r3
pop
pop
move $-3 r0
move r3 r0
move r3 $-17
sys writer r2
move r2 $-1
sys writes space
sys writer r1
move r1 $-2
sys writes space
sys writes smS
sys writes space
sys writei r0
move r0 $-3
sys writes eol
unlnk
ret
label IsLargerThanOrEqualTo
link 22
move $8 r3
move $-15 r2
move r3 r2
move $7 r3
cmpr r3 r2
move r3 $7
move r2 $-15
jlt label1
move $-16 r3
move 1 r3
move r3 $6
move r3 $-16
unlnk
ret
jmp label2
label label1
label label2
move $-17 r3
move 0 r3
move r3 $6
move r3 $-17
unlnk
ret
label IsSmallerThan
link 22
move $8 r3
push r3
move $7 r3
push r3
push
push r0
push r1
push r2
push r3
jsr IsLargerThanOrEqualTo
pop r3
pop r2
pop r1
pop r0
move $-18 r3
pop r3
pop
pop
move $-19 r2
move 0 r2
cmpi r3 r2
move r3 $-18
move r2 $-19
jeq label3
move $-20 r3
move 0 r3
move r3 $6
move r3 $-20
unlnk
ret
jmp label4
label label3
label label4
move $-21 r3
move 1 r3
move r3 $6
move r3 $-21
unlnk
ret
