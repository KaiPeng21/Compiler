; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
; Error while creating symbol table
;Symbol table GLOBAL
; return type: null
; subscope local var size: 0
;scope type: GLOBAL_TYPE 
;name inputMessage type STRING value "Inputs are: \n" local slot location: -1
;name sizeMessage type STRING value "Array size is: " local slot location: -2
;name sortingMessage type STRING value "Sorting... \n" local slot location: -3
;name space type STRING value " " local slot location: -4
;name eol type STRING value "\n" local slot location: -5
;name smS type STRING value " isSmallerThan: " local slot location: -6
;name letS type STRING value " isLargerThanOrEqualTo: " local slot location: -7
;name arraysize type INT local slot location: -8
;name a0 type FLOAT local slot location: -9
;name a1 type FLOAT local slot location: -10
;name a2 type FLOAT local slot location: -11
;name a3 type FLOAT local slot location: -12
;name a4 type FLOAT local slot location: -13
;name a5 type FLOAT local slot location: -14
;name a6 type FLOAT local slot location: -15
;name a7 type FLOAT local slot location: -16
;name maxg type FLOAT local slot location: -17
;name ming type FLOAT local slot location: -18
;name floatingMaxConstant type FLOAT local slot location: -19


;Symbol table INCRE
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name i type INT parameter slot location: 7


;Symbol table main
; return type: VOID
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name minRes type FLOAT local slot location: -1


;Symbol table findMin
; return type: FLOAT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name p0 type FLOAT parameter slot location: 7
;name p1 type FLOAT parameter slot location: 8
;name p2 type FLOAT parameter slot location: 9
;name p3 type FLOAT parameter slot location: 10
;name p4 type FLOAT parameter slot location: 11
;name p5 type FLOAT parameter slot location: 12
;name p6 type FLOAT parameter slot location: 13
;name p7 type FLOAT parameter slot location: 14
;name i type INT local slot location: -1
;name min type FLOAT local slot location: -2
;name tmp type FLOAT local slot location: -3


;Symbol table BLOCK 1
; return type: null
; subscope local var size: 0
;scope type: FOR_TYPE 


;Symbol table BLOCK 2
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table IsLargerThanOrEqualTo
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name j type FLOAT parameter slot location: 7
;name k type FLOAT parameter slot location: 8
;name res type INT local slot location: -1


;Symbol table BLOCK 3
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table IsSmallerThan
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name j type FLOAT parameter slot location: 7
;name k type FLOAT parameter slot location: 8
;name res type INT local slot location: -1


;Symbol table BLOCK 4
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table GetValue
; return type: FLOAT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name ind type INT parameter slot location: 7
;name p0 type FLOAT parameter slot location: 8
;name p1 type FLOAT parameter slot location: 9
;name p2 type FLOAT parameter slot location: 10
;name p3 type FLOAT parameter slot location: 11
;name p4 type FLOAT parameter slot location: 12
;name p5 type FLOAT parameter slot location: 13
;name p6 type FLOAT parameter slot location: 14
;name p7 type FLOAT parameter slot location: 15


;Symbol table BLOCK 5
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 6
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 7
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 8
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 9
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 10
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 11
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 12
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 13
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 14
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 15
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 16
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 17
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 18
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 19
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 20
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table PrintIndex
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name ind type INT parameter slot location: 7
;name p0 type FLOAT parameter slot location: 8
;name p1 type FLOAT parameter slot location: 9
;name p2 type FLOAT parameter slot location: 10
;name p3 type FLOAT parameter slot location: 11
;name p4 type FLOAT parameter slot location: 12
;name p5 type FLOAT parameter slot location: 13
;name p6 type FLOAT parameter slot location: 14
;name p7 type FLOAT parameter slot location: 15


;Symbol table BLOCK 21
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 22
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 23
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 24
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 25
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 26
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 27
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 28
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 29
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 30
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 31
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 32
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 33
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 34
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table BLOCK 35
; return type: null
; subscope local var size: 0
;scope type: IF_TYPE 


;Symbol table BLOCK 36
; return type: null
; subscope local var size: 0
;scope type: ELSE_TYPE 


;Symbol table SYSIN
; return type: INT
; subscope local var size: 0
;scope type: FUNC_TYPE 
;name i type INT local slot location: -1
;name alocalsize type INT local slot location: -2
;name dummy type INT local slot location: -3


;Symbol table BLOCK 37
; return type: null
; subscope local var size: 0
;scope type: FOR_TYPE 


;Symbol table BLOCK 38
; return type: null
; subscope local var size: 0
;scope type: FOR_TYPE 


; searching slot location for -- i -- in function scope INCRE and get location 7

;OPT BUG
; SUBSCOPE for function scope: INCRE

;return assignExpr: i+1
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; pre-conversion assignOutputID: minRes
; searching slot location for -- minRes -- in function scope main and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- minRes -- in function scope main and get location -1

; searching slot location for -- p0 -- in function scope findMin and get location 7

; searching slot location for -- p0 -- in function scope findMin and get location 7

; searching slot location for -- p1 -- in function scope findMin and get location 8

; searching slot location for -- p1 -- in function scope findMin and get location 8

; searching slot location for -- p2 -- in function scope findMin and get location 9

; searching slot location for -- p2 -- in function scope findMin and get location 9

; searching slot location for -- p3 -- in function scope findMin and get location 10

; searching slot location for -- p3 -- in function scope findMin and get location 10

; searching slot location for -- p4 -- in function scope findMin and get location 11

; searching slot location for -- p4 -- in function scope findMin and get location 11

; searching slot location for -- p5 -- in function scope findMin and get location 12

; searching slot location for -- p5 -- in function scope findMin and get location 12

; searching slot location for -- p6 -- in function scope findMin and get location 13

; searching slot location for -- p6 -- in function scope findMin and get location 13

; searching slot location for -- p7 -- in function scope findMin and get location 14

; searching slot location for -- p7 -- in function scope findMin and get location 14

; pre-conversion assignOutputID: min
; searching slot location for -- min -- in function scope findMin and get location -2

; post-conversion assignOutputID: $-2
; SUBSCOPE for function scope: findMin
; SUBSCOPE block ID: 1 scopeType: FOR

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope findMin and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope findMin and get location -1

;exit Cond: < :: i :: arraysize
; searching slot location for -- i -- in function scope findMin and get location -1

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope findMin and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope findMin and get location -1

; searching slot location for -- i -- in function scope findMin and get location -1

; searching slot location for -- i -- in function scope findMin and get location -1

; searching slot location for -- p0 -- in function scope findMin and get location 7

; searching slot location for -- p0 -- in function scope findMin and get location 7

; searching slot location for -- p1 -- in function scope findMin and get location 8

; searching slot location for -- p1 -- in function scope findMin and get location 8

; searching slot location for -- p2 -- in function scope findMin and get location 9

; searching slot location for -- p2 -- in function scope findMin and get location 9

; searching slot location for -- p3 -- in function scope findMin and get location 10

; searching slot location for -- p3 -- in function scope findMin and get location 10

; searching slot location for -- p4 -- in function scope findMin and get location 11

; searching slot location for -- p4 -- in function scope findMin and get location 11

; searching slot location for -- p5 -- in function scope findMin and get location 12

; searching slot location for -- p5 -- in function scope findMin and get location 12

; searching slot location for -- p6 -- in function scope findMin and get location 13

; searching slot location for -- p6 -- in function scope findMin and get location 13

; searching slot location for -- p7 -- in function scope findMin and get location 14

; searching slot location for -- p7 -- in function scope findMin and get location 14

; pre-conversion assignOutputID: tmp
; searching slot location for -- tmp -- in function scope findMin and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- tmp -- in function scope findMin and get location -3

; SUBSCOPE for function scope: findMin
; SUBSCOPE block ID: 1 scopeType: FOR
; SUBSCOPE block ID: 2 scopeType: IF

; searching slot location for -- i -- in function scope findMin and get location -1

; searching slot location for -- i -- in function scope findMin and get location -1

; searching slot location for -- p0 -- in function scope findMin and get location 7

; searching slot location for -- p0 -- in function scope findMin and get location 7

; searching slot location for -- p1 -- in function scope findMin and get location 8

; searching slot location for -- p1 -- in function scope findMin and get location 8

; searching slot location for -- p2 -- in function scope findMin and get location 9

; searching slot location for -- p2 -- in function scope findMin and get location 9

; searching slot location for -- p3 -- in function scope findMin and get location 10

; searching slot location for -- p3 -- in function scope findMin and get location 10

; searching slot location for -- p4 -- in function scope findMin and get location 11

; searching slot location for -- p4 -- in function scope findMin and get location 11

; searching slot location for -- p5 -- in function scope findMin and get location 12

; searching slot location for -- p5 -- in function scope findMin and get location 12

; searching slot location for -- p6 -- in function scope findMin and get location 13

; searching slot location for -- p6 -- in function scope findMin and get location 13

; searching slot location for -- p7 -- in function scope findMin and get location 14

; searching slot location for -- p7 -- in function scope findMin and get location 14

; searching slot location for -- min -- in function scope findMin and get location -2

; searching slot location for -- min -- in function scope findMin and get location -2

;exit Cond: = :: 1 :: IsSmallerThan(GetValue(i,p0,p1,p2,p3,p4,p5,p6,p7),min)
; pre-conversion assignOutputID: min
; searching slot location for -- min -- in function scope findMin and get location -2

; post-conversion assignOutputID: $-2
; searching slot location for -- tmp -- in function scope findMin and get location -3

; searching slot location for -- tmp -- in function scope findMin and get location -3

; SUBSCOPE for function scope: findMin
; SUBSCOPE block ID: 1 scopeType: FOR
; SUBSCOPE block ID: 3 scopeType: ELSE

; searching slot location for -- min -- in function scope findMin and get location -2

; searching slot location for -- min -- in function scope findMin and get location -2

; searching slot location for -- min -- in function scope findMin and get location -2

;OPT BUG
; SUBSCOPE for function scope: findMin

;return assignExpr: min
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsLargerThanOrEqualTo
; SUBSCOPE block ID: 4 scopeType: IF

; searching slot location for -- j -- in function scope IsLargerThanOrEqualTo and get location 7

;exit Cond: >= :: j :: k
; searching slot location for -- j -- in function scope IsLargerThanOrEqualTo and get location 7

; searching slot location for -- k -- in function scope IsLargerThanOrEqualTo and get location 8

; pre-conversion assignOutputID: res
; searching slot location for -- res -- in function scope IsLargerThanOrEqualTo and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- res -- in function scope IsLargerThanOrEqualTo and get location -1

;OPT BUG
; SUBSCOPE for function scope: IsLargerThanOrEqualTo
; SUBSCOPE block ID: 4 scopeType: IF

;return assignExpr: 1
;left: 1
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsLargerThanOrEqualTo
; SUBSCOPE block ID: 5 scopeType: ELSE

; pre-conversion assignOutputID: res
; searching slot location for -- res -- in function scope IsLargerThanOrEqualTo and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- res -- in function scope IsLargerThanOrEqualTo and get location -1

;OPT BUG
; SUBSCOPE for function scope: IsLargerThanOrEqualTo

;return assignExpr: 0
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsSmallerThan
; SUBSCOPE block ID: 6 scopeType: IF

; searching slot location for -- j -- in function scope IsSmallerThan and get location 7

; searching slot location for -- j -- in function scope IsSmallerThan and get location 7

; searching slot location for -- k -- in function scope IsSmallerThan and get location 8

; searching slot location for -- k -- in function scope IsSmallerThan and get location 8

;exit Cond: != :: IsLargerThanOrEqualTo(j,k) :: 0
; pre-conversion assignOutputID: res
; searching slot location for -- res -- in function scope IsSmallerThan and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- res -- in function scope IsSmallerThan and get location -1

;OPT BUG
; SUBSCOPE for function scope: IsSmallerThan
; SUBSCOPE block ID: 6 scopeType: IF

;return assignExpr: 0
;left: 0
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: IsSmallerThan
; SUBSCOPE block ID: 7 scopeType: ELSE

; pre-conversion assignOutputID: res
; searching slot location for -- res -- in function scope IsSmallerThan and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- res -- in function scope IsSmallerThan and get location -1

;OPT BUG
; SUBSCOPE for function scope: IsSmallerThan

;return assignExpr: 1
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 8 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 0
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p0 -- in function scope GetValue and get location 8

; searching slot location for -- p0 -- in function scope GetValue and get location 8

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 8 scopeType: IF

;return assignExpr: p0
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 10 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 1
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p1 -- in function scope GetValue and get location 9

; searching slot location for -- p1 -- in function scope GetValue and get location 9

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 10 scopeType: IF

;return assignExpr: p1
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 12 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 2
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p2 -- in function scope GetValue and get location 10

; searching slot location for -- p2 -- in function scope GetValue and get location 10

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 12 scopeType: IF

;return assignExpr: p2
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 14 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 3
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p3 -- in function scope GetValue and get location 11

; searching slot location for -- p3 -- in function scope GetValue and get location 11

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 14 scopeType: IF

;return assignExpr: p3
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 16 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 4
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p4 -- in function scope GetValue and get location 12

; searching slot location for -- p4 -- in function scope GetValue and get location 12

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 16 scopeType: IF

;return assignExpr: p4
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 18 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 5
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p5 -- in function scope GetValue and get location 13

; searching slot location for -- p5 -- in function scope GetValue and get location 13

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 18 scopeType: IF

;return assignExpr: p5
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 20 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 6
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p6 -- in function scope GetValue and get location 14

; searching slot location for -- p6 -- in function scope GetValue and get location 14

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 20 scopeType: IF

;return assignExpr: p6
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE

; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE
; SUBSCOPE block ID: 22 scopeType: IF

; searching slot location for -- ind -- in function scope GetValue and get location 7

;exit Cond: = :: ind :: 7
; searching slot location for -- ind -- in function scope GetValue and get location 7

; searching slot location for -- p7 -- in function scope GetValue and get location 15

; searching slot location for -- p7 -- in function scope GetValue and get location 15

;OPT BUG
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE
; SUBSCOPE block ID: 22 scopeType: IF

;return assignExpr: p7
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: GetValue
; SUBSCOPE block ID: 9 scopeType: ELSE
; SUBSCOPE block ID: 11 scopeType: ELSE
; SUBSCOPE block ID: 13 scopeType: ELSE
; SUBSCOPE block ID: 15 scopeType: ELSE
; SUBSCOPE block ID: 17 scopeType: ELSE
; SUBSCOPE block ID: 19 scopeType: ELSE
; SUBSCOPE block ID: 21 scopeType: ELSE
; SUBSCOPE block ID: 23 scopeType: ELSE

;OPT BUG
; SUBSCOPE for function scope: GetValue

;return assignExpr: 0
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 24 scopeType: IF

; searching slot location for -- ind -- in function scope PrintIndex and get location 7

;exit Cond: = :: ind :: 0
; searching slot location for -- ind -- in function scope PrintIndex and get location 7

; searching slot location for -- p0 -- in function scope PrintIndex and get location 8

; searching slot location for -- p0 -- in function scope PrintIndex and get location 8

; searching slot location for -- p0 -- in function scope PrintIndex and get location 8

;OPT BUG
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 24 scopeType: IF

;return assignExpr: p0
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE

; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 26 scopeType: IF

; searching slot location for -- ind -- in function scope PrintIndex and get location 7

;exit Cond: = :: ind :: 1
; searching slot location for -- ind -- in function scope PrintIndex and get location 7

; searching slot location for -- p1 -- in function scope PrintIndex and get location 9

; searching slot location for -- p1 -- in function scope PrintIndex and get location 9

; searching slot location for -- p1 -- in function scope PrintIndex and get location 9

;OPT BUG
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 26 scopeType: IF

;return assignExpr: p1
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE

; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 28 scopeType: IF

; searching slot location for -- ind -- in function scope PrintIndex and get location 7

;exit Cond: = :: ind :: 2
; searching slot location for -- ind -- in function scope PrintIndex and get location 7

; searching slot location for -- p2 -- in function scope PrintIndex and get location 10

; searching slot location for -- p2 -- in function scope PrintIndex and get location 10

; searching slot location for -- p2 -- in function scope PrintIndex and get location 10

;OPT BUG
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 28 scopeType: IF

;return assignExpr: p2
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE

; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 30 scopeType: IF

; searching slot location for -- ind -- in function scope PrintIndex and get location 7

;exit Cond: = :: ind :: 3
; searching slot location for -- ind -- in function scope PrintIndex and get location 7

; searching slot location for -- p3 -- in function scope PrintIndex and get location 11

; searching slot location for -- p3 -- in function scope PrintIndex and get location 11

; searching slot location for -- p3 -- in function scope PrintIndex and get location 11

;OPT BUG
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 30 scopeType: IF

;return assignExpr: p3
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE

; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 32 scopeType: IF

; searching slot location for -- ind -- in function scope PrintIndex and get location 7

;exit Cond: = :: ind :: 4
; searching slot location for -- ind -- in function scope PrintIndex and get location 7

; searching slot location for -- p4 -- in function scope PrintIndex and get location 12

; searching slot location for -- p4 -- in function scope PrintIndex and get location 12

; searching slot location for -- p4 -- in function scope PrintIndex and get location 12

;OPT BUG
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 32 scopeType: IF

;return assignExpr: p4
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE

; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE
; SUBSCOPE block ID: 34 scopeType: IF

; searching slot location for -- ind -- in function scope PrintIndex and get location 7

;exit Cond: = :: ind :: 5
; searching slot location for -- ind -- in function scope PrintIndex and get location 7

; searching slot location for -- p5 -- in function scope PrintIndex and get location 13

; searching slot location for -- p5 -- in function scope PrintIndex and get location 13

; searching slot location for -- p5 -- in function scope PrintIndex and get location 13

;OPT BUG
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE
; SUBSCOPE block ID: 34 scopeType: IF

;return assignExpr: p5
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE
; SUBSCOPE block ID: 35 scopeType: ELSE

; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE
; SUBSCOPE block ID: 35 scopeType: ELSE
; SUBSCOPE block ID: 36 scopeType: IF

; searching slot location for -- ind -- in function scope PrintIndex and get location 7

;exit Cond: = :: ind :: 6
; searching slot location for -- ind -- in function scope PrintIndex and get location 7

; searching slot location for -- p6 -- in function scope PrintIndex and get location 14

; searching slot location for -- p6 -- in function scope PrintIndex and get location 14

; searching slot location for -- p6 -- in function scope PrintIndex and get location 14

;OPT BUG
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE
; SUBSCOPE block ID: 35 scopeType: ELSE
; SUBSCOPE block ID: 36 scopeType: IF

;return assignExpr: p6
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE
; SUBSCOPE block ID: 35 scopeType: ELSE
; SUBSCOPE block ID: 37 scopeType: ELSE

; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE
; SUBSCOPE block ID: 35 scopeType: ELSE
; SUBSCOPE block ID: 37 scopeType: ELSE
; SUBSCOPE block ID: 38 scopeType: IF

; searching slot location for -- ind -- in function scope PrintIndex and get location 7

;exit Cond: = :: ind :: 7
; searching slot location for -- ind -- in function scope PrintIndex and get location 7

; searching slot location for -- p7 -- in function scope PrintIndex and get location 15

; searching slot location for -- p7 -- in function scope PrintIndex and get location 15

; searching slot location for -- p7 -- in function scope PrintIndex and get location 15

;OPT BUG
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE
; SUBSCOPE block ID: 35 scopeType: ELSE
; SUBSCOPE block ID: 37 scopeType: ELSE
; SUBSCOPE block ID: 38 scopeType: IF

;return assignExpr: p7
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; SUBSCOPE for function scope: PrintIndex
; SUBSCOPE block ID: 25 scopeType: ELSE
; SUBSCOPE block ID: 27 scopeType: ELSE
; SUBSCOPE block ID: 29 scopeType: ELSE
; SUBSCOPE block ID: 31 scopeType: ELSE
; SUBSCOPE block ID: 33 scopeType: ELSE
; SUBSCOPE block ID: 35 scopeType: ELSE
; SUBSCOPE block ID: 37 scopeType: ELSE
; SUBSCOPE block ID: 39 scopeType: ELSE

;OPT BUG
; SUBSCOPE for function scope: PrintIndex

;return assignExpr: 0
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false
; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope SYSIN and get location -1

; post-conversion assignOutputID: $-1
; pre-conversion assignOutputID: alocalsize
; searching slot location for -- alocalsize -- in function scope SYSIN and get location -2

; post-conversion assignOutputID: $-2
; SUBSCOPE for function scope: SYSIN
; SUBSCOPE block ID: 40 scopeType: FOR

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope SYSIN and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope SYSIN and get location -1

;exit Cond: < :: i :: arraysize/2
; searching slot location for -- i -- in function scope SYSIN and get location -1

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope SYSIN and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope SYSIN and get location -1

; searching slot location for -- i -- in function scope SYSIN and get location -1

; searching slot location for -- i -- in function scope SYSIN and get location -1

; pre-conversion assignOutputID: dummy
; searching slot location for -- dummy -- in function scope SYSIN and get location -3

; post-conversion assignOutputID: $-3
; SUBSCOPE for function scope: SYSIN
; SUBSCOPE block ID: 41 scopeType: FOR

; searching slot location for -- i -- in function scope SYSIN and get location -1

;exit Cond: < :: i :: arraysize
; searching slot location for -- i -- in function scope SYSIN and get location -1

; searching slot location for -- i -- in function scope SYSIN and get location -1

; searching slot location for -- i -- in function scope SYSIN and get location -1

; pre-conversion assignOutputID: i
; searching slot location for -- i -- in function scope SYSIN and get location -1

; post-conversion assignOutputID: $-1
; searching slot location for -- i -- in function scope SYSIN and get location -1

; searching slot location for -- i -- in function scope SYSIN and get location -1

; pre-conversion assignOutputID: dummy
; searching slot location for -- dummy -- in function scope SYSIN and get location -3

; post-conversion assignOutputID: $-3
; searching slot location for -- alocalsize -- in function scope SYSIN and get location -2

; searching slot location for -- alocalsize -- in function scope SYSIN and get location -2

;OPT BUG
; SUBSCOPE for function scope: SYSIN

;return assignExpr: alocalsize
;left: 
;right: 
;IRAction.isIF_ELSE_sameReturn(): false

;IR code
;PUSH
;JSR main
;HALT

;LABEL INCRE		 Under Func Scope: INCRE
;LINK 1			 Under Func Scope: INCRE
;STOREI 1 $T1		 Under Func Scope: INCRE
;ADDI $7 $T1 $T2	 Under Func Scope: INCRE
;STOREI $T2 $6		 Under Func Scope: INCRE
;UNLINK			 Under Func Scope: INCRE
;RET			 Under Func Scope: INCRE

;LABEL main		 Under Func Scope: main
;LINK 2			 Under Func Scope: main
;STOREF 1000.00 $T3	 Under Func Scope: main
;STOREF $T3 floatingMaxConstant	 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR SYSIN		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T4		 Under Func Scope: main
;STOREI $T4 arraysize	 Under Func Scope: main
;PUSH a7		 Under Func Scope: main
;PUSH a6		 Under Func Scope: main
;PUSH a5		 Under Func Scope: main
;PUSH a4		 Under Func Scope: main
;PUSH a3		 Under Func Scope: main
;PUSH a2		 Under Func Scope: main
;PUSH a1		 Under Func Scope: main
;PUSH a0		 Under Func Scope: main
;PUSH 			 Under Func Scope: main
;PUSHREG		 Under Func Scope: main
;JSR findMin		 Under Func Scope: main
;POPREG			 Under Func Scope: main
;POP $T5		 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;POP 			 Under Func Scope: main
;STOREF $T5 $-1		 Under Func Scope: main
;WRITEF $-1		 Under Func Scope: main
;WRITES eol		 Under Func Scope: main
;UNLINK			 Under Func Scope: main
;RET			 Under Func Scope: main

;LABEL findMin		 Under Func Scope: findMin
;LINK 4			 Under Func Scope: findMin
;STOREI 0 $T6		 Under Func Scope: findMin
;PUSH $14		 Under Func Scope: findMin
;PUSH $13		 Under Func Scope: findMin
;PUSH $12		 Under Func Scope: findMin
;PUSH $11		 Under Func Scope: findMin
;PUSH $10		 Under Func Scope: findMin
;PUSH $9		 Under Func Scope: findMin
;PUSH $8		 Under Func Scope: findMin
;PUSH $7		 Under Func Scope: findMin
;PUSH $T6		 Under Func Scope: findMin
;PUSH 			 Under Func Scope: findMin
;PUSHREG		 Under Func Scope: findMin
;JSR GetValue		 Under Func Scope: findMin
;POPREG			 Under Func Scope: findMin
;POP $T7		 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;STOREF $T7 $-2		 Under Func Scope: findMin
;STOREI 0 $T8		 Under Func Scope: findMin
;STOREI $T8 $-1		 Under Func Scope: findMin
;LABEL label1		 Under Func Scope: findMin
;STOREI arraysize $T9	 Under Func Scope: findMin
;GEI $-1 $T9 label3	 Under Func Scope: findMin
;PUSH $14		 Under Func Scope: findMin
;PUSH $13		 Under Func Scope: findMin
;PUSH $12		 Under Func Scope: findMin
;PUSH $11		 Under Func Scope: findMin
;PUSH $10		 Under Func Scope: findMin
;PUSH $9		 Under Func Scope: findMin
;PUSH $8		 Under Func Scope: findMin
;PUSH $7		 Under Func Scope: findMin
;PUSH $-1		 Under Func Scope: findMin
;PUSH 			 Under Func Scope: findMin
;PUSHREG		 Under Func Scope: findMin
;JSR GetValue		 Under Func Scope: findMin
;POPREG			 Under Func Scope: findMin
;POP $T12		 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;STOREF $T12 $-3	 Under Func Scope: findMin
;WRITEF $-3		 Under Func Scope: findMin
;WRITES space		 Under Func Scope: findMin
;STOREI 1 $T13		 Under Func Scope: findMin
;PUSH $14		 Under Func Scope: findMin
;PUSH $13		 Under Func Scope: findMin
;PUSH $12		 Under Func Scope: findMin
;PUSH $11		 Under Func Scope: findMin
;PUSH $10		 Under Func Scope: findMin
;PUSH $9		 Under Func Scope: findMin
;PUSH $8		 Under Func Scope: findMin
;PUSH $7		 Under Func Scope: findMin
;PUSH $-1		 Under Func Scope: findMin
;PUSH 			 Under Func Scope: findMin
;PUSHREG		 Under Func Scope: findMin
;JSR GetValue		 Under Func Scope: findMin
;POPREG			 Under Func Scope: findMin
;POP $T14		 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;PUSH $-2		 Under Func Scope: findMin
;PUSH $T14		 Under Func Scope: findMin
;PUSH 			 Under Func Scope: findMin
;PUSHREG		 Under Func Scope: findMin
;JSR IsSmallerThan	 Under Func Scope: findMin
;POPREG			 Under Func Scope: findMin
;POP $T15		 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;POP 			 Under Func Scope: findMin
;STOREI 1 $T16		 Under Func Scope: findMin
;NEI $T16 $T15 label4	 Under Func Scope: findMin
;STOREF $-3 $T17	 Under Func Scope: findMin
;STOREF $T17 $-2	 Under Func Scope: findMin
;JUMP label5		 Under Func Scope: findMin
;LABEL label4		 Under Func Scope: findMin
;LABEL label5		 Under Func Scope: findMin
;WRITEF $-2		 Under Func Scope: findMin
;WRITES eol		 Under Func Scope: findMin
;STOREI 1 $T10		 Under Func Scope: findMin
;ADDI $-1 $T10 $T11	 Under Func Scope: findMin
;STOREI $T11 $-1	 Under Func Scope: findMin
;JUMP label1		 Under Func Scope: findMin
;LABEL label3		 Under Func Scope: findMin
;STOREF $-2 $T18	 Under Func Scope: findMin
;STOREF $T18 $6		 Under Func Scope: findMin
;UNLINK			 Under Func Scope: findMin
;RET			 Under Func Scope: findMin

;LABEL IsLargerThanOrEqualTo	 Under Func Scope: IsLargerThanOrEqualTo
;LINK 2			 Under Func Scope: IsLargerThanOrEqualTo
;STOREF $8 $T19		 Under Func Scope: IsLargerThanOrEqualTo
;LTF $7 $T19 label6	 Under Func Scope: IsLargerThanOrEqualTo
;STOREI 1 $T20		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI $T20 $-1	 Under Func Scope: IsLargerThanOrEqualTo
;WRITES space		 Under Func Scope: IsLargerThanOrEqualTo
;WRITES letS		 Under Func Scope: IsLargerThanOrEqualTo
;WRITEI $-1		 Under Func Scope: IsLargerThanOrEqualTo
;WRITES space		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI 1 $T21		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI $T21 $6		 Under Func Scope: IsLargerThanOrEqualTo
;UNLINK			 Under Func Scope: IsLargerThanOrEqualTo
;RET			 Under Func Scope: IsLargerThanOrEqualTo
;JUMP label7		 Under Func Scope: IsLargerThanOrEqualTo
;LABEL label6		 Under Func Scope: IsLargerThanOrEqualTo
;LABEL label7		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI 0 $T22		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI $T22 $-1	 Under Func Scope: IsLargerThanOrEqualTo
;WRITES space		 Under Func Scope: IsLargerThanOrEqualTo
;WRITES letS		 Under Func Scope: IsLargerThanOrEqualTo
;WRITEI $-1		 Under Func Scope: IsLargerThanOrEqualTo
;WRITES space		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI 0 $T23		 Under Func Scope: IsLargerThanOrEqualTo
;STOREI $T23 $6		 Under Func Scope: IsLargerThanOrEqualTo
;UNLINK			 Under Func Scope: IsLargerThanOrEqualTo
;RET			 Under Func Scope: IsLargerThanOrEqualTo

;LABEL IsSmallerThan	 Under Func Scope: IsSmallerThan
;LINK 2			 Under Func Scope: IsSmallerThan
;PUSH $8		 Under Func Scope: IsSmallerThan
;PUSH $7		 Under Func Scope: IsSmallerThan
;PUSH 			 Under Func Scope: IsSmallerThan
;PUSHREG		 Under Func Scope: IsSmallerThan
;JSR IsLargerThanOrEqualTo	 Under Func Scope: IsSmallerThan
;POPREG			 Under Func Scope: IsSmallerThan
;POP $T24		 Under Func Scope: IsSmallerThan
;POP 			 Under Func Scope: IsSmallerThan
;POP 			 Under Func Scope: IsSmallerThan
;STOREI 0 $T25		 Under Func Scope: IsSmallerThan
;EQI $T24 $T25 label8	 Under Func Scope: IsSmallerThan
;STOREI 0 $T26		 Under Func Scope: IsSmallerThan
;STOREI $T26 $-1	 Under Func Scope: IsSmallerThan
;WRITES space		 Under Func Scope: IsSmallerThan
;WRITES smS		 Under Func Scope: IsSmallerThan
;WRITEI $-1		 Under Func Scope: IsSmallerThan
;WRITES space		 Under Func Scope: IsSmallerThan
;STOREI 0 $T27		 Under Func Scope: IsSmallerThan
;STOREI $T27 $6		 Under Func Scope: IsSmallerThan
;UNLINK			 Under Func Scope: IsSmallerThan
;RET			 Under Func Scope: IsSmallerThan
;JUMP label9		 Under Func Scope: IsSmallerThan
;LABEL label8		 Under Func Scope: IsSmallerThan
;LABEL label9		 Under Func Scope: IsSmallerThan
;STOREI 1 $T28		 Under Func Scope: IsSmallerThan
;STOREI $T28 $-1	 Under Func Scope: IsSmallerThan
;WRITES space		 Under Func Scope: IsSmallerThan
;WRITES smS		 Under Func Scope: IsSmallerThan
;WRITEI $-1		 Under Func Scope: IsSmallerThan
;WRITES space		 Under Func Scope: IsSmallerThan
;STOREI 1 $T29		 Under Func Scope: IsSmallerThan
;STOREI $T29 $6		 Under Func Scope: IsSmallerThan
;UNLINK			 Under Func Scope: IsSmallerThan
;RET			 Under Func Scope: IsSmallerThan

;LABEL GetValue		 Under Func Scope: GetValue
;LINK 1			 Under Func Scope: GetValue
;STOREI 0 $T30		 Under Func Scope: GetValue
;NEI $7 $T30 label10	 Under Func Scope: GetValue
;STOREF $8 $T31		 Under Func Scope: GetValue
;STOREF $T31 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label11		 Under Func Scope: GetValue
;LABEL label10		 Under Func Scope: GetValue
;STOREI 1 $T32		 Under Func Scope: GetValue
;NEI $7 $T32 label12	 Under Func Scope: GetValue
;STOREF $9 $T33		 Under Func Scope: GetValue
;STOREF $T33 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label13		 Under Func Scope: GetValue
;LABEL label12		 Under Func Scope: GetValue
;STOREI 2 $T34		 Under Func Scope: GetValue
;NEI $7 $T34 label14	 Under Func Scope: GetValue
;STOREF $10 $T35	 Under Func Scope: GetValue
;STOREF $T35 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label15		 Under Func Scope: GetValue
;LABEL label14		 Under Func Scope: GetValue
;STOREI 3 $T36		 Under Func Scope: GetValue
;NEI $7 $T36 label16	 Under Func Scope: GetValue
;STOREF $11 $T37	 Under Func Scope: GetValue
;STOREF $T37 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label17		 Under Func Scope: GetValue
;LABEL label16		 Under Func Scope: GetValue
;STOREI 4 $T38		 Under Func Scope: GetValue
;NEI $7 $T38 label18	 Under Func Scope: GetValue
;STOREF $12 $T39	 Under Func Scope: GetValue
;STOREF $T39 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label19		 Under Func Scope: GetValue
;LABEL label18		 Under Func Scope: GetValue
;STOREI 5 $T40		 Under Func Scope: GetValue
;NEI $7 $T40 label20	 Under Func Scope: GetValue
;STOREF $13 $T41	 Under Func Scope: GetValue
;STOREF $T41 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label21		 Under Func Scope: GetValue
;LABEL label20		 Under Func Scope: GetValue
;STOREI 6 $T42		 Under Func Scope: GetValue
;NEI $7 $T42 label22	 Under Func Scope: GetValue
;STOREF $14 $T43	 Under Func Scope: GetValue
;STOREF $T43 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label23		 Under Func Scope: GetValue
;LABEL label22		 Under Func Scope: GetValue
;STOREI 7 $T44		 Under Func Scope: GetValue
;NEI $7 $T44 label24	 Under Func Scope: GetValue
;STOREF $15 $T45	 Under Func Scope: GetValue
;STOREF $T45 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue
;JUMP label25		 Under Func Scope: GetValue
;LABEL label24		 Under Func Scope: GetValue
;LABEL label25		 Under Func Scope: GetValue
;LABEL label23		 Under Func Scope: GetValue
;LABEL label21		 Under Func Scope: GetValue
;LABEL label19		 Under Func Scope: GetValue
;LABEL label17		 Under Func Scope: GetValue
;LABEL label15		 Under Func Scope: GetValue
;LABEL label13		 Under Func Scope: GetValue
;LABEL label11		 Under Func Scope: GetValue
;STOREI 0 $T46		 Under Func Scope: GetValue
;STOREI $T46 $6		 Under Func Scope: GetValue
;UNLINK			 Under Func Scope: GetValue
;RET			 Under Func Scope: GetValue

;LABEL PrintIndex	 Under Func Scope: PrintIndex
;LINK 1			 Under Func Scope: PrintIndex
;STOREI 0 $T47		 Under Func Scope: PrintIndex
;NEI $7 $T47 label26	 Under Func Scope: PrintIndex
;WRITEF $8		 Under Func Scope: PrintIndex
;WRITES space		 Under Func Scope: PrintIndex
;STOREF $8 $T48		 Under Func Scope: PrintIndex
;STOREF $T48 $6		 Under Func Scope: PrintIndex
;UNLINK			 Under Func Scope: PrintIndex
;RET			 Under Func Scope: PrintIndex
;JUMP label27		 Under Func Scope: PrintIndex
;LABEL label26		 Under Func Scope: PrintIndex
;STOREI 1 $T49		 Under Func Scope: PrintIndex
;NEI $7 $T49 label28	 Under Func Scope: PrintIndex
;WRITEF $9		 Under Func Scope: PrintIndex
;WRITES space		 Under Func Scope: PrintIndex
;STOREF $9 $T50		 Under Func Scope: PrintIndex
;STOREF $T50 $6		 Under Func Scope: PrintIndex
;UNLINK			 Under Func Scope: PrintIndex
;RET			 Under Func Scope: PrintIndex
;JUMP label29		 Under Func Scope: PrintIndex
;LABEL label28		 Under Func Scope: PrintIndex
;STOREI 2 $T51		 Under Func Scope: PrintIndex
;NEI $7 $T51 label30	 Under Func Scope: PrintIndex
;WRITEF $10		 Under Func Scope: PrintIndex
;WRITES space		 Under Func Scope: PrintIndex
;STOREF $10 $T52	 Under Func Scope: PrintIndex
;STOREF $T52 $6		 Under Func Scope: PrintIndex
;UNLINK			 Under Func Scope: PrintIndex
;RET			 Under Func Scope: PrintIndex
;JUMP label31		 Under Func Scope: PrintIndex
;LABEL label30		 Under Func Scope: PrintIndex
;STOREI 3 $T53		 Under Func Scope: PrintIndex
;NEI $7 $T53 label32	 Under Func Scope: PrintIndex
;WRITEF $11		 Under Func Scope: PrintIndex
;WRITES space		 Under Func Scope: PrintIndex
;STOREF $11 $T54	 Under Func Scope: PrintIndex
;STOREF $T54 $6		 Under Func Scope: PrintIndex
;UNLINK			 Under Func Scope: PrintIndex
;RET			 Under Func Scope: PrintIndex
;JUMP label33		 Under Func Scope: PrintIndex
;LABEL label32		 Under Func Scope: PrintIndex
;STOREI 4 $T55		 Under Func Scope: PrintIndex
;NEI $7 $T55 label34	 Under Func Scope: PrintIndex
;WRITEF $12		 Under Func Scope: PrintIndex
;WRITES space		 Under Func Scope: PrintIndex
;STOREF $12 $T56	 Under Func Scope: PrintIndex
;STOREF $T56 $6		 Under Func Scope: PrintIndex
;UNLINK			 Under Func Scope: PrintIndex
;RET			 Under Func Scope: PrintIndex
;JUMP label35		 Under Func Scope: PrintIndex
;LABEL label34		 Under Func Scope: PrintIndex
;STOREI 5 $T57		 Under Func Scope: PrintIndex
;NEI $7 $T57 label36	 Under Func Scope: PrintIndex
;WRITEF $13		 Under Func Scope: PrintIndex
;WRITES space		 Under Func Scope: PrintIndex
;STOREF $13 $T58	 Under Func Scope: PrintIndex
;STOREF $T58 $6		 Under Func Scope: PrintIndex
;UNLINK			 Under Func Scope: PrintIndex
;RET			 Under Func Scope: PrintIndex
;JUMP label37		 Under Func Scope: PrintIndex
;LABEL label36		 Under Func Scope: PrintIndex
;STOREI 6 $T59		 Under Func Scope: PrintIndex
;NEI $7 $T59 label38	 Under Func Scope: PrintIndex
;WRITEF $14		 Under Func Scope: PrintIndex
;WRITES space		 Under Func Scope: PrintIndex
;STOREF $14 $T60	 Under Func Scope: PrintIndex
;STOREF $T60 $6		 Under Func Scope: PrintIndex
;UNLINK			 Under Func Scope: PrintIndex
;RET			 Under Func Scope: PrintIndex
;JUMP label39		 Under Func Scope: PrintIndex
;LABEL label38		 Under Func Scope: PrintIndex
;STOREI 7 $T61		 Under Func Scope: PrintIndex
;NEI $7 $T61 label40	 Under Func Scope: PrintIndex
;WRITEF $15		 Under Func Scope: PrintIndex
;WRITES space		 Under Func Scope: PrintIndex
;STOREF $15 $T62	 Under Func Scope: PrintIndex
;STOREF $T62 $6		 Under Func Scope: PrintIndex
;UNLINK			 Under Func Scope: PrintIndex
;RET			 Under Func Scope: PrintIndex
;JUMP label41		 Under Func Scope: PrintIndex
;LABEL label40		 Under Func Scope: PrintIndex
;LABEL label41		 Under Func Scope: PrintIndex
;LABEL label39		 Under Func Scope: PrintIndex
;LABEL label37		 Under Func Scope: PrintIndex
;LABEL label35		 Under Func Scope: PrintIndex
;LABEL label33		 Under Func Scope: PrintIndex
;LABEL label31		 Under Func Scope: PrintIndex
;LABEL label29		 Under Func Scope: PrintIndex
;LABEL label27		 Under Func Scope: PrintIndex
;STOREI 0 $T63		 Under Func Scope: PrintIndex
;STOREI $T63 $6		 Under Func Scope: PrintIndex
;UNLINK			 Under Func Scope: PrintIndex
;RET			 Under Func Scope: PrintIndex

;LABEL SYSIN		 Under Func Scope: SYSIN
;LINK 4			 Under Func Scope: SYSIN
;STOREI 0 $T64		 Under Func Scope: SYSIN
;STOREI $T64 $-1	 Under Func Scope: SYSIN
;STOREI 8 $T65		 Under Func Scope: SYSIN
;STOREI $T65 $-2	 Under Func Scope: SYSIN
;READF a0		 Under Func Scope: SYSIN
;READF a1		 Under Func Scope: SYSIN
;READF a2		 Under Func Scope: SYSIN
;READF a3		 Under Func Scope: SYSIN
;READF a4		 Under Func Scope: SYSIN
;READF a5		 Under Func Scope: SYSIN
;READF a6		 Under Func Scope: SYSIN
;READF a7		 Under Func Scope: SYSIN
;WRITES inputMessage	 Under Func Scope: SYSIN
;STOREI 0 $T66		 Under Func Scope: SYSIN
;STOREI $T66 $-1	 Under Func Scope: SYSIN
;LABEL label42		 Under Func Scope: SYSIN
;STOREI 2 $T67		 Under Func Scope: SYSIN
;DIVI arraysize $T67 $T68	 Under Func Scope: SYSIN
;GEI $-1 $T24 label44	 Under Func Scope: SYSIN
;PUSH a7		 Under Func Scope: SYSIN
;PUSH a6		 Under Func Scope: SYSIN
;PUSH a5		 Under Func Scope: SYSIN
;PUSH a4		 Under Func Scope: SYSIN
;PUSH a3		 Under Func Scope: SYSIN
;PUSH a2		 Under Func Scope: SYSIN
;PUSH a1		 Under Func Scope: SYSIN
;PUSH a0		 Under Func Scope: SYSIN
;PUSH $-1		 Under Func Scope: SYSIN
;PUSH 			 Under Func Scope: SYSIN
;PUSHREG		 Under Func Scope: SYSIN
;JSR PrintIndex		 Under Func Scope: SYSIN
;POPREG			 Under Func Scope: SYSIN
;POP $T71		 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;STOREI $T71 $-3	 Under Func Scope: SYSIN
;STOREI 1 $T69		 Under Func Scope: SYSIN
;ADDI $-1 $T69 $T70	 Under Func Scope: SYSIN
;STOREI $T70 $-1	 Under Func Scope: SYSIN
;JUMP label42		 Under Func Scope: SYSIN
;LABEL label44		 Under Func Scope: SYSIN
;LABEL label45		 Under Func Scope: SYSIN
;STOREI arraysize $T72	 Under Func Scope: SYSIN
;GEI $-1 $T72 label47	 Under Func Scope: SYSIN
;PUSH $-1		 Under Func Scope: SYSIN
;PUSH 			 Under Func Scope: SYSIN
;PUSHREG		 Under Func Scope: SYSIN
;JSR INCRE		 Under Func Scope: SYSIN
;POPREG			 Under Func Scope: SYSIN
;POP $T73		 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;PUSH a7		 Under Func Scope: SYSIN
;PUSH a6		 Under Func Scope: SYSIN
;PUSH a5		 Under Func Scope: SYSIN
;PUSH a4		 Under Func Scope: SYSIN
;PUSH a3		 Under Func Scope: SYSIN
;PUSH a2		 Under Func Scope: SYSIN
;PUSH a1		 Under Func Scope: SYSIN
;PUSH a0		 Under Func Scope: SYSIN
;PUSH $-1		 Under Func Scope: SYSIN
;PUSH 			 Under Func Scope: SYSIN
;PUSHREG		 Under Func Scope: SYSIN
;JSR PrintIndex		 Under Func Scope: SYSIN
;POPREG			 Under Func Scope: SYSIN
;POP $T74		 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;POP 			 Under Func Scope: SYSIN
;STOREI $T74 $-3	 Under Func Scope: SYSIN
;STOREI $T73 $-1	 Under Func Scope: SYSIN
;JUMP label45		 Under Func Scope: SYSIN
;LABEL label47		 Under Func Scope: SYSIN
;WRITES eol		 Under Func Scope: SYSIN
;STOREI $-2 $T75	 Under Func Scope: SYSIN
;STOREI $T75 $6		 Under Func Scope: SYSIN
;UNLINK			 Under Func Scope: SYSIN
;RET			 Under Func Scope: SYSIN

; ========= CFG IR NODE =========

;LABEL INCRE		P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL INCRE			S: ;STOREI 1 $T1	
;STOREI 1 $T1		P: ;LINK 1				S: ;ADDI $7 $T1 $T2	
;ADDI $7 $T1 $T2	P: ;STOREI 1 $T1			S: ;STOREI $T2 $6	
;STOREI $T2 $6		P: ;ADDI $7 $T1 $T2		S: ;UNLINK	
;UNLINK			P: ;STOREI $T2 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL main		P: 					S: ;LINK 2		 <== BB leader
;LINK 2			P: ;LABEL main			S: ;STOREF 1000.00 $T3	
;STOREF 1000.00 $T3	P: ;LINK 2				S: ;STOREF $T3 floatingMaxConstant	
;STOREF $T3 floatingMaxConstant	P: ;STOREF 1000.00 $T3		S: ;PUSH 	
;PUSH 			P: ;STOREF $T3 floatingMaxConstant		S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR SYSIN	
;JSR SYSIN		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR SYSIN			S: ;POP $T4	
;POP $T4		P: ;POPREG				S: ;STOREI $T4 arraysize	
;STOREI $T4 arraysize	P: ;POP $T4			S: ;PUSH a7	
;PUSH a7		P: ;STOREI $T4 arraysize		S: ;PUSH a6	
;PUSH a6		P: ;PUSH a7				S: ;PUSH a5	
;PUSH a5		P: ;PUSH a6				S: ;PUSH a4	
;PUSH a4		P: ;PUSH a5				S: ;PUSH a3	
;PUSH a3		P: ;PUSH a4				S: ;PUSH a2	
;PUSH a2		P: ;PUSH a3				S: ;PUSH a1	
;PUSH a1		P: ;PUSH a2				S: ;PUSH a0	
;PUSH a0		P: ;PUSH a1				S: ;PUSH 	
;PUSH 			P: ;PUSH a0			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR findMin	
;JSR findMin		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR findMin			S: ;POP $T5	
;POP $T5		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T5			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREF $T5 $-1	
;STOREF $T5 $-1		P: ;POP 				S: ;WRITEF $-1	
;WRITEF $-1		P: ;STOREF $T5 $-1			S: ;WRITES eol	
;WRITES eol		P: ;WRITEF $-1			S: ;UNLINK	
;UNLINK			P: ;WRITES eol			S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL findMin		P: 				S: ;LINK 4		 <== BB leader
;LINK 4			P: ;LABEL findMin		S: ;STOREI 0 $T6	
;STOREI 0 $T6		P: ;LINK 4				S: ;PUSH $14	
;PUSH $14		P: ;STOREI 0 $T6			S: ;PUSH $13	
;PUSH $13		P: ;PUSH $14				S: ;PUSH $12	
;PUSH $12		P: ;PUSH $13				S: ;PUSH $11	
;PUSH $11		P: ;PUSH $12				S: ;PUSH $10	
;PUSH $10		P: ;PUSH $11				S: ;PUSH $9	
;PUSH $9		P: ;PUSH $10				S: ;PUSH $8	
;PUSH $8		P: ;PUSH $9				S: ;PUSH $7	
;PUSH $7		P: ;PUSH $8				S: ;PUSH $T6	
;PUSH $T6		P: ;PUSH $7				S: ;PUSH 	
;PUSH 			P: ;PUSH $T6			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T7	
;POP $T7		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T7			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREF $T7 $-2	
;STOREF $T7 $-2		P: ;POP 				S: ;STOREI 0 $T8	
;STOREI 0 $T8		P: ;STOREF $T7 $-2			S: ;STOREI $T8 $-1	
;STOREI $T8 $-1		P: ;STOREI 0 $T8			S: ;LABEL label1	
;LABEL label1		P: ;STOREI $T8 $-1	;JUMP label1		S: ;STOREI arraysize $T9		 <== BB leader
;STOREI arraysize $T9	P: ;LABEL label1			S: ;GEI $-1 $T9 label3	
;GEI $-1 $T9 label3	P: ;STOREI arraysize $T9		S: ;PUSH $14	;LABEL label3	
;PUSH $14		P: ;GEI $-1 $T9 label3			S: ;PUSH $13		 <== BB leader
;PUSH $13		P: ;PUSH $14				S: ;PUSH $12	
;PUSH $12		P: ;PUSH $13				S: ;PUSH $11	
;PUSH $11		P: ;PUSH $12				S: ;PUSH $10	
;PUSH $10		P: ;PUSH $11				S: ;PUSH $9	
;PUSH $9		P: ;PUSH $10				S: ;PUSH $8	
;PUSH $8		P: ;PUSH $9				S: ;PUSH $7	
;PUSH $7		P: ;PUSH $8				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $7				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T12	
;POP $T12		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T12			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREF $T12 $-3	
;STOREF $T12 $-3	P: ;POP 				S: ;WRITEF $-3	
;WRITEF $-3		P: ;STOREF $T12 $-3			S: ;WRITES space	
;WRITES space		P: ;WRITEF $-3			S: ;STOREI 1 $T13	
;STOREI 1 $T13		P: ;WRITES space			S: ;PUSH $14	
;PUSH $14		P: ;STOREI 1 $T13			S: ;PUSH $13	
;PUSH $13		P: ;PUSH $14				S: ;PUSH $12	
;PUSH $12		P: ;PUSH $13				S: ;PUSH $11	
;PUSH $11		P: ;PUSH $12				S: ;PUSH $10	
;PUSH $10		P: ;PUSH $11				S: ;PUSH $9	
;PUSH $9		P: ;PUSH $10				S: ;PUSH $8	
;PUSH $8		P: ;PUSH $9				S: ;PUSH $7	
;PUSH $7		P: ;PUSH $8				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH $7				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR GetValue	
;JSR GetValue		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR GetValue			S: ;POP $T14	
;POP $T14		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T14			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;PUSH $-2	
;PUSH $-2		P: ;POP 				S: ;PUSH $T14	
;PUSH $T14		P: ;PUSH $-2				S: ;PUSH 	
;PUSH 			P: ;PUSH $T14			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsSmallerThan	
;JSR IsSmallerThan	P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR IsSmallerThan		S: ;POP $T15	
;POP $T15		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T15			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI 1 $T16	
;STOREI 1 $T16		P: ;POP 				S: ;NEI $T16 $T15 label4	
;NEI $T16 $T15 label4	P: ;STOREI 1 $T16			S: ;STOREF $-3 $T17	;LABEL label4	
;STOREF $-3 $T17	P: ;NEI $T16 $T15 label4		S: ;STOREF $T17 $-2		 <== BB leader
;STOREF $T17 $-2	P: ;STOREF $-3 $T17			S: ;JUMP label5	
;JUMP label5		P: ;STOREF $T17 $-2			S: ;LABEL label5	
;LABEL label4		P: ;NEI $T16 $T15 label4		S: ;LABEL label5		 <== BB leader
;LABEL label5		P: ;LABEL label4	;JUMP label5		S: ;WRITEF $-2		 <== BB leader
;WRITEF $-2		P: ;LABEL label5			S: ;WRITES eol	
;WRITES eol		P: ;WRITEF $-2			S: ;STOREI 1 $T10	
;STOREI 1 $T10		P: ;WRITES eol			S: ;ADDI $-1 $T10 $T11	
;ADDI $-1 $T10 $T11	P: ;STOREI 1 $T10			S: ;STOREI $T11 $-1	
;STOREI $T11 $-1	P: ;ADDI $-1 $T10 $T11			S: ;JUMP label1	
;JUMP label1		P: ;STOREI $T11 $-1			S: ;LABEL label1	
;LABEL label3		P: ;GEI $-1 $T9 label3		S: ;STOREF $-2 $T18		 <== BB leader
;STOREF $-2 $T18	P: ;LABEL label3			S: ;STOREF $T18 $6	
;STOREF $T18 $6		P: ;STOREF $-2 $T18		S: ;UNLINK	
;UNLINK			P: ;STOREF $T18 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL IsLargerThanOrEqualTo	P: 				S: ;LINK 2		 <== BB leader
;LINK 2			P: ;LABEL IsLargerThanOrEqualTo		S: ;STOREF $8 $T19	
;STOREF $8 $T19		P: ;LINK 2			S: ;LTF $7 $T19 label6	
;LTF $7 $T19 label6	P: ;STOREF $8 $T19			S: ;STOREI 1 $T20	;LABEL label6	
;STOREI 1 $T20		P: ;LTF $7 $T19 label6		S: ;STOREI $T20 $-1		 <== BB leader
;STOREI $T20 $-1	P: ;STOREI 1 $T20			S: ;WRITES space	
;WRITES space		P: ;STOREI $T20 $-1		S: ;WRITES letS	
;WRITES letS		P: ;WRITES space			S: ;WRITEI $-1	
;WRITEI $-1		P: ;WRITES letS			S: ;WRITES space	
;WRITES space		P: ;WRITEI $-1			S: ;STOREI 1 $T21	
;STOREI 1 $T21		P: ;WRITES space			S: ;STOREI $T21 $6	
;STOREI $T21 $6		P: ;STOREI 1 $T21		S: ;UNLINK	
;UNLINK			P: ;STOREI $T21 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label7		P: ;RET				S: ;LABEL label7	
;LABEL label6		P: ;LTF $7 $T19 label6		S: ;LABEL label7		 <== BB leader
;LABEL label7		P: ;LABEL label6	;JUMP label7		S: ;STOREI 0 $T22		 <== BB leader
;STOREI 0 $T22		P: ;LABEL label7			S: ;STOREI $T22 $-1	
;STOREI $T22 $-1	P: ;STOREI 0 $T22			S: ;WRITES space	
;WRITES space		P: ;STOREI $T22 $-1		S: ;WRITES letS	
;WRITES letS		P: ;WRITES space			S: ;WRITEI $-1	
;WRITEI $-1		P: ;WRITES letS			S: ;WRITES space	
;WRITES space		P: ;WRITEI $-1			S: ;STOREI 0 $T23	
;STOREI 0 $T23		P: ;WRITES space			S: ;STOREI $T23 $6	
;STOREI $T23 $6		P: ;STOREI 0 $T23		S: ;UNLINK	
;UNLINK			P: ;STOREI $T23 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL IsSmallerThan	P: 					S: ;LINK 2		 <== BB leader
;LINK 2			P: ;LABEL IsSmallerThan		S: ;PUSH $8	
;PUSH $8		P: ;LINK 2				S: ;PUSH $7	
;PUSH $7		P: ;PUSH $8				S: ;PUSH 	
;PUSH 			P: ;PUSH $7			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR IsLargerThanOrEqualTo	
;JSR IsLargerThanOrEqualTo	P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR IsLargerThanOrEqualTo		S: ;POP $T24	
;POP $T24		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T24			S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI 0 $T25	
;STOREI 0 $T25		P: ;POP 				S: ;EQI $T24 $T25 label8	
;EQI $T24 $T25 label8	P: ;STOREI 0 $T25			S: ;STOREI 0 $T26	;LABEL label8	
;STOREI 0 $T26		P: ;EQI $T24 $T25 label8		S: ;STOREI $T26 $-1		 <== BB leader
;STOREI $T26 $-1	P: ;STOREI 0 $T26			S: ;WRITES space	
;WRITES space		P: ;STOREI $T26 $-1		S: ;WRITES smS	
;WRITES smS		P: ;WRITES space			S: ;WRITEI $-1	
;WRITEI $-1		P: ;WRITES smS			S: ;WRITES space	
;WRITES space		P: ;WRITEI $-1			S: ;STOREI 0 $T27	
;STOREI 0 $T27		P: ;WRITES space			S: ;STOREI $T27 $6	
;STOREI $T27 $6		P: ;STOREI 0 $T27		S: ;UNLINK	
;UNLINK			P: ;STOREI $T27 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label9		P: ;RET				S: ;LABEL label9	
;LABEL label8		P: ;EQI $T24 $T25 label8		S: ;LABEL label9		 <== BB leader
;LABEL label9		P: ;LABEL label8	;JUMP label9		S: ;STOREI 1 $T28		 <== BB leader
;STOREI 1 $T28		P: ;LABEL label9			S: ;STOREI $T28 $-1	
;STOREI $T28 $-1	P: ;STOREI 1 $T28			S: ;WRITES space	
;WRITES space		P: ;STOREI $T28 $-1		S: ;WRITES smS	
;WRITES smS		P: ;WRITES space			S: ;WRITEI $-1	
;WRITEI $-1		P: ;WRITES smS			S: ;WRITES space	
;WRITES space		P: ;WRITEI $-1			S: ;STOREI 1 $T29	
;STOREI 1 $T29		P: ;WRITES space			S: ;STOREI $T29 $6	
;STOREI $T29 $6		P: ;STOREI 1 $T29		S: ;UNLINK	
;UNLINK			P: ;STOREI $T29 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL GetValue		P: 				S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL GetValue		S: ;STOREI 0 $T30	
;STOREI 0 $T30		P: ;LINK 1			S: ;NEI $7 $T30 label10	
;NEI $7 $T30 label10	P: ;STOREI 0 $T30			S: ;STOREF $8 $T31	;LABEL label10	
;STOREF $8 $T31		P: ;NEI $7 $T30 label10		S: ;STOREF $T31 $6		 <== BB leader
;STOREF $T31 $6		P: ;STOREF $8 $T31		S: ;UNLINK	
;UNLINK			P: ;STOREF $T31 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label11		P: ;RET				S: ;LABEL label11	
;LABEL label10		P: ;NEI $7 $T30 label10		S: ;STOREI 1 $T32		 <== BB leader
;STOREI 1 $T32		P: ;LABEL label10			S: ;NEI $7 $T32 label12	
;NEI $7 $T32 label12	P: ;STOREI 1 $T32			S: ;STOREF $9 $T33	;LABEL label12	
;STOREF $9 $T33		P: ;NEI $7 $T32 label12		S: ;STOREF $T33 $6		 <== BB leader
;STOREF $T33 $6		P: ;STOREF $9 $T33		S: ;UNLINK	
;UNLINK			P: ;STOREF $T33 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label13		P: ;RET				S: ;LABEL label13	
;LABEL label12		P: ;NEI $7 $T32 label12		S: ;STOREI 2 $T34		 <== BB leader
;STOREI 2 $T34		P: ;LABEL label12			S: ;NEI $7 $T34 label14	
;NEI $7 $T34 label14	P: ;STOREI 2 $T34			S: ;STOREF $10 $T35	;LABEL label14	
;STOREF $10 $T35	P: ;NEI $7 $T34 label14			S: ;STOREF $T35 $6		 <== BB leader
;STOREF $T35 $6		P: ;STOREF $10 $T35		S: ;UNLINK	
;UNLINK			P: ;STOREF $T35 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label15		P: ;RET				S: ;LABEL label15	
;LABEL label14		P: ;NEI $7 $T34 label14		S: ;STOREI 3 $T36		 <== BB leader
;STOREI 3 $T36		P: ;LABEL label14			S: ;NEI $7 $T36 label16	
;NEI $7 $T36 label16	P: ;STOREI 3 $T36			S: ;STOREF $11 $T37	;LABEL label16	
;STOREF $11 $T37	P: ;NEI $7 $T36 label16			S: ;STOREF $T37 $6		 <== BB leader
;STOREF $T37 $6		P: ;STOREF $11 $T37		S: ;UNLINK	
;UNLINK			P: ;STOREF $T37 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label17		P: ;RET				S: ;LABEL label17	
;LABEL label16		P: ;NEI $7 $T36 label16		S: ;STOREI 4 $T38		 <== BB leader
;STOREI 4 $T38		P: ;LABEL label16			S: ;NEI $7 $T38 label18	
;NEI $7 $T38 label18	P: ;STOREI 4 $T38			S: ;STOREF $12 $T39	;LABEL label18	
;STOREF $12 $T39	P: ;NEI $7 $T38 label18			S: ;STOREF $T39 $6		 <== BB leader
;STOREF $T39 $6		P: ;STOREF $12 $T39		S: ;UNLINK	
;UNLINK			P: ;STOREF $T39 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label19		P: ;RET				S: ;LABEL label19	
;LABEL label18		P: ;NEI $7 $T38 label18		S: ;STOREI 5 $T40		 <== BB leader
;STOREI 5 $T40		P: ;LABEL label18			S: ;NEI $7 $T40 label20	
;NEI $7 $T40 label20	P: ;STOREI 5 $T40			S: ;STOREF $13 $T41	;LABEL label20	
;STOREF $13 $T41	P: ;NEI $7 $T40 label20			S: ;STOREF $T41 $6		 <== BB leader
;STOREF $T41 $6		P: ;STOREF $13 $T41		S: ;UNLINK	
;UNLINK			P: ;STOREF $T41 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label21		P: ;RET				S: ;LABEL label21	
;LABEL label20		P: ;NEI $7 $T40 label20		S: ;STOREI 6 $T42		 <== BB leader
;STOREI 6 $T42		P: ;LABEL label20			S: ;NEI $7 $T42 label22	
;NEI $7 $T42 label22	P: ;STOREI 6 $T42			S: ;STOREF $14 $T43	;LABEL label22	
;STOREF $14 $T43	P: ;NEI $7 $T42 label22			S: ;STOREF $T43 $6		 <== BB leader
;STOREF $T43 $6		P: ;STOREF $14 $T43		S: ;UNLINK	
;UNLINK			P: ;STOREF $T43 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label23		P: ;RET				S: ;LABEL label23	
;LABEL label22		P: ;NEI $7 $T42 label22		S: ;STOREI 7 $T44		 <== BB leader
;STOREI 7 $T44		P: ;LABEL label22			S: ;NEI $7 $T44 label24	
;NEI $7 $T44 label24	P: ;STOREI 7 $T44			S: ;STOREF $15 $T45	;LABEL label24	
;STOREF $15 $T45	P: ;NEI $7 $T44 label24			S: ;STOREF $T45 $6		 <== BB leader
;STOREF $T45 $6		P: ;STOREF $15 $T45		S: ;UNLINK	
;UNLINK			P: ;STOREF $T45 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label25		P: ;RET				S: ;LABEL label25	
;LABEL label24		P: ;NEI $7 $T44 label24		S: ;LABEL label25		 <== BB leader
;LABEL label25		P: ;LABEL label24	;JUMP label25		S: ;LABEL label23		 <== BB leader
;LABEL label23		P: ;LABEL label25	;JUMP label23		S: ;LABEL label21		 <== BB leader
;LABEL label21		P: ;LABEL label23	;JUMP label21		S: ;LABEL label19		 <== BB leader
;LABEL label19		P: ;LABEL label21	;JUMP label19		S: ;LABEL label17		 <== BB leader
;LABEL label17		P: ;LABEL label19	;JUMP label17		S: ;LABEL label15		 <== BB leader
;LABEL label15		P: ;LABEL label17	;JUMP label15		S: ;LABEL label13		 <== BB leader
;LABEL label13		P: ;LABEL label15	;JUMP label13		S: ;LABEL label11		 <== BB leader
;LABEL label11		P: ;LABEL label13	;JUMP label11		S: ;STOREI 0 $T46		 <== BB leader
;STOREI 0 $T46		P: ;LABEL label11			S: ;STOREI $T46 $6	
;STOREI $T46 $6		P: ;STOREI 0 $T46		S: ;UNLINK	
;UNLINK			P: ;STOREI $T46 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL PrintIndex	P: 					S: ;LINK 1		 <== BB leader
;LINK 1			P: ;LABEL PrintIndex		S: ;STOREI 0 $T47	
;STOREI 0 $T47		P: ;LINK 1			S: ;NEI $7 $T47 label26	
;NEI $7 $T47 label26	P: ;STOREI 0 $T47			S: ;WRITEF $8	;LABEL label26	
;WRITEF $8		P: ;NEI $7 $T47 label26		S: ;WRITES space		 <== BB leader
;WRITES space		P: ;WRITEF $8			S: ;STOREF $8 $T48	
;STOREF $8 $T48		P: ;WRITES space			S: ;STOREF $T48 $6	
;STOREF $T48 $6		P: ;STOREF $8 $T48		S: ;UNLINK	
;UNLINK			P: ;STOREF $T48 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label27		P: ;RET				S: ;LABEL label27	
;LABEL label26		P: ;NEI $7 $T47 label26		S: ;STOREI 1 $T49		 <== BB leader
;STOREI 1 $T49		P: ;LABEL label26			S: ;NEI $7 $T49 label28	
;NEI $7 $T49 label28	P: ;STOREI 1 $T49			S: ;WRITEF $9	;LABEL label28	
;WRITEF $9		P: ;NEI $7 $T49 label28		S: ;WRITES space		 <== BB leader
;WRITES space		P: ;WRITEF $9			S: ;STOREF $9 $T50	
;STOREF $9 $T50		P: ;WRITES space			S: ;STOREF $T50 $6	
;STOREF $T50 $6		P: ;STOREF $9 $T50		S: ;UNLINK	
;UNLINK			P: ;STOREF $T50 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label29		P: ;RET				S: ;LABEL label29	
;LABEL label28		P: ;NEI $7 $T49 label28		S: ;STOREI 2 $T51		 <== BB leader
;STOREI 2 $T51		P: ;LABEL label28			S: ;NEI $7 $T51 label30	
;NEI $7 $T51 label30	P: ;STOREI 2 $T51			S: ;WRITEF $10	;LABEL label30	
;WRITEF $10		P: ;NEI $7 $T51 label30		S: ;WRITES space		 <== BB leader
;WRITES space		P: ;WRITEF $10			S: ;STOREF $10 $T52	
;STOREF $10 $T52	P: ;WRITES space			S: ;STOREF $T52 $6	
;STOREF $T52 $6		P: ;STOREF $10 $T52		S: ;UNLINK	
;UNLINK			P: ;STOREF $T52 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label31		P: ;RET				S: ;LABEL label31	
;LABEL label30		P: ;NEI $7 $T51 label30		S: ;STOREI 3 $T53		 <== BB leader
;STOREI 3 $T53		P: ;LABEL label30			S: ;NEI $7 $T53 label32	
;NEI $7 $T53 label32	P: ;STOREI 3 $T53			S: ;WRITEF $11	;LABEL label32	
;WRITEF $11		P: ;NEI $7 $T53 label32		S: ;WRITES space		 <== BB leader
;WRITES space		P: ;WRITEF $11			S: ;STOREF $11 $T54	
;STOREF $11 $T54	P: ;WRITES space			S: ;STOREF $T54 $6	
;STOREF $T54 $6		P: ;STOREF $11 $T54		S: ;UNLINK	
;UNLINK			P: ;STOREF $T54 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label33		P: ;RET				S: ;LABEL label33	
;LABEL label32		P: ;NEI $7 $T53 label32		S: ;STOREI 4 $T55		 <== BB leader
;STOREI 4 $T55		P: ;LABEL label32			S: ;NEI $7 $T55 label34	
;NEI $7 $T55 label34	P: ;STOREI 4 $T55			S: ;WRITEF $12	;LABEL label34	
;WRITEF $12		P: ;NEI $7 $T55 label34		S: ;WRITES space		 <== BB leader
;WRITES space		P: ;WRITEF $12			S: ;STOREF $12 $T56	
;STOREF $12 $T56	P: ;WRITES space			S: ;STOREF $T56 $6	
;STOREF $T56 $6		P: ;STOREF $12 $T56		S: ;UNLINK	
;UNLINK			P: ;STOREF $T56 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label35		P: ;RET				S: ;LABEL label35	
;LABEL label34		P: ;NEI $7 $T55 label34		S: ;STOREI 5 $T57		 <== BB leader
;STOREI 5 $T57		P: ;LABEL label34			S: ;NEI $7 $T57 label36	
;NEI $7 $T57 label36	P: ;STOREI 5 $T57			S: ;WRITEF $13	;LABEL label36	
;WRITEF $13		P: ;NEI $7 $T57 label36		S: ;WRITES space		 <== BB leader
;WRITES space		P: ;WRITEF $13			S: ;STOREF $13 $T58	
;STOREF $13 $T58	P: ;WRITES space			S: ;STOREF $T58 $6	
;STOREF $T58 $6		P: ;STOREF $13 $T58		S: ;UNLINK	
;UNLINK			P: ;STOREF $T58 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label37		P: ;RET				S: ;LABEL label37	
;LABEL label36		P: ;NEI $7 $T57 label36		S: ;STOREI 6 $T59		 <== BB leader
;STOREI 6 $T59		P: ;LABEL label36			S: ;NEI $7 $T59 label38	
;NEI $7 $T59 label38	P: ;STOREI 6 $T59			S: ;WRITEF $14	;LABEL label38	
;WRITEF $14		P: ;NEI $7 $T59 label38		S: ;WRITES space		 <== BB leader
;WRITES space		P: ;WRITEF $14			S: ;STOREF $14 $T60	
;STOREF $14 $T60	P: ;WRITES space			S: ;STOREF $T60 $6	
;STOREF $T60 $6		P: ;STOREF $14 $T60		S: ;UNLINK	
;UNLINK			P: ;STOREF $T60 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label39		P: ;RET				S: ;LABEL label39	
;LABEL label38		P: ;NEI $7 $T59 label38		S: ;STOREI 7 $T61		 <== BB leader
;STOREI 7 $T61		P: ;LABEL label38			S: ;NEI $7 $T61 label40	
;NEI $7 $T61 label40	P: ;STOREI 7 $T61			S: ;WRITEF $15	;LABEL label40	
;WRITEF $15		P: ;NEI $7 $T61 label40		S: ;WRITES space		 <== BB leader
;WRITES space		P: ;WRITEF $15			S: ;STOREF $15 $T62	
;STOREF $15 $T62	P: ;WRITES space			S: ;STOREF $T62 $6	
;STOREF $T62 $6		P: ;STOREF $15 $T62		S: ;UNLINK	
;UNLINK			P: ;STOREF $T62 $6		S: ;RET	
;RET			P: ;UNLINK				S: 
;JUMP label41		P: ;RET				S: ;LABEL label41	
;LABEL label40		P: ;NEI $7 $T61 label40		S: ;LABEL label41		 <== BB leader
;LABEL label41		P: ;LABEL label40	;JUMP label41		S: ;LABEL label39		 <== BB leader
;LABEL label39		P: ;LABEL label41	;JUMP label39		S: ;LABEL label37		 <== BB leader
;LABEL label37		P: ;LABEL label39	;JUMP label37		S: ;LABEL label35		 <== BB leader
;LABEL label35		P: ;LABEL label37	;JUMP label35		S: ;LABEL label33		 <== BB leader
;LABEL label33		P: ;LABEL label35	;JUMP label33		S: ;LABEL label31		 <== BB leader
;LABEL label31		P: ;LABEL label33	;JUMP label31		S: ;LABEL label29		 <== BB leader
;LABEL label29		P: ;LABEL label31	;JUMP label29		S: ;LABEL label27		 <== BB leader
;LABEL label27		P: ;LABEL label29	;JUMP label27		S: ;STOREI 0 $T63		 <== BB leader
;STOREI 0 $T63		P: ;LABEL label27			S: ;STOREI $T63 $6	
;STOREI $T63 $6		P: ;STOREI 0 $T63		S: ;UNLINK	
;UNLINK			P: ;STOREI $T63 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

;LABEL SYSIN		P: 					S: ;LINK 4		 <== BB leader
;LINK 4			P: ;LABEL SYSIN			S: ;STOREI 0 $T64	
;STOREI 0 $T64		P: ;LINK 4			S: ;STOREI $T64 $-1	
;STOREI $T64 $-1	P: ;STOREI 0 $T64			S: ;STOREI 8 $T65	
;STOREI 8 $T65		P: ;STOREI $T64 $-1		S: ;STOREI $T65 $-2	
;STOREI $T65 $-2	P: ;STOREI 8 $T65			S: ;READF a0	
;READF a0		P: ;STOREI $T65 $-2			S: ;READF a1	
;READF a1		P: ;READF a0				S: ;READF a2	
;READF a2		P: ;READF a1				S: ;READF a3	
;READF a3		P: ;READF a2				S: ;READF a4	
;READF a4		P: ;READF a3				S: ;READF a5	
;READF a5		P: ;READF a4				S: ;READF a6	
;READF a6		P: ;READF a5				S: ;READF a7	
;READF a7		P: ;READF a6				S: ;WRITES inputMessage	
;WRITES inputMessage	P: ;READF a7			S: ;STOREI 0 $T66	
;STOREI 0 $T66		P: ;WRITES inputMessage		S: ;STOREI $T66 $-1	
;STOREI $T66 $-1	P: ;STOREI 0 $T66			S: ;LABEL label42	
;LABEL label42		P: ;STOREI $T66 $-1	;JUMP label42		S: ;STOREI 2 $T67		 <== BB leader
;STOREI 2 $T67		P: ;LABEL label42			S: ;DIVI arraysize $T67 $T68	
;DIVI arraysize $T67 $T68	P: ;STOREI 2 $T67		S: ;GEI $-1 $T24 label44	
;GEI $-1 $T24 label44	P: ;DIVI arraysize $T67 $T68		S: ;PUSH a7	;LABEL label44	
;PUSH a7		P: ;GEI $-1 $T24 label44		S: ;PUSH a6		 <== BB leader
;PUSH a6		P: ;PUSH a7				S: ;PUSH a5	
;PUSH a5		P: ;PUSH a6				S: ;PUSH a4	
;PUSH a4		P: ;PUSH a5				S: ;PUSH a3	
;PUSH a3		P: ;PUSH a4				S: ;PUSH a2	
;PUSH a2		P: ;PUSH a3				S: ;PUSH a1	
;PUSH a1		P: ;PUSH a2				S: ;PUSH a0	
;PUSH a0		P: ;PUSH a1				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH a0				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR PrintIndex	
;JSR PrintIndex		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR PrintIndex		S: ;POP $T71	
;POP $T71		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T71			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI $T71 $-3	
;STOREI $T71 $-3	P: ;POP 				S: ;STOREI 1 $T69	
;STOREI 1 $T69		P: ;STOREI $T71 $-3		S: ;ADDI $-1 $T69 $T70	
;ADDI $-1 $T69 $T70	P: ;STOREI 1 $T69			S: ;STOREI $T70 $-1	
;STOREI $T70 $-1	P: ;ADDI $-1 $T69 $T70			S: ;JUMP label42	
;JUMP label42		P: ;STOREI $T70 $-1		S: ;LABEL label42	
;LABEL label44		P: ;GEI $-1 $T24 label44		S: ;LABEL label45		 <== BB leader
;LABEL label45		P: ;LABEL label44	;JUMP label45		S: ;STOREI arraysize $T72		 <== BB leader
;STOREI arraysize $T72	P: ;LABEL label45			S: ;GEI $-1 $T72 label47	
;GEI $-1 $T72 label47	P: ;STOREI arraysize $T72		S: ;PUSH $-1	;LABEL label47	
;PUSH $-1		P: ;GEI $-1 $T72 label47		S: ;PUSH 		 <== BB leader
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR INCRE	
;JSR INCRE		P: ;PUSHREG				S: ;POPREG	
;POPREG			P: ;JSR INCRE			S: ;POP $T73	
;POP $T73		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T73			S: ;PUSH a7	
;PUSH a7		P: ;POP 				S: ;PUSH a6	
;PUSH a6		P: ;PUSH a7				S: ;PUSH a5	
;PUSH a5		P: ;PUSH a6				S: ;PUSH a4	
;PUSH a4		P: ;PUSH a5				S: ;PUSH a3	
;PUSH a3		P: ;PUSH a4				S: ;PUSH a2	
;PUSH a2		P: ;PUSH a3				S: ;PUSH a1	
;PUSH a1		P: ;PUSH a2				S: ;PUSH a0	
;PUSH a0		P: ;PUSH a1				S: ;PUSH $-1	
;PUSH $-1		P: ;PUSH a0				S: ;PUSH 	
;PUSH 			P: ;PUSH $-1			S: ;PUSHREG	
;PUSHREG		P: ;PUSH 				S: ;JSR PrintIndex	
;JSR PrintIndex		P: ;PUSHREG			S: ;POPREG	
;POPREG			P: ;JSR PrintIndex		S: ;POP $T74	
;POP $T74		P: ;POPREG				S: ;POP 	
;POP 			P: ;POP $T74			S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;POP 	
;POP 			P: ;POP 				S: ;STOREI $T74 $-3	
;STOREI $T74 $-3	P: ;POP 				S: ;STOREI $T73 $-1	
;STOREI $T73 $-1	P: ;STOREI $T74 $-3			S: ;JUMP label45	
;JUMP label45		P: ;STOREI $T73 $-1		S: ;LABEL label45	
;LABEL label47		P: ;GEI $-1 $T72 label47		S: ;WRITES eol		 <== BB leader
;WRITES eol		P: ;LABEL label47			S: ;STOREI $-2 $T75	
;STOREI $-2 $T75	P: ;WRITES eol				S: ;STOREI $T75 $6	
;STOREI $T75 $6		P: ;STOREI $-2 $T75		S: ;UNLINK	
;UNLINK			P: ;STOREI $T75 $6		S: ;RET	
;RET			P: ;UNLINK				S: 

; ========= CFG IR NODE / KILL/ GEN =========

;LABEL INCRE		Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;STOREI 1 $T1		Kill: $T1, 			Gen: 
;ADDI $7 $T1 $T2	Kill: $T2, 				Gen: $T1, $7, 
;STOREI $T2 $6		Kill: $6, 			Gen: $T2, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL main		Kill: 				Gen: 
;LINK 2			Kill: 				Gen: 
;STOREF 1000.00 $T3	Kill: $T3, 				Gen: 
;STOREF $T3 floatingMaxConstant	Kill: floatingMaxConstant, 	Gen: $T3, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR SYSIN		Kill: 				Gen: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T4		Kill: $T4, 				Gen: 
;STOREI $T4 arraysize	Kill: arraysize, 			Gen: $T4, 
;PUSH a7		Kill: 					Gen: a7, 
;PUSH a6		Kill: 					Gen: a6, 
;PUSH a5		Kill: 					Gen: a5, 
;PUSH a4		Kill: 					Gen: a4, 
;PUSH a3		Kill: 					Gen: a3, 
;PUSH a2		Kill: 					Gen: a2, 
;PUSH a1		Kill: 					Gen: a1, 
;PUSH a0		Kill: 					Gen: a0, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR findMin		Kill: 				Gen: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T5		Kill: $T5, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREF $T5 $-1		Kill: $-1, 			Gen: $T5, 
;WRITEF $-1		Kill: 				Gen: $-1, 
;WRITES eol		Kill: 				Gen: 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL findMin		Kill: 				Gen: 
;LINK 4			Kill: 				Gen: 
;STOREI 0 $T6		Kill: $T6, 			Gen: 
;PUSH $14		Kill: 					Gen: $14, 
;PUSH $13		Kill: 					Gen: $13, 
;PUSH $12		Kill: 					Gen: $12, 
;PUSH $11		Kill: 					Gen: $11, 
;PUSH $10		Kill: 					Gen: $10, 
;PUSH $9		Kill: 					Gen: $9, 
;PUSH $8		Kill: 					Gen: $8, 
;PUSH $7		Kill: 					Gen: $7, 
;PUSH $T6		Kill: 					Gen: $T6, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T7		Kill: $T7, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREF $T7 $-2		Kill: $-2, 			Gen: $T7, 
;STOREI 0 $T8		Kill: $T8, 			Gen: 
;STOREI $T8 $-1		Kill: $-1, 			Gen: $T8, 
;LABEL label1		Kill: 				Gen: 
;STOREI arraysize $T9	Kill: $T9, 			Gen: arraysize, 
;GEI $-1 $T9 label3	Kill: 				Gen: $-1, $T9, 
;PUSH $14		Kill: 					Gen: $14, 
;PUSH $13		Kill: 					Gen: $13, 
;PUSH $12		Kill: 					Gen: $12, 
;PUSH $11		Kill: 					Gen: $11, 
;PUSH $10		Kill: 					Gen: $10, 
;PUSH $9		Kill: 					Gen: $9, 
;PUSH $8		Kill: 					Gen: $8, 
;PUSH $7		Kill: 					Gen: $7, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T12		Kill: $T12, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREF $T12 $-3	Kill: $-3, 				Gen: $T12, 
;WRITEF $-3		Kill: 				Gen: $-3, 
;WRITES space		Kill: 				Gen: 
;STOREI 1 $T13		Kill: $T13, 			Gen: 
;PUSH $14		Kill: 					Gen: $14, 
;PUSH $13		Kill: 					Gen: $13, 
;PUSH $12		Kill: 					Gen: $12, 
;PUSH $11		Kill: 					Gen: $11, 
;PUSH $10		Kill: 					Gen: $10, 
;PUSH $9		Kill: 					Gen: $9, 
;PUSH $8		Kill: 					Gen: $8, 
;PUSH $7		Kill: 					Gen: $7, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR GetValue		Kill: 				Gen: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T14		Kill: $T14, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;PUSH $-2		Kill: 					Gen: $-2, 
;PUSH $T14		Kill: 				Gen: $T14, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsSmallerThan	Kill: 				Gen: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T15		Kill: $T15, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI 1 $T16		Kill: $T16, 			Gen: 
;NEI $T16 $T15 label4	Kill: 				Gen: $T16, $T15, 
;STOREF $-3 $T17	Kill: $T17, 				Gen: $-3, 
;STOREF $T17 $-2	Kill: $-2, 				Gen: $T17, 
;JUMP label5		Kill: 				Gen: 
;LABEL label4		Kill: 				Gen: 
;LABEL label5		Kill: 				Gen: 
;WRITEF $-2		Kill: 				Gen: $-2, 
;WRITES eol		Kill: 				Gen: 
;STOREI 1 $T10		Kill: $T10, 			Gen: 
;ADDI $-1 $T10 $T11	Kill: $T11, 				Gen: $T10, $-1, 
;STOREI $T11 $-1	Kill: $-1, 				Gen: $T11, 
;JUMP label1		Kill: 				Gen: 
;LABEL label3		Kill: 				Gen: 
;STOREF $-2 $T18	Kill: $T18, 				Gen: $-2, 
;STOREF $T18 $6		Kill: $6, 			Gen: $T18, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL IsLargerThanOrEqualTo	Kill: 			Gen: 
;LINK 2			Kill: 				Gen: 
;STOREF $8 $T19		Kill: $T19, 			Gen: $8, 
;LTF $7 $T19 label6	Kill: 				Gen: $T19, $7, 
;STOREI 1 $T20		Kill: $T20, 			Gen: 
;STOREI $T20 $-1	Kill: $-1, 				Gen: $T20, 
;WRITES space		Kill: 				Gen: 
;WRITES letS		Kill: 				Gen: 
;WRITEI $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;STOREI 1 $T21		Kill: $T21, 			Gen: 
;STOREI $T21 $6		Kill: $6, 			Gen: $T21, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label7		Kill: 				Gen: 
;LABEL label6		Kill: 				Gen: 
;LABEL label7		Kill: 				Gen: 
;STOREI 0 $T22		Kill: $T22, 			Gen: 
;STOREI $T22 $-1	Kill: $-1, 				Gen: $T22, 
;WRITES space		Kill: 				Gen: 
;WRITES letS		Kill: 				Gen: 
;WRITEI $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;STOREI 0 $T23		Kill: $T23, 			Gen: 
;STOREI $T23 $6		Kill: $6, 			Gen: $T23, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL IsSmallerThan	Kill: 				Gen: 
;LINK 2			Kill: 				Gen: 
;PUSH $8		Kill: 					Gen: $8, 
;PUSH $7		Kill: 					Gen: $7, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR IsLargerThanOrEqualTo	Kill: 			Gen: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T24		Kill: $T24, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI 0 $T25		Kill: $T25, 			Gen: 
;EQI $T24 $T25 label8	Kill: 				Gen: $T25, $T24, 
;STOREI 0 $T26		Kill: $T26, 			Gen: 
;STOREI $T26 $-1	Kill: $-1, 				Gen: $T26, 
;WRITES space		Kill: 				Gen: 
;WRITES smS		Kill: 				Gen: 
;WRITEI $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;STOREI 0 $T27		Kill: $T27, 			Gen: 
;STOREI $T27 $6		Kill: $6, 			Gen: $T27, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label9		Kill: 				Gen: 
;LABEL label8		Kill: 				Gen: 
;LABEL label9		Kill: 				Gen: 
;STOREI 1 $T28		Kill: $T28, 			Gen: 
;STOREI $T28 $-1	Kill: $-1, 				Gen: $T28, 
;WRITES space		Kill: 				Gen: 
;WRITES smS		Kill: 				Gen: 
;WRITEI $-1		Kill: 				Gen: $-1, 
;WRITES space		Kill: 				Gen: 
;STOREI 1 $T29		Kill: $T29, 			Gen: 
;STOREI $T29 $6		Kill: $6, 			Gen: $T29, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL GetValue		Kill: 				Gen: 
;LINK 1			Kill: 				Gen: 
;STOREI 0 $T30		Kill: $T30, 			Gen: 
;NEI $7 $T30 label10	Kill: 				Gen: $7, $T30, 
;STOREF $8 $T31		Kill: $T31, 			Gen: $8, 
;STOREF $T31 $6		Kill: $6, 			Gen: $T31, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label11		Kill: 				Gen: 
;LABEL label10		Kill: 				Gen: 
;STOREI 1 $T32		Kill: $T32, 			Gen: 
;NEI $7 $T32 label12	Kill: 				Gen: $7, $T32, 
;STOREF $9 $T33		Kill: $T33, 			Gen: $9, 
;STOREF $T33 $6		Kill: $6, 			Gen: $T33, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label13		Kill: 				Gen: 
;LABEL label12		Kill: 				Gen: 
;STOREI 2 $T34		Kill: $T34, 			Gen: 
;NEI $7 $T34 label14	Kill: 				Gen: $7, $T34, 
;STOREF $10 $T35	Kill: $T35, 				Gen: $10, 
;STOREF $T35 $6		Kill: $6, 			Gen: $T35, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label15		Kill: 				Gen: 
;LABEL label14		Kill: 				Gen: 
;STOREI 3 $T36		Kill: $T36, 			Gen: 
;NEI $7 $T36 label16	Kill: 				Gen: $7, $T36, 
;STOREF $11 $T37	Kill: $T37, 				Gen: $11, 
;STOREF $T37 $6		Kill: $6, 			Gen: $T37, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label17		Kill: 				Gen: 
;LABEL label16		Kill: 				Gen: 
;STOREI 4 $T38		Kill: $T38, 			Gen: 
;NEI $7 $T38 label18	Kill: 				Gen: $T38, $7, 
;STOREF $12 $T39	Kill: $T39, 				Gen: $12, 
;STOREF $T39 $6		Kill: $6, 			Gen: $T39, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label19		Kill: 				Gen: 
;LABEL label18		Kill: 				Gen: 
;STOREI 5 $T40		Kill: $T40, 			Gen: 
;NEI $7 $T40 label20	Kill: 				Gen: $7, $T40, 
;STOREF $13 $T41	Kill: $T41, 				Gen: $13, 
;STOREF $T41 $6		Kill: $6, 			Gen: $T41, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label21		Kill: 				Gen: 
;LABEL label20		Kill: 				Gen: 
;STOREI 6 $T42		Kill: $T42, 			Gen: 
;NEI $7 $T42 label22	Kill: 				Gen: $7, $T42, 
;STOREF $14 $T43	Kill: $T43, 				Gen: $14, 
;STOREF $T43 $6		Kill: $6, 			Gen: $T43, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label23		Kill: 				Gen: 
;LABEL label22		Kill: 				Gen: 
;STOREI 7 $T44		Kill: $T44, 			Gen: 
;NEI $7 $T44 label24	Kill: 				Gen: $7, $T44, 
;STOREF $15 $T45	Kill: $T45, 				Gen: $15, 
;STOREF $T45 $6		Kill: $6, 			Gen: $T45, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label25		Kill: 				Gen: 
;LABEL label24		Kill: 				Gen: 
;LABEL label25		Kill: 				Gen: 
;LABEL label23		Kill: 				Gen: 
;LABEL label21		Kill: 				Gen: 
;LABEL label19		Kill: 				Gen: 
;LABEL label17		Kill: 				Gen: 
;LABEL label15		Kill: 				Gen: 
;LABEL label13		Kill: 				Gen: 
;LABEL label11		Kill: 				Gen: 
;STOREI 0 $T46		Kill: $T46, 			Gen: 
;STOREI $T46 $6		Kill: $6, 			Gen: $T46, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL PrintIndex	Kill: 					Gen: 
;LINK 1			Kill: 				Gen: 
;STOREI 0 $T47		Kill: $T47, 			Gen: 
;NEI $7 $T47 label26	Kill: 				Gen: $7, $T47, 
;WRITEF $8		Kill: 				Gen: $8, 
;WRITES space		Kill: 				Gen: 
;STOREF $8 $T48		Kill: $T48, 			Gen: $8, 
;STOREF $T48 $6		Kill: $6, 			Gen: $T48, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label27		Kill: 				Gen: 
;LABEL label26		Kill: 				Gen: 
;STOREI 1 $T49		Kill: $T49, 			Gen: 
;NEI $7 $T49 label28	Kill: 				Gen: $T49, $7, 
;WRITEF $9		Kill: 				Gen: $9, 
;WRITES space		Kill: 				Gen: 
;STOREF $9 $T50		Kill: $T50, 			Gen: $9, 
;STOREF $T50 $6		Kill: $6, 			Gen: $T50, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label29		Kill: 				Gen: 
;LABEL label28		Kill: 				Gen: 
;STOREI 2 $T51		Kill: $T51, 			Gen: 
;NEI $7 $T51 label30	Kill: 				Gen: $7, $T51, 
;WRITEF $10		Kill: 				Gen: $10, 
;WRITES space		Kill: 				Gen: 
;STOREF $10 $T52	Kill: $T52, 				Gen: $10, 
;STOREF $T52 $6		Kill: $6, 			Gen: $T52, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label31		Kill: 				Gen: 
;LABEL label30		Kill: 				Gen: 
;STOREI 3 $T53		Kill: $T53, 			Gen: 
;NEI $7 $T53 label32	Kill: 				Gen: $7, $T53, 
;WRITEF $11		Kill: 				Gen: $11, 
;WRITES space		Kill: 				Gen: 
;STOREF $11 $T54	Kill: $T54, 				Gen: $11, 
;STOREF $T54 $6		Kill: $6, 			Gen: $T54, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label33		Kill: 				Gen: 
;LABEL label32		Kill: 				Gen: 
;STOREI 4 $T55		Kill: $T55, 			Gen: 
;NEI $7 $T55 label34	Kill: 				Gen: $T55, $7, 
;WRITEF $12		Kill: 				Gen: $12, 
;WRITES space		Kill: 				Gen: 
;STOREF $12 $T56	Kill: $T56, 				Gen: $12, 
;STOREF $T56 $6		Kill: $6, 			Gen: $T56, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label35		Kill: 				Gen: 
;LABEL label34		Kill: 				Gen: 
;STOREI 5 $T57		Kill: $T57, 			Gen: 
;NEI $7 $T57 label36	Kill: 				Gen: $T57, $7, 
;WRITEF $13		Kill: 				Gen: $13, 
;WRITES space		Kill: 				Gen: 
;STOREF $13 $T58	Kill: $T58, 				Gen: $13, 
;STOREF $T58 $6		Kill: $6, 			Gen: $T58, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label37		Kill: 				Gen: 
;LABEL label36		Kill: 				Gen: 
;STOREI 6 $T59		Kill: $T59, 			Gen: 
;NEI $7 $T59 label38	Kill: 				Gen: $7, $T59, 
;WRITEF $14		Kill: 				Gen: $14, 
;WRITES space		Kill: 				Gen: 
;STOREF $14 $T60	Kill: $T60, 				Gen: $14, 
;STOREF $T60 $6		Kill: $6, 			Gen: $T60, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label39		Kill: 				Gen: 
;LABEL label38		Kill: 				Gen: 
;STOREI 7 $T61		Kill: $T61, 			Gen: 
;NEI $7 $T61 label40	Kill: 				Gen: $7, $T61, 
;WRITEF $15		Kill: 				Gen: $15, 
;WRITES space		Kill: 				Gen: 
;STOREF $15 $T62	Kill: $T62, 				Gen: $15, 
;STOREF $T62 $6		Kill: $6, 			Gen: $T62, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 
;JUMP label41		Kill: 				Gen: 
;LABEL label40		Kill: 				Gen: 
;LABEL label41		Kill: 				Gen: 
;LABEL label39		Kill: 				Gen: 
;LABEL label37		Kill: 				Gen: 
;LABEL label35		Kill: 				Gen: 
;LABEL label33		Kill: 				Gen: 
;LABEL label31		Kill: 				Gen: 
;LABEL label29		Kill: 				Gen: 
;LABEL label27		Kill: 				Gen: 
;STOREI 0 $T63		Kill: $T63, 			Gen: 
;STOREI $T63 $6		Kill: $6, 			Gen: $T63, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

;LABEL SYSIN		Kill: 				Gen: 
;LINK 4			Kill: 				Gen: 
;STOREI 0 $T64		Kill: $T64, 			Gen: 
;STOREI $T64 $-1	Kill: $-1, 				Gen: $T64, 
;STOREI 8 $T65		Kill: $T65, 			Gen: 
;STOREI $T65 $-2	Kill: $-2, 				Gen: $T65, 
;READF a0		Kill: a0, 				Gen: 
;READF a1		Kill: a1, 				Gen: 
;READF a2		Kill: a2, 				Gen: 
;READF a3		Kill: a3, 				Gen: 
;READF a4		Kill: a4, 				Gen: 
;READF a5		Kill: a5, 				Gen: 
;READF a6		Kill: a6, 				Gen: 
;READF a7		Kill: a7, 				Gen: 
;WRITES inputMessage	Kill: 				Gen: 
;STOREI 0 $T66		Kill: $T66, 			Gen: 
;STOREI $T66 $-1	Kill: $-1, 				Gen: $T66, 
;LABEL label42		Kill: 				Gen: 
;STOREI 2 $T67		Kill: $T67, 			Gen: 
;DIVI arraysize $T67 $T68	Kill: $T68, 			Gen: $T67, arraysize, 
;GEI $-1 $T24 label44	Kill: 				Gen: $-1, $T24, 
;PUSH a7		Kill: 					Gen: a7, 
;PUSH a6		Kill: 					Gen: a6, 
;PUSH a5		Kill: 					Gen: a5, 
;PUSH a4		Kill: 					Gen: a4, 
;PUSH a3		Kill: 					Gen: a3, 
;PUSH a2		Kill: 					Gen: a2, 
;PUSH a1		Kill: 					Gen: a1, 
;PUSH a0		Kill: 					Gen: a0, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR PrintIndex		Kill: 				Gen: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T71		Kill: $T71, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T71 $-3	Kill: $-3, 				Gen: $T71, 
;STOREI 1 $T69		Kill: $T69, 			Gen: 
;ADDI $-1 $T69 $T70	Kill: $T70, 				Gen: $T69, $-1, 
;STOREI $T70 $-1	Kill: $-1, 				Gen: $T70, 
;JUMP label42		Kill: 				Gen: 
;LABEL label44		Kill: 				Gen: 
;LABEL label45		Kill: 				Gen: 
;STOREI arraysize $T72	Kill: $T72, 			Gen: arraysize, 
;GEI $-1 $T72 label47	Kill: 				Gen: $-1, $T72, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR INCRE		Kill: 				Gen: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T73		Kill: $T73, 				Gen: 
;POP 			Kill: 				Gen: 
;PUSH a7		Kill: 					Gen: a7, 
;PUSH a6		Kill: 					Gen: a6, 
;PUSH a5		Kill: 					Gen: a5, 
;PUSH a4		Kill: 					Gen: a4, 
;PUSH a3		Kill: 					Gen: a3, 
;PUSH a2		Kill: 					Gen: a2, 
;PUSH a1		Kill: 					Gen: a1, 
;PUSH a0		Kill: 					Gen: a0, 
;PUSH $-1		Kill: 					Gen: $-1, 
;PUSH 			Kill: 				Gen: 
;PUSHREG		Kill: 					Gen: 
;JSR PrintIndex		Kill: 				Gen: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Kill: 				Gen: 
;POP $T74		Kill: $T74, 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;POP 			Kill: 				Gen: 
;STOREI $T74 $-3	Kill: $-3, 				Gen: $T74, 
;STOREI $T73 $-1	Kill: $-1, 				Gen: $T73, 
;JUMP label45		Kill: 				Gen: 
;LABEL label47		Kill: 				Gen: 
;WRITES eol		Kill: 				Gen: 
;STOREI $-2 $T75	Kill: $T75, 				Gen: $-2, 
;STOREI $T75 $6		Kill: $6, 			Gen: $T75, 
;UNLINK			Kill: 				Gen: 
;RET			Kill: 				Gen: 

; ========= CFG IR NODE / LIVE IN / LIVE OUT =========

;LABEL INCRE		Live IN: maxg, $7, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $7, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LINK 1			Live IN: maxg, $7, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $7, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 1 $T1		Live IN: maxg, $7, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $T1, $7, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;ADDI $7 $T1 $T2	Live IN: a0, maxg, $7, $T1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T2, maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI $T2 $6		Live IN: $T2, maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 

;LABEL main		Live IN: maxg, a0, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LINK 2			Live IN: maxg, a0, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF 1000.00 $T3	Live IN: maxg, a0, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $T3, maxg, a0, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $T3 floatingMaxConstant	Live IN: $T3, maxg, a0, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH 			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSHREG		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JSR SYSIN		Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, a2, a3, a4, ming, a5, a6, a7, 
;POPREG			Live IN: maxg, a0, floatingMaxConstant, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP $T4		Live IN: maxg, a0, floatingMaxConstant, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, $T4, floatingMaxConstant, a1, a2, a3, a4, ming, a5, a6, a7, 
;STOREI $T4 arraysize	Live IN: maxg, $T4, a0, floatingMaxConstant, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a7		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a6		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a5		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a4		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a3		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a2		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a1		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a0		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH 			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSHREG		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JSR findMin		Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POPREG			Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP $T5		Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, $T5, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: maxg, a0, $T5, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, $T5, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: maxg, a0, $T5, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, $T5, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: maxg, a0, $T5, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, $T5, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: maxg, a0, $T5, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, $T5, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: maxg, a0, $T5, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, $T5, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: maxg, a0, $T5, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, $T5, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: maxg, a0, $T5, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, $T5, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: maxg, a0, $T5, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, $T5, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $T5 $-1		Live IN: a0, maxg, $T5, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;WRITEF $-1		Live IN: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;WRITES eol		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 

;LABEL findMin		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;LINK 4			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 0 $T6		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T6, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $14		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $T6, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T6, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $13		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $T6, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T6, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $12		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $T6, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T6, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $11		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $T6, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T6, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $10		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $T6, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T6, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $9		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $T6, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T6, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $8		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $T6, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T6, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $7		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $T6, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T6, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $T6		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $T6, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSHREG		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;JSR GetValue		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POPREG			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP $T7		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, $T7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, $T7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, $T7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, $T7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, $T7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, $T7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, $T7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, $T7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, $T7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $T7 $-2		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $T7, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 0 $T8		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, floatingMaxConstant, a1, arraysize, a2, a3, $T8, a4, ming, a5, a6, a7, 
;STOREI $T8 $-1		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, floatingMaxConstant, arraysize, a1, a2, $T8, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LABEL label1		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI arraysize $T9	Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, $T9, ming, a5, a6, a7, 
;GEI $-1 $T9 label3	Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, $T9, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $14		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $13		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $12		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $11		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $10		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $9		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $8		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $7		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $-1		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSHREG		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;JSR GetValue		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;POP $T12		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $T12 $-3	Live IN: $13, $14, $11, $12, $10, a0, $T12, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;WRITEF $-3		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;WRITES space		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 1 $T13		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $14		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $13		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $12		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $11		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $10		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $9		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $8		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $7		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $-1		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSHREG		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;JSR GetValue		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POPREG			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POP $T14		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $-2		Live IN: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $T14		Live IN: $13, $14, $11, $12, $10, a0, $T14, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH 			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSHREG		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, floatingMaxConstant, $-3, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $9, $-1, $-3, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;JSR IsSmallerThan	Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POPREG			Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP $T15		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $9, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T15, maxg, $7, $8, $-2, $9, $-1, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T15, maxg, $7, $-2, $8, $-1, $9, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T15, maxg, $7, $8, $-2, $9, $-1, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $13, $14, $11, $12, $10, a0, $T15, maxg, $7, $-2, $8, $-1, $9, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T15, maxg, $7, $8, $-2, $9, $-1, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 1 $T16		Live IN: $13, $14, $11, $12, $10, a0, $T15, maxg, $7, $-2, $8, $-1, $9, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T16, $T15, maxg, $7, $8, $-2, $9, $-1, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;NEI $T16 $T15 label4	Live IN: $13, $14, $11, $12, $10, a0, $T16, $T15, maxg, $7, $-2, $8, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, $-3, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $-3 $T17	Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $9, $-1, $-3, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T17, maxg, $7, $8, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $T17 $-2	Live IN: $13, $14, $11, $12, $10, a0, $T17, maxg, $7, $8, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;JUMP label5		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LABEL label4		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LABEL label5		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITEF $-2		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES eol		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 1 $T10		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $T10, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;ADDI $-1 $T10 $T11	Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $-1, $T10, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T11, maxg, $7, $8, $-2, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI $T11 $-1	Live IN: $13, $14, $11, $12, $10, a0, $T11, maxg, $7, $-2, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;JUMP label1		Live IN: $13, $14, $11, $12, $10, a0, maxg, $7, $-2, $8, $9, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, maxg, $7, $8, $-2, $-1, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LABEL label3		Live IN: maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $-2 $T18	Live IN: maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, $T18, a6, a7, 
;STOREF $T18 $6		Live IN: a0, $T18, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 

;LABEL IsLargerThanOrEqualTo	Live IN: maxg, $7, $8, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $7, $8, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LINK 2			Live IN: maxg, $7, $8, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $7, $8, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $8 $T19		Live IN: maxg, $7, $8, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $T19, $7, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LTF $7 $T19 label6	Live IN: $T19, a0, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 1 $T20		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, $T20, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI $T20 $-1	Live IN: a0, maxg, $T20, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES space		Live IN: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES letS		Live IN: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITEI $-1		Live IN: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES space		Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 1 $T21		Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, $T21, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI $T21 $6		Live IN: a0, maxg, $T21, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label7		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label6		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label7		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 0 $T22		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, $T22, a3, a4, a5, ming, a6, a7, 
;STOREI $T22 $-1	Live IN: a0, $T22, maxg, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES space		Live IN: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES letS		Live IN: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITEI $-1		Live IN: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES space		Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 0 $T23		Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, $T23, a2, a3, a4, ming, a5, a6, a7, 
;STOREI $T23 $6		Live IN: a0, $T23, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 

;LABEL IsSmallerThan	Live IN: maxg, $7, $8, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $7, $8, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LINK 2			Live IN: maxg, $7, $8, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $7, $8, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $8		Live IN: maxg, $7, $8, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $7, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $7		Live IN: maxg, $7, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH 			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSHREG		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JSR IsLargerThanOrEqualTo	Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POPREG			Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP $T24		Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, $T24, ming, a5, a6, a7, 
;POP 			Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, $T24, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, $T24, ming, a5, a6, a7, 
;POP 			Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, $T24, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, $T24, ming, a5, a6, a7, 
;STOREI 0 $T25		Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, $T24, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, $T25, a4, $T24, ming, a5, a6, a7, 
;EQI $T24 $T25 label8	Live IN: a0, $T25, $T24, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 0 $T26		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, $T26, a7, 
;STOREI $T26 $-1	Live IN: a0, $T26, maxg, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES space		Live IN: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES smS		Live IN: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITEI $-1		Live IN: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES space		Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 0 $T27		Live IN: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, $T27, a6, a7, 
;STOREI $T27 $6		Live IN: a0, $T27, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label9		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label8		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label9		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 1 $T28		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, $T28, 
;STOREI $T28 $-1	Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, $T28, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;WRITES space		Live IN: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;WRITES smS		Live IN: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;WRITEI $-1		Live IN: maxg, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;WRITES space		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 1 $T29		Live IN: a0, maxg, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: a0, $T29, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI $T29 $6		Live IN: a0, $T29, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 

;LABEL GetValue		Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;LINK 1			Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 0 $T30		Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T30, $15, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;NEI $7 $T30 label10	Live IN: $13, $14, $11, $12, $10, a0, $T30, $15, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $8 $T31		Live IN: maxg, $8, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, $T31, ming, a5, a6, a7, 
;STOREF $T31 $6		Live IN: a0, $T31, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label11		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label10		Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 1 $T32		Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T32, $15, maxg, $7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;NEI $7 $T32 label12	Live IN: $13, $14, $11, $12, $10, a0, $T32, $15, maxg, $7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $9 $T33		Live IN: maxg, $9, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $T33, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $T33 $6		Live IN: maxg, $T33, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label13		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label12		Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 2 $T34		Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $T34, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;NEI $7 $T34 label14	Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $T34, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $10 $T35	Live IN: maxg, $10, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, $T35, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $T35 $6		Live IN: a0, maxg, $T35, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label15		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label14		Live IN: $13, $14, $11, $12, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 3 $T36		Live IN: $13, $14, $11, $12, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, a0, $15, maxg, $7, $T36, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;NEI $7 $T36 label16	Live IN: $13, $14, $11, $12, a0, $15, maxg, $7, $T36, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $11 $T37	Live IN: $11, a0, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T37, maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $T37 $6		Live IN: $T37, maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label17		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label16		Live IN: $13, $14, $12, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $12, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 4 $T38		Live IN: $13, $14, $12, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $12, a0, $15, $T38, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;NEI $7 $T38 label18	Live IN: $13, $14, $12, a0, $15, $T38, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $12, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $12 $T39	Live IN: maxg, $12, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $T39, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $T39 $6		Live IN: a0, $T39, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label19		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label18		Live IN: $13, $14, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 5 $T40		Live IN: $13, $14, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, a0, $T40, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;NEI $7 $T40 label20	Live IN: $13, $14, a0, $T40, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $13 $T41	Live IN: $13, maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, $T41, a4, ming, a5, a6, a7, 
;STOREF $T41 $6		Live IN: a0, $T41, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label21		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label20		Live IN: $14, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $14, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 6 $T42		Live IN: $14, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $14, a0, $T42, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;NEI $7 $T42 label22	Live IN: $14, a0, $T42, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $14, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $14 $T43	Live IN: $14, maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, $T43, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $T43 $6		Live IN: a0, $T43, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label23		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label22		Live IN: a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 7 $T44		Live IN: a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $15, maxg, $7, $T44, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;NEI $7 $T44 label24	Live IN: a0, $15, maxg, $7, $T44, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $15, maxg, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $15 $T45	Live IN: a0, $15, maxg, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, $T45, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $T45 $6		Live IN: a0, maxg, $T45, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label25		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label24		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label25		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label23		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label21		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label19		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label17		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label15		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label13		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label11		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 0 $T46		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $T46, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI $T46 $6		Live IN: maxg, $T46, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 

;LABEL PrintIndex	Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LINK 1			Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 0 $T47		Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $T47, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;NEI $7 $T47 label26	Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $T47, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $8, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;WRITEF $8		Live IN: maxg, $8, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $8, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES space		Live IN: maxg, $8, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $8, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $8 $T48		Live IN: maxg, $8, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $T48, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $T48 $6		Live IN: a0, $T48, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label27		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label26		Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 1 $T49		Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $T49, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;NEI $7 $T49 label28	Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $T49, $7, $9, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, $9, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;WRITEF $9		Live IN: maxg, $9, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $9, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES space		Live IN: maxg, $9, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $9, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $9 $T50		Live IN: maxg, $9, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, $T50, a4, ming, a5, a6, a7, 
;STOREF $T50 $6		Live IN: a0, $T50, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label29		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label28		Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 2 $T51		Live IN: $13, $14, $11, $12, $10, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $T51, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;NEI $7 $T51 label30	Live IN: $13, $14, $11, $12, $10, a0, $T51, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $13, $14, $11, $12, $10, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;WRITEF $10		Live IN: maxg, $10, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $10, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES space		Live IN: maxg, $10, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $10, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $10 $T52	Live IN: maxg, $10, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, $T52, a6, a7, 
;STOREF $T52 $6		Live IN: a0, $T52, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label31		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label30		Live IN: $13, $14, $11, $12, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 3 $T53		Live IN: $13, $14, $11, $12, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, a0, $15, $T53, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;NEI $7 $T53 label32	Live IN: $13, $14, $11, $12, a0, $15, $T53, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $11, $12, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;WRITEF $11		Live IN: $11, maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $11, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;WRITES space		Live IN: $11, maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $11, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $11 $T54	Live IN: $11, a0, maxg, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: a0, $T54, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $T54 $6		Live IN: a0, $T54, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label33		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label32		Live IN: $13, $14, $12, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $12, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 4 $T55		Live IN: $13, $14, $12, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $12, a0, $15, $T55, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;NEI $7 $T55 label34	Live IN: $13, $14, $12, a0, $15, $T55, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, $12, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;WRITEF $12		Live IN: maxg, $12, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $12, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;WRITES space		Live IN: maxg, $12, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $12, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $12 $T56	Live IN: maxg, $12, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $T56, maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $T56 $6		Live IN: $T56, maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label35		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label34		Live IN: $13, $14, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 5 $T57		Live IN: $13, $14, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, a0, $15, $T57, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;NEI $7 $T57 label36	Live IN: $13, $14, a0, $15, $T57, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, $14, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;WRITEF $13		Live IN: $13, maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;WRITES space		Live IN: $13, maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $13, maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $13 $T58	Live IN: $13, maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $T58, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $T58 $6		Live IN: maxg, $T58, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label37		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label36		Live IN: $14, a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $14, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 6 $T59		Live IN: $14, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $14, a0, $15, maxg, $7, $T59, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;NEI $7 $T59 label38	Live IN: $14, a0, $15, maxg, $7, $T59, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $14, a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;WRITEF $14		Live IN: $14, maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $14, maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES space		Live IN: $14, maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $14, maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREF $14 $T60	Live IN: $14, maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, a1, arraysize, a2, $T60, a3, a4, ming, a5, a6, a7, 
;STOREF $T60 $6		Live IN: a0, $T60, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label39		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label38		Live IN: a0, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 7 $T61		Live IN: a0, $15, maxg, $7, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: a0, $T61, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;NEI $7 $T61 label40	Live IN: a0, $T61, $15, maxg, $7, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: a0, $15, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;WRITEF $15		Live IN: a0, $15, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $15, maxg, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES space		Live IN: a0, $15, maxg, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: a0, $15, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREF $15 $T62	Live IN: a0, $15, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, $T62, 
;STOREF $T62 $6		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, $T62, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JUMP label41		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label40		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label41		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label39		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label37		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label35		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label33		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label31		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label29		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;LABEL label27		Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI 0 $T63		Live IN: a0, maxg, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: a0, $T63, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;STOREI $T63 $6		Live IN: a0, $T63, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 

;LABEL SYSIN		Live IN: arraysize, maxg, $T24, ming, floatingMaxConstant, 	Live OUT: maxg, floatingMaxConstant, arraysize, $T24, ming, 
;LINK 4			Live IN: arraysize, maxg, $T24, ming, floatingMaxConstant, 	Live OUT: maxg, floatingMaxConstant, arraysize, $T24, ming, 
;STOREI 0 $T64		Live IN: arraysize, maxg, $T24, ming, floatingMaxConstant, 	Live OUT: maxg, floatingMaxConstant, arraysize, $T24, ming, $T64, 
;STOREI $T64 $-1	Live IN: arraysize, maxg, $T24, ming, $T64, floatingMaxConstant, 	Live OUT: maxg, floatingMaxConstant, arraysize, $T24, ming, 
;STOREI 8 $T65		Live IN: arraysize, maxg, $T24, ming, floatingMaxConstant, 	Live OUT: maxg, floatingMaxConstant, arraysize, $T24, ming, $T65, 
;STOREI $T65 $-2	Live IN: arraysize, maxg, $T24, $T65, ming, floatingMaxConstant, 	Live OUT: maxg, $-2, floatingMaxConstant, arraysize, $T24, ming, 
;READF a0		Live IN: maxg, $-2, floatingMaxConstant, arraysize, $T24, ming, 	Live OUT: maxg, $-2, a0, floatingMaxConstant, arraysize, $T24, ming, 
;READF a1		Live IN: maxg, $-2, a0, floatingMaxConstant, arraysize, $T24, ming, 	Live OUT: maxg, $-2, a0, floatingMaxConstant, a1, arraysize, $T24, ming, 
;READF a2		Live IN: maxg, $-2, a0, floatingMaxConstant, arraysize, a1, $T24, ming, 	Live OUT: maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, $T24, ming, 
;READF a3		Live IN: maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, $T24, ming, 	Live OUT: maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, a3, $T24, ming, 
;READF a4		Live IN: maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, $T24, ming, 	Live OUT: maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, $T24, ming, 
;READF a5		Live IN: maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, $T24, a4, ming, 	Live OUT: maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, $T24, ming, a5, 
;READF a6		Live IN: a0, $T24, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, 	Live OUT: a0, $T24, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, 
;READF a7		Live IN: a0, $T24, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, 	Live OUT: a0, $T24, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES inputMessage	Live IN: a0, $T24, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 0 $T66		Live IN: a0, $T24, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, $T66, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI $T66 $-1	Live IN: a0, $T24, $T66, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LABEL label42		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 2 $T67		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $T67, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;DIVI arraysize $T67 $T68	Live IN: a0, $T24, maxg, $T67, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;GEI $-1 $T24 label44	Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a7		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a6		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a5		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a4		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a3		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a2		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a1		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a0		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH $-1		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH 			Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSHREG		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;JSR PrintIndex		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POPREG			Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP $T71		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T71, a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: a0, $T71, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T71, a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: a0, $T71, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T71, a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: a0, $T71, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T71, a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: a0, $T71, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T71, a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: a0, $T71, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T71, a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: a0, $T71, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T71, a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: a0, $T71, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T71, a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: a0, $T71, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T71, a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: a0, $T71, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T71, a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI $T71 $-3	Live IN: $T71, a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI 1 $T69		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, $T69, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;ADDI $-1 $T69 $T70	Live IN: a0, $T24, $T69, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T70, a0, $T24, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI $T70 $-1	Live IN: $T70, a0, $T24, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;JUMP label42		Live IN: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T24, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LABEL label44		Live IN: maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LABEL label45		Live IN: maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI arraysize $T72	Live IN: a0, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, $T72, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;GEI $-1 $T72 label47	Live IN: a0, $T72, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $-1		Live IN: maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH 			Live IN: maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSHREG		Live IN: maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JSR INCRE		Live IN: a0, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POPREG			Live IN: a0, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: a0, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP $T73		Live IN: a0, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, a0, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $T73, a0, maxg, $-2, $-1, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, a0, maxg, $-2, $-1, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a7		Live IN: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a6		Live IN: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;PUSH a5		Live IN: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a4		Live IN: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a3		Live IN: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a2		Live IN: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a1		Live IN: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH a0		Live IN: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH $-1		Live IN: $T73, maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $T73, maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSH 			Live IN: $T73, maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $T73, maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;PUSHREG		Live IN: $T73, maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: $T73, maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;JSR PrintIndex		Live IN: $T73, maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POPREG			Live IN: $T73, maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;POP $T74		Live IN: $T73, a0, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;POP 			Live IN: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, a1, arraysize, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, $T74, a0, maxg, $-2, floatingMaxConstant, arraysize, a1, a2, a3, a4, ming, a5, a6, a7, 
;STOREI $T74 $-3	Live IN: $T73, $T74, maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: $T73, maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI $T73 $-1	Live IN: $T73, maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;JUMP label45		Live IN: maxg, $-2, $-1, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-2, $-1, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;LABEL label47		Live IN: maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;WRITES eol		Live IN: maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $-2, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI $-2 $T75	Live IN: maxg, $-2, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, $T75, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 
;STOREI $T75 $6		Live IN: $T75, a0, maxg, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;UNLINK			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;RET			Live IN: maxg, a0, floatingMaxConstant, a1, arraysize, a2, a3, a4, ming, a5, a6, a7, 	Live OUT: maxg, a0, floatingMaxConstant, arraysize, a1, a2, a3, a4, a5, ming, a6, a7, 
;str inputMessage "Inputs are: \n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str sizeMessage "Array size is: " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str sortingMessage "Sorting... \n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str space " " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str eol "\n" 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str smS " isSmallerThan: " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;str letS " isLargerThanOrEqualTo: " 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var arraysize 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a5 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a6 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var a7 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var maxg 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var ming 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;var floatingMaxConstant 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;jsr main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;sys halt 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL INCRE liveout: ; { maxg $7 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;label INCRE 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { maxg $7 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;link 76 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T1 liveout: ; { maxg $T1 $7 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T1 }
;ADDI $7 $T1 $T2 liveout: ; { $T2 maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
; ensure(): $T1 has register r3
; switching owner of register $7 to $T2 { r0-><null> || r1-><null> || r2->$7 || r3->$T1* }
;addi r3 r2 	; { r0-><null> || r1-><null> || r2->$T2 || r3->$T1* }
; freeing unused variable r3
; spilling varialbe $T1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2->$T2* || r3->$T1* }
;STOREI $T2 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T2 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T2* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T2
;move r2 $-2 	; { r0-><null> || r1-><null> || r2->$T2* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL main liveout: ; { maxg a0 arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;label main 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 2 liveout: ; { maxg a0 arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;link 77 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF 1000.00 $T3 liveout: ; { $T3 maxg a0 arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T3 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
; loading $-4 to register r3
;move $-4 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
;move 1000.00 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T3 }
;STOREF $T3 floatingMaxConstant liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T3 has register r3
; ensure(): floatingMaxConstant gets register r2 { r0-><null> || r1-><null> || r2->floatingMaxConstant || r3->$T3* }
; loading floatingMaxConstant to register r2
;move floatingMaxConstant r2 	; { r0-><null> || r1-><null> || r2->floatingMaxConstant || r3->$T3* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->floatingMaxConstant || r3->$T3* }
; freeing unused variable r3
; spilling varialbe $T3
;move r3 $-4 	; { r0-><null> || r1-><null> || r2->floatingMaxConstant* || r3->$T3* }
;PUSH  liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;push 	; { r0-><null> || r1-><null> || r2->floatingMaxConstant* || r3-><null> }
;PUSHREG liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;push r0 	; { r0-><null> || r1-><null> || r2->floatingMaxConstant* || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2->floatingMaxConstant* || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2->floatingMaxConstant* || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2->floatingMaxConstant* || r3-><null> }
;JSR SYSIN liveout: ; { maxg a0 floatingMaxConstant a1 a2 a3 a4 ming a5 a6 a7  }
; writing back global variables prior a function call
; spilling varialbe floatingMaxConstant
;move r2 floatingMaxConstant 	; { r0-><null> || r1-><null> || r2->floatingMaxConstant* || r3-><null> }
;jsr SYSIN 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { maxg a0 floatingMaxConstant a1 a2 a3 a4 ming a5 a6 a7  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T4 liveout: ; { maxg a0 $T4 floatingMaxConstant a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T4 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T4 }
; loading $-5 to register r3
;move $-5 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T4 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T4 }
;STOREI $T4 arraysize liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T4 has register r3
; ensure(): arraysize gets register r2 { r0-><null> || r1-><null> || r2->arraysize || r3->$T4* }
; loading arraysize to register r2
;move arraysize r2 	; { r0-><null> || r1-><null> || r2->arraysize || r3->$T4* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->arraysize || r3->$T4* }
; freeing unused variable r3
; spilling varialbe $T4
;move r3 $-5 	; { r0-><null> || r1-><null> || r2->arraysize* || r3->$T4* }
;PUSH a7 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): a7 gets register r3 { r0-><null> || r1-><null> || r2->arraysize* || r3->a7 }
; loading a7 to register r3
;move a7 r3 	; { r0-><null> || r1-><null> || r2->arraysize* || r3->a7 }
;push r3 	; { r0-><null> || r1-><null> || r2->arraysize* || r3->a7 }
;PUSH a6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): a6 gets register r1 { r0-><null> || r1->a6 || r2->arraysize* || r3->a7 }
; loading a6 to register r1
;move a6 r1 	; { r0-><null> || r1->a6 || r2->arraysize* || r3->a7 }
;push r1 	; { r0-><null> || r1->a6 || r2->arraysize* || r3->a7 }
;PUSH a5 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): a5 gets register r0 { r0->a5 || r1->a6 || r2->arraysize* || r3->a7 }
; loading a5 to register r0
;move a5 r0 	; { r0->a5 || r1->a6 || r2->arraysize* || r3->a7 }
;push r0 	; { r0->a5 || r1->a6 || r2->arraysize* || r3->a7 }
;PUSH a4 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill a4
; ensure(): a4 gets register r0 { r0->a4 || r1->a6 || r2->arraysize* || r3->a7 }
; loading a4 to register r0
;move a4 r0 	; { r0->a4 || r1->a6 || r2->arraysize* || r3->a7 }
;push r0 	; { r0->a4 || r1->a6 || r2->arraysize* || r3->a7 }
;PUSH a3 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->a6 || r2->arraysize* || r3->a7 }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->a6 || r2->arraysize* || r3->a7 }
;push r0 	; { r0->a3 || r1->a6 || r2->arraysize* || r3->a7 }
;PUSH a2 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill a2
; ensure(): a2 gets register r0 { r0->a2 || r1->a6 || r2->arraysize* || r3->a7 }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->a6 || r2->arraysize* || r3->a7 }
;push r0 	; { r0->a2 || r1->a6 || r2->arraysize* || r3->a7 }
;PUSH a1 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill a1
; ensure(): a1 gets register r0 { r0->a1 || r1->a6 || r2->arraysize* || r3->a7 }
; loading a1 to register r0
;move a1 r0 	; { r0->a1 || r1->a6 || r2->arraysize* || r3->a7 }
;push r0 	; { r0->a1 || r1->a6 || r2->arraysize* || r3->a7 }
;PUSH a0 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill a0
; ensure(): a0 gets register r0 { r0->a0 || r1->a6 || r2->arraysize* || r3->a7 }
; loading a0 to register r0
;move a0 r0 	; { r0->a0 || r1->a6 || r2->arraysize* || r3->a7 }
;push r0 	; { r0->a0 || r1->a6 || r2->arraysize* || r3->a7 }
;PUSH  liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;push 	; { r0->a0 || r1->a6 || r2->arraysize* || r3->a7 }
;PUSHREG liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;push r0 	; { r0->a0 || r1->a6 || r2->arraysize* || r3->a7 }
;push r1 	; { r0->a0 || r1->a6 || r2->arraysize* || r3->a7 }
;push r2 	; { r0->a0 || r1->a6 || r2->arraysize* || r3->a7 }
;push r3 	; { r0->a0 || r1->a6 || r2->arraysize* || r3->a7 }
;JSR findMin liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; writing back global variables prior a function call
; spilling varialbe a7
;move r3 a7 	; { r0->a0 || r1->a6 || r2->arraysize* || r3->a7 }
; spilling varialbe arraysize
;move r2 arraysize 	; { r0->a0 || r1->a6 || r2->arraysize* || r3-><null> }
; spilling varialbe a6
;move r1 a6 	; { r0->a0 || r1->a6 || r2-><null> || r3-><null> }
; spilling varialbe a0
;move r0 a0 	; { r0->a0 || r1-><null> || r2-><null> || r3-><null> }
;jsr findMin 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T5 liveout: ; { maxg a0 floatingMaxConstant $T5 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T5 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T5 }
; loading $-6 to register r3
;move $-6 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5 }
;POP  liveout: ; { maxg a0 floatingMaxConstant $T5 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5* }
;POP  liveout: ; { maxg a0 floatingMaxConstant $T5 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5* }
;POP  liveout: ; { maxg a0 floatingMaxConstant $T5 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5* }
;POP  liveout: ; { maxg a0 floatingMaxConstant $T5 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5* }
;POP  liveout: ; { maxg a0 floatingMaxConstant $T5 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5* }
;POP  liveout: ; { maxg a0 floatingMaxConstant $T5 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5* }
;POP  liveout: ; { maxg a0 floatingMaxConstant $T5 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5* }
;POP  liveout: ; { maxg a0 floatingMaxConstant $T5 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T5* }
;STOREF $T5 $-1 liveout: ; { maxg $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T5 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T5* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T5* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T5* }
; freeing unused variable r3
; spilling varialbe $T5
;move r3 $-6 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T5* }
;WRITEF $-1 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $-1 has register r2
;sys writer r2 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITES eol liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL findMin liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;label findMin 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 4 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;link 79 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T6 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T6 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T6 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T6 }
; loading $-9 to register r3
;move $-9 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T6 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T6 }
;PUSH $14 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T6 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $14 gets register r2 { r0-><null> || r1-><null> || r2->$14 || r3->$T6* }
; loading $14 to register r2
;move $14 r2 	; { r0-><null> || r1-><null> || r2->$14 || r3->$T6* }
;push r2 	; { r0-><null> || r1-><null> || r2->$14 || r3->$T6* }
;PUSH $13 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T6 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $13 gets register r1 { r0-><null> || r1->$13 || r2->$14 || r3->$T6* }
; loading $13 to register r1
;move $13 r1 	; { r0-><null> || r1->$13 || r2->$14 || r3->$T6* }
;push r1 	; { r0-><null> || r1->$13 || r2->$14 || r3->$T6* }
;PUSH $12 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T6 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $12 gets register r0 { r0->$12 || r1->$13 || r2->$14 || r3->$T6* }
; loading $12 to register r0
;move $12 r0 	; { r0->$12 || r1->$13 || r2->$14 || r3->$T6* }
;push r0 	; { r0->$12 || r1->$13 || r2->$14 || r3->$T6* }
;PUSH $11 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T6 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $11
; ensure(): $11 gets register r0 { r0->$11 || r1->$13 || r2->$14 || r3->$T6* }
; loading $11 to register r0
;move $11 r0 	; { r0->$11 || r1->$13 || r2->$14 || r3->$T6* }
;push r0 	; { r0->$11 || r1->$13 || r2->$14 || r3->$T6* }
;PUSH $10 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T6 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $10
; ensure(): $10 gets register r0 { r0->$10 || r1->$13 || r2->$14 || r3->$T6* }
; loading $10 to register r0
;move $10 r0 	; { r0->$10 || r1->$13 || r2->$14 || r3->$T6* }
;push r0 	; { r0->$10 || r1->$13 || r2->$14 || r3->$T6* }
;PUSH $9 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T6 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $9
; ensure(): $9 gets register r0 { r0->$9 || r1->$13 || r2->$14 || r3->$T6* }
; loading $9 to register r0
;move $9 r0 	; { r0->$9 || r1->$13 || r2->$14 || r3->$T6* }
;push r0 	; { r0->$9 || r1->$13 || r2->$14 || r3->$T6* }
;PUSH $8 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T6 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $8
; ensure(): $8 gets register r0 { r0->$8 || r1->$13 || r2->$14 || r3->$T6* }
; loading $8 to register r0
;move $8 r0 	; { r0->$8 || r1->$13 || r2->$14 || r3->$T6* }
;push r0 	; { r0->$8 || r1->$13 || r2->$14 || r3->$T6* }
;PUSH $7 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T6 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $7
; ensure(): $7 gets register r0 { r0->$7 || r1->$13 || r2->$14 || r3->$T6* }
; loading $7 to register r0
;move $7 r0 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T6* }
;push r0 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T6* }
;PUSH $T6 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T6 has register r3
;push r3 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T6* }
; freeing unused variable r3
; spilling varialbe $T6
;move r3 $-9 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T6* }
;PUSH  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;push 	; { r0->$7 || r1->$13 || r2->$14 || r3-><null> }
;PUSHREG liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;push r0 	; { r0->$7 || r1->$13 || r2->$14 || r3-><null> }
;push r1 	; { r0->$7 || r1->$13 || r2->$14 || r3-><null> }
;push r2 	; { r0->$7 || r1->$13 || r2->$14 || r3-><null> }
;push r3 	; { r0->$7 || r1->$13 || r2->$14 || r3-><null> }
;JSR GetValue liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; writing back global variables prior a function call
;jsr GetValue 	; { r0->$7 || r1->$13 || r2->$14 || r3-><null> }
;POPREG liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop r3 	; { r0->$7 || r1->$13 || r2->$14 || r3-><null> }
;pop r2 	; { r0->$7 || r1->$13 || r2->$14 || r3-><null> }
;pop r1 	; { r0->$7 || r1->$13 || r2->$14 || r3-><null> }
;pop r0 	; { r0->$7 || r1->$13 || r2->$14 || r3-><null> }
;POP $T7 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T7 gets register r3 { r0->$7 || r1->$13 || r2->$14 || r3->$T7 }
; loading $-10 to register r3
;move $-10 r3 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T7 }
;pop r3 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T7 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T7* }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T7* }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T7* }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T7* }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T7* }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T7* }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T7* }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T7* }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $T7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$7 || r1->$13 || r2->$14 || r3->$T7* }
;STOREF $T7 $-2 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T7 has register r3
; freeing unused variable r0
; allocate() has to spill $-2
; ensure(): $-2 gets register r0 { r0->$-2 || r1->$13 || r2->$14 || r3->$T7* }
; loading $-2 to register r0
;move $-2 r0 	; { r0->$-2 || r1->$13 || r2->$14 || r3->$T7* }
;move r3 r0 	; { r0->$-2 || r1->$13 || r2->$14 || r3->$T7* }
; freeing unused variable r3
; spilling varialbe $T7
;move r3 $-10 	; { r0->$-2* || r1->$13 || r2->$14 || r3->$T7* }
;STOREI 0 $T8 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 floatingMaxConstant a1 arraysize a2 a3 $T8 a4 ming a5 a6 a7  }
; ensure(): $T8 gets register r3 { r0->$-2* || r1->$13 || r2->$14 || r3->$T8 }
; loading $-11 to register r3
;move $-11 r3 	; { r0->$-2* || r1->$13 || r2->$14 || r3->$T8 }
;move 0 r3 	; { r0->$-2* || r1->$13 || r2->$14 || r3->$T8 }
;STOREI $T8 $-1 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T8 has register r3
; freeing unused variable r0
; spilling varialbe $-2
;move r0 $-2 	; { r0->$-2* || r1->$13 || r2->$14 || r3->$T8* }
; allocate() has to spill $-1
; ensure(): $-1 gets register r0 { r0->$-1 || r1->$13 || r2->$14 || r3->$T8* }
; loading $-1 to register r0
;move $-1 r0 	; { r0->$-1 || r1->$13 || r2->$14 || r3->$T8* }
;move r3 r0 	; { r0->$-1 || r1->$13 || r2->$14 || r3->$T8* }
; freeing unused variable r3
; spilling varialbe $T8
;move r3 $-11 	; { r0->$-1* || r1->$13 || r2->$14 || r3->$T8* }
;LABEL label1 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
; spilling varialbe $14
;move r2 $14 	; { r0->$-1* || r1->$13 || r2->$14 || r3-><null> }
; spilling varialbe $13
;move r1 $13 	; { r0->$-1* || r1->$13 || r2-><null> || r3-><null> }
; spilling varialbe $-1
;move r0 $-1 	; { r0->$-1* || r1-><null> || r2-><null> || r3-><null> }
;label label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI arraysize $T9 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant arraysize a1 a2 a3 a4 $T9 ming a5 a6 a7  }
; ensure(): arraysize gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->arraysize }
; loading arraysize to register r3
;move arraysize r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->arraysize }
; ensure(): $T9 gets register r2 { r0-><null> || r1-><null> || r2->$T9 || r3->arraysize }
; loading $-12 to register r2
;move $-12 r2 	; { r0-><null> || r1-><null> || r2->$T9 || r3->arraysize }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T9 || r3->arraysize }
;GEI $-1 $T9 label3 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $-1 gets register r1 { r0-><null> || r1->$-1 || r2->$T9* || r3->arraysize }
; loading $-1 to register r1
;move $-1 r1 	; { r0-><null> || r1->$-1 || r2->$T9* || r3->arraysize }
; ensure(): $T9 has register r2
;cmpi r1 r2 	; { r0-><null> || r1->$-1 || r2->$T9* || r3->arraysize }
; spilling registers at the end of Basic Block
; spilling varialbe arraysize
;move r3 arraysize 	; { r0-><null> || r1->$-1 || r2->$T9* || r3->arraysize }
; spilling varialbe $T9
;move r2 $-12 	; { r0-><null> || r1->$-1 || r2->$T9* || r3-><null> }
; spilling varialbe $-1
;move r1 $-1 	; { r0-><null> || r1->$-1 || r2-><null> || r3-><null> }
;jge label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r1
; freeing unused variable r2
;PUSH $14 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $14 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
; loading $14 to register r3
;move $14 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
;PUSH $13 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $13 gets register r2 { r0-><null> || r1-><null> || r2->$13 || r3->$14 }
; loading $13 to register r2
;move $13 r2 	; { r0-><null> || r1-><null> || r2->$13 || r3->$14 }
;push r2 	; { r0-><null> || r1-><null> || r2->$13 || r3->$14 }
;PUSH $12 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $12 gets register r1 { r0-><null> || r1->$12 || r2->$13 || r3->$14 }
; loading $12 to register r1
;move $12 r1 	; { r0-><null> || r1->$12 || r2->$13 || r3->$14 }
;push r1 	; { r0-><null> || r1->$12 || r2->$13 || r3->$14 }
;PUSH $11 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $11 gets register r0 { r0->$11 || r1->$12 || r2->$13 || r3->$14 }
; loading $11 to register r0
;move $11 r0 	; { r0->$11 || r1->$12 || r2->$13 || r3->$14 }
;push r0 	; { r0->$11 || r1->$12 || r2->$13 || r3->$14 }
;PUSH $10 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill $10
; ensure(): $10 gets register r0 { r0->$10 || r1->$12 || r2->$13 || r3->$14 }
; loading $10 to register r0
;move $10 r0 	; { r0->$10 || r1->$12 || r2->$13 || r3->$14 }
;push r0 	; { r0->$10 || r1->$12 || r2->$13 || r3->$14 }
;PUSH $9 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill $9
; ensure(): $9 gets register r0 { r0->$9 || r1->$12 || r2->$13 || r3->$14 }
; loading $9 to register r0
;move $9 r0 	; { r0->$9 || r1->$12 || r2->$13 || r3->$14 }
;push r0 	; { r0->$9 || r1->$12 || r2->$13 || r3->$14 }
;PUSH $8 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $8
; ensure(): $8 gets register r0 { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
; loading $8 to register r0
;move $8 r0 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;push r0 	; { r0->$8 || r1->$12 || r2->$13 || r3->$14 }
;PUSH $7 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $7
; ensure(): $7 gets register r0 { r0->$7 || r1->$12 || r2->$13 || r3->$14 }
; loading $7 to register r0
;move $7 r0 	; { r0->$7 || r1->$12 || r2->$13 || r3->$14 }
;push r0 	; { r0->$7 || r1->$12 || r2->$13 || r3->$14 }
;PUSH $-1 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $-1
; ensure(): $-1 gets register r0 { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
; loading $-1 to register r0
;move $-1 r0 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;push r0 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;PUSH  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;push 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;PUSHREG liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;push r0 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;push r1 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;push r2 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;push r3 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;JSR GetValue liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;jsr GetValue 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;POPREG liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;pop r3 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;pop r2 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;pop r1 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;pop r0 	; { r0->$-1 || r1->$12 || r2->$13 || r3->$14 }
;POP $T12 liveout: ; { $13 $14 $11 $12 $10 a0 $T12 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill $T12
; ensure(): $T12 gets register r0 { r0->$T12 || r1->$12 || r2->$13 || r3->$14 }
; loading $-15 to register r0
;move $-15 r0 	; { r0->$T12 || r1->$12 || r2->$13 || r3->$14 }
;pop r0 	; { r0->$T12 || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T12 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T12* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T12 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T12* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T12 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T12* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T12 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T12* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T12 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T12* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T12 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T12* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T12 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T12* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T12 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T12* || r1->$12 || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T12 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T12* || r1->$12 || r2->$13 || r3->$14 }
;STOREF $T12 $-3 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 floatingMaxConstant $-3 a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T12 has register r0
; freeing unused variable r1
; allocate() has to spill $-3
; ensure(): $-3 gets register r1 { r0->$T12* || r1->$-3 || r2->$13 || r3->$14 }
; loading $-3 to register r1
;move $-3 r1 	; { r0->$T12* || r1->$-3 || r2->$13 || r3->$14 }
;move r0 r1 	; { r0->$T12* || r1->$-3 || r2->$13 || r3->$14 }
; freeing unused variable r0
; spilling varialbe $T12
;move r0 $-15 	; { r0->$T12* || r1->$-3* || r2->$13 || r3->$14 }
;WRITEF $-3 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $-3 has register r1
;sys writer r1 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;WRITES space liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;sys writes space 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;STOREI 1 $T13 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T13 gets register r0 { r0->$T13 || r1->$-3* || r2->$13 || r3->$14 }
; loading $-16 to register r0
;move $-16 r0 	; { r0->$T13 || r1->$-3* || r2->$13 || r3->$14 }
;move 1 r0 	; { r0->$T13 || r1->$-3* || r2->$13 || r3->$14 }
; freeing unused variable r0
; spilling varialbe $T13
;move r0 $-16 	; { r0->$T13* || r1->$-3* || r2->$13 || r3->$14 }
;PUSH $14 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $14 has register r3
;push r3 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;PUSH $13 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $13 has register r2
;push r2 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;PUSH $12 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $12 gets register r0 { r0->$12 || r1->$-3* || r2->$13 || r3->$14 }
; loading $12 to register r0
;move $12 r0 	; { r0->$12 || r1->$-3* || r2->$13 || r3->$14 }
;push r0 	; { r0->$12 || r1->$-3* || r2->$13 || r3->$14 }
;PUSH $11 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill $11
; ensure(): $11 gets register r0 { r0->$11 || r1->$-3* || r2->$13 || r3->$14 }
; loading $11 to register r0
;move $11 r0 	; { r0->$11 || r1->$-3* || r2->$13 || r3->$14 }
;push r0 	; { r0->$11 || r1->$-3* || r2->$13 || r3->$14 }
;PUSH $10 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill $10
; ensure(): $10 gets register r0 { r0->$10 || r1->$-3* || r2->$13 || r3->$14 }
; loading $10 to register r0
;move $10 r0 	; { r0->$10 || r1->$-3* || r2->$13 || r3->$14 }
;push r0 	; { r0->$10 || r1->$-3* || r2->$13 || r3->$14 }
;PUSH $9 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $-2 $8 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill $9
; ensure(): $9 gets register r0 { r0->$9 || r1->$-3* || r2->$13 || r3->$14 }
; loading $9 to register r0
;move $9 r0 	; { r0->$9 || r1->$-3* || r2->$13 || r3->$14 }
;push r0 	; { r0->$9 || r1->$-3* || r2->$13 || r3->$14 }
;PUSH $8 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $8
; ensure(): $8 gets register r0 { r0->$8 || r1->$-3* || r2->$13 || r3->$14 }
; loading $8 to register r0
;move $8 r0 	; { r0->$8 || r1->$-3* || r2->$13 || r3->$14 }
;push r0 	; { r0->$8 || r1->$-3* || r2->$13 || r3->$14 }
;PUSH $7 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $7
; ensure(): $7 gets register r0 { r0->$7 || r1->$-3* || r2->$13 || r3->$14 }
; loading $7 to register r0
;move $7 r0 	; { r0->$7 || r1->$-3* || r2->$13 || r3->$14 }
;push r0 	; { r0->$7 || r1->$-3* || r2->$13 || r3->$14 }
;PUSH $-1 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $-1
; ensure(): $-1 gets register r0 { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
; loading $-1 to register r0
;move $-1 r0 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;push r0 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;PUSH  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;push 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;PUSHREG liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;push r0 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;push r1 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;push r2 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;push r3 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;JSR GetValue liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;jsr GetValue 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;POPREG liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;pop r3 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;pop r2 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;pop r1 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;pop r0 	; { r0->$-1 || r1->$-3* || r2->$13 || r3->$14 }
;POP $T14 liveout: ; { $13 $14 $11 $12 $10 a0 $T14 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill $T14
; ensure(): $T14 gets register r0 { r0->$T14 || r1->$-3* || r2->$13 || r3->$14 }
; loading $-17 to register r0
;move $-17 r0 	; { r0->$T14 || r1->$-3* || r2->$13 || r3->$14 }
;pop r0 	; { r0->$T14 || r1->$-3* || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T14 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T14* || r1->$-3* || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T14 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T14* || r1->$-3* || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T14 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T14* || r1->$-3* || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T14 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T14* || r1->$-3* || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T14 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T14* || r1->$-3* || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T14 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T14* || r1->$-3* || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T14 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T14* || r1->$-3* || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T14 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T14* || r1->$-3* || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T14 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;pop 	; { r0->$T14* || r1->$-3* || r2->$13 || r3->$14 }
;PUSH $-2 liveout: ; { $13 $14 $11 $12 $10 a0 $T14 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; spilling varialbe $T14
;move r0 $-17 	; { r0->$T14* || r1->$-3* || r2->$13 || r3->$14 }
; allocate() has to spill $-2
; ensure(): $-2 gets register r0 { r0->$-2 || r1->$-3* || r2->$13 || r3->$14 }
; loading $-2 to register r0
;move $-2 r0 	; { r0->$-2 || r1->$-3* || r2->$13 || r3->$14 }
;push r0 	; { r0->$-2 || r1->$-3* || r2->$13 || r3->$14 }
;PUSH $T14 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $T14
; ensure(): $T14 gets register r0 { r0->$T14 || r1->$-3* || r2->$13 || r3->$14 }
; loading $-17 to register r0
;move $-17 r0 	; { r0->$T14 || r1->$-3* || r2->$13 || r3->$14 }
;push r0 	; { r0->$T14 || r1->$-3* || r2->$13 || r3->$14 }
; freeing unused variable r0
;PUSH  liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;push 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;PUSHREG liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $9 $-1 $-3 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;push r0 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;push r1 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;push r2 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;push r3 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;JSR IsSmallerThan liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant $-3 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; writing back global variables prior a function call
;jsr IsSmallerThan 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;POPREG liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant $-3 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop r3 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;pop r2 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;pop r1 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;pop r0 	; { r0-><null> || r1->$-3* || r2->$13 || r3->$14 }
;POP $T15 liveout: ; { $13 $14 $11 $12 $10 a0 $T15 maxg $7 $8 $-2 $9 $-1 floatingMaxConstant $-3 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T15 gets register r0 { r0->$T15 || r1->$-3* || r2->$13 || r3->$14 }
; loading $-18 to register r0
;move $-18 r0 	; { r0->$T15 || r1->$-3* || r2->$13 || r3->$14 }
;pop r0 	; { r0->$T15 || r1->$-3* || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T15 maxg $7 $8 $-2 $9 $-1 floatingMaxConstant $-3 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$T15* || r1->$-3* || r2->$13 || r3->$14 }
;POP  liveout: ; { $13 $14 $11 $12 $10 a0 $T15 maxg $7 $8 $-2 $9 $-1 floatingMaxConstant $-3 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$T15* || r1->$-3* || r2->$13 || r3->$14 }
;STOREI 1 $T16 liveout: ; { $13 $14 $11 $12 $10 a0 $T16 $T15 maxg $7 $8 $-2 $9 $-1 floatingMaxConstant $-3 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; spilling varialbe $T15
;move r0 $-18 	; { r0->$T15* || r1->$-3* || r2->$13 || r3->$14 }
; allocate() has to spill $T16
; ensure(): $T16 gets register r0 { r0->$T16 || r1->$-3* || r2->$13 || r3->$14 }
; loading $-19 to register r0
;move $-19 r0 	; { r0->$T16 || r1->$-3* || r2->$13 || r3->$14 }
;move 1 r0 	; { r0->$T16 || r1->$-3* || r2->$13 || r3->$14 }
;NEI $T16 $T15 label4 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant $-3 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T16 has register r0
; freeing unused variable r1
; spilling varialbe $-3
;move r1 $-3 	; { r0->$T16* || r1->$-3* || r2->$13 || r3->$14 }
; allocate() has to spill $T15
; ensure(): $T15 gets register r1 { r0->$T16* || r1->$T15 || r2->$13 || r3->$14 }
; loading $-18 to register r1
;move $-18 r1 	; { r0->$T16* || r1->$T15 || r2->$13 || r3->$14 }
;cmpi r0 r1 	; { r0->$T16* || r1->$T15 || r2->$13 || r3->$14 }
; spilling registers at the end of Basic Block
; spilling varialbe $14
;move r3 $14 	; { r0->$T16* || r1->$T15 || r2->$13 || r3->$14 }
; spilling varialbe $13
;move r2 $13 	; { r0->$T16* || r1->$T15 || r2->$13 || r3-><null> }
; spilling varialbe $T15
;move r1 $-18 	; { r0->$T16* || r1->$T15 || r2-><null> || r3-><null> }
; spilling varialbe $T16
;move r0 $-19 	; { r0->$T16* || r1-><null> || r2-><null> || r3-><null> }
;jne label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r0
; freeing unused variable r1
;STOREF $-3 $T17 liveout: ; { $13 $14 $11 $12 $10 a0 $T17 maxg $7 $8 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $-3 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-3 }
; loading $-3 to register r3
;move $-3 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-3 }
; ensure(): $T17 gets register r2 { r0-><null> || r1-><null> || r2->$T17 || r3->$-3 }
; loading $-20 to register r2
;move $-20 r2 	; { r0-><null> || r1-><null> || r2->$T17 || r3->$-3 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T17 || r3->$-3 }
; freeing unused variable r3
;STOREF $T17 $-2 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T17 has register r2
; ensure(): $-2 gets register r3 { r0-><null> || r1-><null> || r2->$T17* || r3->$-2 }
; loading $-2 to register r3
;move $-2 r3 	; { r0-><null> || r1-><null> || r2->$T17* || r3->$-2 }
;move r2 r3 	; { r0-><null> || r1-><null> || r2->$T17* || r3->$-2 }
; freeing unused variable r2
; spilling varialbe $T17
;move r2 $-20 	; { r0-><null> || r1-><null> || r2->$T17* || r3->$-2* }
;JUMP label5 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
; spilling varialbe $-2
;move r3 $-2 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2* }
;jmp label5 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label4 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label4 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label5 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label5 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;WRITEF $-2 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $-2 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; loading $-2 to register r3
;move $-2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
;sys writer r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
;WRITES eol liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
;STOREI 1 $T10 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $T10 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T10 gets register r2 { r0-><null> || r1-><null> || r2->$T10 || r3->$-2 }
; loading $-13 to register r2
;move $-13 r2 	; { r0-><null> || r1-><null> || r2->$T10 || r3->$-2 }
;move 1 r2 	; { r0-><null> || r1-><null> || r2->$T10 || r3->$-2 }
;ADDI $-1 $T10 $T11 liveout: ; { $13 $14 $11 $12 $10 a0 $T11 maxg $7 $8 $-2 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $-1 gets register r1 { r0-><null> || r1->$-1 || r2->$T10* || r3->$-2 }
; loading $-1 to register r1
;move $-1 r1 	; { r0-><null> || r1->$-1 || r2->$T10* || r3->$-2 }
; ensure(): $T10 has register r2
; switching owner of register $-1 to $T11 { r0-><null> || r1->$-1 || r2->$T10* || r3->$-2 }
;addi r2 r1 	; { r0-><null> || r1->$T11 || r2->$T10* || r3->$-2 }
; freeing unused variable r2
; spilling varialbe $T10
;move r2 $-13 	; { r0-><null> || r1->$T11* || r2->$T10* || r3->$-2 }
;STOREI $T11 $-1 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T11 has register r1
; ensure(): $-1 gets register r2 { r0-><null> || r1->$T11* || r2->$-1 || r3->$-2 }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1->$T11* || r2->$-1 || r3->$-2 }
;move r1 r2 	; { r0-><null> || r1->$T11* || r2->$-1 || r3->$-2 }
; freeing unused variable r1
; spilling varialbe $T11
;move r1 $-14 	; { r0-><null> || r1->$T11* || r2->$-1* || r3->$-2 }
;JUMP label1 liveout: ; { $13 $14 $11 $12 $10 a0 maxg $7 $8 $-2 $-1 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
; spilling varialbe $-2
;move r3 $-2 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$-2 }
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;jmp label1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label3 liveout: ; { maxg $-2 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF $-2 $T18 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 $T18 a6 a7  }
; ensure(): $-2 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; loading $-2 to register r3
;move $-2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; ensure(): $T18 gets register r2 { r0-><null> || r1-><null> || r2->$T18 || r3->$-2 }
; loading $-21 to register r2
;move $-21 r2 	; { r0-><null> || r1-><null> || r2->$T18 || r3->$-2 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T18 || r3->$-2 }
; freeing unused variable r3
;STOREF $T18 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T18 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T18* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T18
;move r2 $-21 	; { r0-><null> || r1-><null> || r2->$T18* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL IsLargerThanOrEqualTo liveout: ; { maxg $7 $8 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;label IsLargerThanOrEqualTo 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 2 liveout: ; { maxg $7 $8 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;link 77 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREF $8 $T19 liveout: ; { maxg $T19 $7 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T19 gets register r2 { r0-><null> || r1-><null> || r2->$T19 || r3->$8 }
; loading $-20 to register r2
;move $-20 r2 	; { r0-><null> || r1-><null> || r2->$T19 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T19 || r3->$8 }
; freeing unused variable r3
;LTF $7 $T19 label6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2->$T19* || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2->$T19* || r3->$7 }
; ensure(): $T19 has register r2
;cmpr r3 r2 	; { r0-><null> || r1-><null> || r2->$T19* || r3->$7 }
; spilling registers at the end of Basic Block
; spilling varialbe $7
;move r3 $7 	; { r0-><null> || r1-><null> || r2->$T19* || r3->$7 }
; spilling varialbe $T19
;move r2 $-20 	; { r0-><null> || r1-><null> || r2->$T19* || r3-><null> }
;jlt label6 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r2
;STOREI 1 $T20 liveout: ; { maxg a0 $T20 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T20 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T20 }
; loading $-21 to register r3
;move $-21 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T20 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T20 }
;STOREI $T20 $-1 liveout: ; { maxg $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T20 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T20* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T20* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T20* }
; freeing unused variable r3
; spilling varialbe $T20
;move r3 $-21 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T20* }
;WRITES space liveout: ; { maxg $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITES letS liveout: ; { maxg $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes letS 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITEI $-1 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $-1 has register r2
;sys writei r2 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T21 liveout: ; { maxg a0 floatingMaxConstant $T21 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T21 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
; loading $-22 to register r3
;move $-22 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21 }
;STOREI $T21 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T21 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21* }
; freeing unused variable r3
; spilling varialbe $T21
;move r3 $-22 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T21* }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label7 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label7 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label6 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label7 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label7 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T22 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 $T22 a3 a4 a5 ming a6 a7  }
; ensure(): $T22 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T22 }
; loading $-23 to register r3
;move $-23 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T22 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T22 }
;STOREI $T22 $-1 liveout: ; { maxg $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T22 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T22* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T22* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T22* }
; freeing unused variable r3
; spilling varialbe $T22
;move r3 $-23 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T22* }
;WRITES space liveout: ; { maxg $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITES letS liveout: ; { maxg $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes letS 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITEI $-1 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $-1 has register r2
;sys writei r2 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T23 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize $T23 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T23 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T23 }
; loading $-24 to register r3
;move $-24 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T23 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T23 }
;STOREI $T23 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T23 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T23* }
; freeing unused variable r3
; spilling varialbe $T23
;move r3 $-24 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T23* }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL IsSmallerThan liveout: ; { maxg $7 $8 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;label IsSmallerThan 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 2 liveout: ; { maxg $7 $8 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;link 77 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSH $8 liveout: ; { maxg $7 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; freeing unused variable r3
;PUSH $7 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; loading $7 to register r3
;move $7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$7 }
; freeing unused variable r3
;PUSH  liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;PUSHREG liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JSR IsLargerThanOrEqualTo liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; writing back global variables prior a function call
;jsr IsLargerThanOrEqualTo 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;POP $T24 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 $T24 ming a5 a6 a7  }
; ensure(): $T24 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T24 }
; loading $-25 to register r3
;move $-25 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T24 }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T24 }
;POP  liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 $T24 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T24* }
;POP  liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 $T24 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T24* }
;STOREI 0 $T25 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 $T25 a4 $T24 ming a5 a6 a7  }
; ensure(): $T25 gets register r2 { r0-><null> || r1-><null> || r2->$T25 || r3->$T24* }
; loading $-26 to register r2
;move $-26 r2 	; { r0-><null> || r1-><null> || r2->$T25 || r3->$T24* }
;move 0 r2 	; { r0-><null> || r1-><null> || r2->$T25 || r3->$T24* }
;EQI $T24 $T25 label8 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T24 has register r3
; ensure(): $T25 has register r2
;cmpi r3 r2 	; { r0-><null> || r1-><null> || r2->$T25* || r3->$T24* }
; spilling registers at the end of Basic Block
; spilling varialbe $T24
;move r3 $-25 	; { r0-><null> || r1-><null> || r2->$T25* || r3->$T24* }
; spilling varialbe $T25
;move r2 $-26 	; { r0-><null> || r1-><null> || r2->$T25* || r3-><null> }
;jeq label8 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r2
;STOREI 0 $T26 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 $T26 a7  }
; ensure(): $T26 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T26 }
; loading $-27 to register r3
;move $-27 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T26 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T26 }
;STOREI $T26 $-1 liveout: ; { maxg $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T26 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T26* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T26* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T26* }
; freeing unused variable r3
; spilling varialbe $T26
;move r3 $-27 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T26* }
;WRITES space liveout: ; { maxg $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITES smS liveout: ; { maxg $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes smS 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITEI $-1 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $-1 has register r2
;sys writei r2 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T27 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 $T27 a6 a7  }
; ensure(): $T27 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T27 }
; loading $-28 to register r3
;move $-28 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T27 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T27 }
;STOREI $T27 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T27 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T27* }
; freeing unused variable r3
; spilling varialbe $T27
;move r3 $-28 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T27* }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label9 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label9 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label8 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label8 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label9 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label9 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T28 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7 $T28  }
; ensure(): $T28 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T28 }
; loading $-29 to register r3
;move $-29 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T28 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T28 }
;STOREI $T28 $-1 liveout: ; { maxg $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T28 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T28* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T28* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T28* }
; freeing unused variable r3
; spilling varialbe $T28
;move r3 $-29 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T28* }
;WRITES space liveout: ; { maxg $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITES smS liveout: ; { maxg $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;sys writes smS 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITEI $-1 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $-1 has register r2
;sys writei r2 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;WRITES space liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T29 liveout: ; { a0 $T29 maxg floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T29 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T29 }
; loading $-30 to register r3
;move $-30 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T29 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T29 }
;STOREI $T29 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T29 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T29* }
; freeing unused variable r3
; spilling varialbe $T29
;move r3 $-30 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T29* }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL GetValue liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $8 $9 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
;label GetValue 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $8 $9 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;link 76 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T30 liveout: ; { $13 $14 $11 $12 $10 a0 $T30 $15 maxg $7 $8 $9 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T30 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T30 }
; loading $-30 to register r3
;move $-30 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T30 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T30 }
;NEI $7 $T30 label10 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $8 $9 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T30* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T30* }
; ensure(): $T30 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T30* }
; spilling registers at the end of Basic Block
; spilling varialbe $T30
;move r3 $-30 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T30* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label10 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $8 $T31 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 $T31 ming a5 a6 a7  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; ensure(): $T31 gets register r2 { r0-><null> || r1-><null> || r2->$T31 || r3->$8 }
; loading $-31 to register r2
;move $-31 r2 	; { r0-><null> || r1-><null> || r2->$T31 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T31 || r3->$8 }
; freeing unused variable r3
;STOREF $T31 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T31 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T31* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T31
;move r2 $-31 	; { r0-><null> || r1-><null> || r2->$T31* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label11 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label11 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label10 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label10 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T32 liveout: ; { $13 $14 $11 $12 $10 a0 $T32 $15 maxg $7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T32 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T32 }
; loading $-32 to register r3
;move $-32 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T32 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T32 }
;NEI $7 $T32 label12 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T32* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T32* }
; ensure(): $T32 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T32* }
; spilling registers at the end of Basic Block
; spilling varialbe $T32
;move r3 $-32 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T32* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label12 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $9 $T33 liveout: ; { maxg $T33 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $9 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$9 }
; loading $9 to register r3
;move $9 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$9 }
; ensure(): $T33 gets register r2 { r0-><null> || r1-><null> || r2->$T33 || r3->$9 }
; loading $-33 to register r2
;move $-33 r2 	; { r0-><null> || r1-><null> || r2->$T33 || r3->$9 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T33 || r3->$9 }
; freeing unused variable r3
;STOREF $T33 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T33 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T33* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T33
;move r2 $-33 	; { r0-><null> || r1-><null> || r2->$T33* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label13 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label13 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label12 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label12 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 2 $T34 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $T34 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T34 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T34 }
; loading $-34 to register r3
;move $-34 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T34 }
;move 2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T34 }
;NEI $7 $T34 label14 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T34* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T34* }
; ensure(): $T34 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T34* }
; spilling registers at the end of Basic Block
; spilling varialbe $T34
;move r3 $-34 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T34* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label14 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $10 $T35 liveout: ; { maxg a0 $T35 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $10 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$10 }
; loading $10 to register r3
;move $10 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$10 }
; ensure(): $T35 gets register r2 { r0-><null> || r1-><null> || r2->$T35 || r3->$10 }
; loading $-35 to register r2
;move $-35 r2 	; { r0-><null> || r1-><null> || r2->$T35 || r3->$10 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T35 || r3->$10 }
; freeing unused variable r3
;STOREF $T35 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T35 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T35* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T35
;move r2 $-35 	; { r0-><null> || r1-><null> || r2->$T35* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label15 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label15 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label14 liveout: ; { $13 $14 $11 $12 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label14 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 3 $T36 liveout: ; { $13 $14 $11 $12 a0 $15 maxg $7 $T36 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T36 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T36 }
; loading $-36 to register r3
;move $-36 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T36 }
;move 3 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T36 }
;NEI $7 $T36 label16 liveout: ; { $13 $14 $11 $12 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T36* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T36* }
; ensure(): $T36 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T36* }
; spilling registers at the end of Basic Block
; spilling varialbe $T36
;move r3 $-36 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T36* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label16 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $11 $T37 liveout: ; { $T37 maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $11 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$11 }
; loading $11 to register r3
;move $11 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$11 }
; ensure(): $T37 gets register r2 { r0-><null> || r1-><null> || r2->$T37 || r3->$11 }
; loading $-37 to register r2
;move $-37 r2 	; { r0-><null> || r1-><null> || r2->$T37 || r3->$11 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T37 || r3->$11 }
; freeing unused variable r3
;STOREF $T37 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T37 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T37* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T37
;move r2 $-37 	; { r0-><null> || r1-><null> || r2->$T37* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label17 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label17 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label16 liveout: ; { $13 $14 $12 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label16 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 4 $T38 liveout: ; { $13 $14 $12 a0 $15 $T38 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T38 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T38 }
; loading $-38 to register r3
;move $-38 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T38 }
;move 4 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T38 }
;NEI $7 $T38 label18 liveout: ; { $13 $14 $12 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T38* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T38* }
; ensure(): $T38 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T38* }
; spilling registers at the end of Basic Block
; spilling varialbe $T38
;move r3 $-38 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T38* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label18 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $12 $T39 liveout: ; { maxg $T39 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $12 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$12 }
; loading $12 to register r3
;move $12 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$12 }
; ensure(): $T39 gets register r2 { r0-><null> || r1-><null> || r2->$T39 || r3->$12 }
; loading $-39 to register r2
;move $-39 r2 	; { r0-><null> || r1-><null> || r2->$T39 || r3->$12 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T39 || r3->$12 }
; freeing unused variable r3
;STOREF $T39 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T39 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T39* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T39
;move r2 $-39 	; { r0-><null> || r1-><null> || r2->$T39* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label19 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label19 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label18 liveout: ; { $13 $14 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label18 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 5 $T40 liveout: ; { $13 $14 a0 $T40 $15 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T40 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T40 }
; loading $-40 to register r3
;move $-40 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T40 }
;move 5 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T40 }
;NEI $7 $T40 label20 liveout: ; { $13 $14 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T40* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T40* }
; ensure(): $T40 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T40* }
; spilling registers at the end of Basic Block
; spilling varialbe $T40
;move r3 $-40 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T40* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label20 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $13 $T41 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 $T41 a4 ming a5 a6 a7  }
; ensure(): $13 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
; loading $13 to register r3
;move $13 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
; ensure(): $T41 gets register r2 { r0-><null> || r1-><null> || r2->$T41 || r3->$13 }
; loading $-41 to register r2
;move $-41 r2 	; { r0-><null> || r1-><null> || r2->$T41 || r3->$13 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T41 || r3->$13 }
; freeing unused variable r3
;STOREF $T41 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T41 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T41* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T41
;move r2 $-41 	; { r0-><null> || r1-><null> || r2->$T41* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label21 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label21 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label20 liveout: ; { $14 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label20 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 6 $T42 liveout: ; { $14 a0 $T42 $15 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T42 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T42 }
; loading $-42 to register r3
;move $-42 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T42 }
;move 6 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T42 }
;NEI $7 $T42 label22 liveout: ; { $14 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T42* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T42* }
; ensure(): $T42 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T42* }
; spilling registers at the end of Basic Block
; spilling varialbe $T42
;move r3 $-42 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T42* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label22 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $14 $T43 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize $T43 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $14 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
; loading $14 to register r3
;move $14 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
; ensure(): $T43 gets register r2 { r0-><null> || r1-><null> || r2->$T43 || r3->$14 }
; loading $-43 to register r2
;move $-43 r2 	; { r0-><null> || r1-><null> || r2->$T43 || r3->$14 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T43 || r3->$14 }
; freeing unused variable r3
;STOREF $T43 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T43 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T43* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T43
;move r2 $-43 	; { r0-><null> || r1-><null> || r2->$T43* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label23 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label23 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label22 liveout: ; { a0 $15 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label22 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 7 $T44 liveout: ; { a0 $15 maxg $7 $T44 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T44 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T44 }
; loading $-44 to register r3
;move $-44 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T44 }
;move 7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T44 }
;NEI $7 $T44 label24 liveout: ; { a0 $15 maxg floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T44* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T44* }
; ensure(): $T44 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T44* }
; spilling registers at the end of Basic Block
; spilling varialbe $T44
;move r3 $-44 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T44* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label24 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;STOREF $15 $T45 liveout: ; { maxg a0 floatingMaxConstant $T45 a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $15 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$15 }
; loading $15 to register r3
;move $15 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$15 }
; ensure(): $T45 gets register r2 { r0-><null> || r1-><null> || r2->$T45 || r3->$15 }
; loading $-45 to register r2
;move $-45 r2 	; { r0-><null> || r1-><null> || r2->$T45 || r3->$15 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T45 || r3->$15 }
; freeing unused variable r3
;STOREF $T45 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T45 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T45* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T45
;move r2 $-45 	; { r0-><null> || r1-><null> || r2->$T45* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label25 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label25 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label24 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label24 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label25 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label25 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label23 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label23 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label21 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label21 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label19 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label19 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label17 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label17 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label15 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label15 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label13 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label13 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label11 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label11 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T46 liveout: ; { maxg $T46 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T46 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T46 }
; loading $-46 to register r3
;move $-46 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T46 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T46 }
;STOREI $T46 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T46 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T46* }
; freeing unused variable r3
; spilling varialbe $T46
;move r3 $-46 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T46* }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL PrintIndex liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $8 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;label PrintIndex 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 1 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $8 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;link 76 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T47 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $8 $T47 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T47 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T47 }
; loading $-47 to register r3
;move $-47 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T47 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T47 }
;NEI $7 $T47 label26 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $8 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T47* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T47* }
; ensure(): $T47 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T47* }
; spilling registers at the end of Basic Block
; spilling varialbe $T47
;move r3 $-47 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T47* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label26 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;WRITEF $8 liveout: ; { maxg $8 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $8 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
; loading $8 to register r3
;move $8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
;sys writer r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
;WRITES space liveout: ; { maxg $8 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$8 }
;STOREF $8 $T48 liveout: ; { maxg $T48 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $8 has register r3
; ensure(): $T48 gets register r2 { r0-><null> || r1-><null> || r2->$T48 || r3->$8 }
; loading $-48 to register r2
;move $-48 r2 	; { r0-><null> || r1-><null> || r2->$T48 || r3->$8 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T48 || r3->$8 }
; freeing unused variable r3
;STOREF $T48 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T48 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T48* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T48
;move r2 $-48 	; { r0-><null> || r1-><null> || r2->$T48* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label27 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label27 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label26 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label26 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 1 $T49 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $T49 $9 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T49 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T49 }
; loading $-49 to register r3
;move $-49 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T49 }
;move 1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T49 }
;NEI $7 $T49 label28 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 $9 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T49* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T49* }
; ensure(): $T49 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T49* }
; spilling registers at the end of Basic Block
; spilling varialbe $T49
;move r3 $-49 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T49* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label28 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;WRITEF $9 liveout: ; { maxg $9 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $9 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$9 }
; loading $9 to register r3
;move $9 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$9 }
;sys writer r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$9 }
;WRITES space liveout: ; { maxg $9 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$9 }
;STOREF $9 $T50 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 $T50 a4 ming a5 a6 a7  }
; ensure(): $9 has register r3
; ensure(): $T50 gets register r2 { r0-><null> || r1-><null> || r2->$T50 || r3->$9 }
; loading $-50 to register r2
;move $-50 r2 	; { r0-><null> || r1-><null> || r2->$T50 || r3->$9 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T50 || r3->$9 }
; freeing unused variable r3
;STOREF $T50 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T50 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T50* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T50
;move r2 $-50 	; { r0-><null> || r1-><null> || r2->$T50* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label29 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label29 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label28 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label28 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 2 $T51 liveout: ; { $13 $14 $11 $12 $10 a0 $T51 $15 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T51 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T51 }
; loading $-51 to register r3
;move $-51 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T51 }
;move 2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T51 }
;NEI $7 $T51 label30 liveout: ; { $13 $14 $11 $12 $10 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T51* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T51* }
; ensure(): $T51 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T51* }
; spilling registers at the end of Basic Block
; spilling varialbe $T51
;move r3 $-51 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T51* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label30 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;WRITEF $10 liveout: ; { maxg $10 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $10 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$10 }
; loading $10 to register r3
;move $10 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$10 }
;sys writer r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$10 }
;WRITES space liveout: ; { maxg $10 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$10 }
;STOREF $10 $T52 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 $T52 a6 a7  }
; ensure(): $10 has register r3
; ensure(): $T52 gets register r2 { r0-><null> || r1-><null> || r2->$T52 || r3->$10 }
; loading $-52 to register r2
;move $-52 r2 	; { r0-><null> || r1-><null> || r2->$T52 || r3->$10 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T52 || r3->$10 }
; freeing unused variable r3
;STOREF $T52 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T52 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T52* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T52
;move r2 $-52 	; { r0-><null> || r1-><null> || r2->$T52* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label31 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label31 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label30 liveout: ; { $13 $14 $11 $12 a0 $15 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label30 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 3 $T53 liveout: ; { $13 $14 $11 $12 a0 $15 $T53 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T53 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T53 }
; loading $-53 to register r3
;move $-53 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T53 }
;move 3 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T53 }
;NEI $7 $T53 label32 liveout: ; { $13 $14 $11 $12 a0 $15 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T53* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T53* }
; ensure(): $T53 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T53* }
; spilling registers at the end of Basic Block
; spilling varialbe $T53
;move r3 $-53 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T53* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label32 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;WRITEF $11 liveout: ; { maxg $11 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $11 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$11 }
; loading $11 to register r3
;move $11 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$11 }
;sys writer r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$11 }
;WRITES space liveout: ; { maxg $11 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$11 }
;STOREF $11 $T54 liveout: ; { a0 $T54 maxg floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $11 has register r3
; ensure(): $T54 gets register r2 { r0-><null> || r1-><null> || r2->$T54 || r3->$11 }
; loading $-54 to register r2
;move $-54 r2 	; { r0-><null> || r1-><null> || r2->$T54 || r3->$11 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T54 || r3->$11 }
; freeing unused variable r3
;STOREF $T54 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T54 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T54* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T54
;move r2 $-54 	; { r0-><null> || r1-><null> || r2->$T54* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label33 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label33 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label32 liveout: ; { $13 $14 $12 a0 $15 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label32 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 4 $T55 liveout: ; { $13 $14 $12 a0 $15 $T55 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T55 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T55 }
; loading $-55 to register r3
;move $-55 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T55 }
;move 4 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T55 }
;NEI $7 $T55 label34 liveout: ; { $13 $14 $12 a0 $15 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T55* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T55* }
; ensure(): $T55 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T55* }
; spilling registers at the end of Basic Block
; spilling varialbe $T55
;move r3 $-55 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T55* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label34 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;WRITEF $12 liveout: ; { maxg $12 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $12 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$12 }
; loading $12 to register r3
;move $12 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$12 }
;sys writer r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$12 }
;WRITES space liveout: ; { maxg $12 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$12 }
;STOREF $12 $T56 liveout: ; { $T56 maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $12 has register r3
; ensure(): $T56 gets register r2 { r0-><null> || r1-><null> || r2->$T56 || r3->$12 }
; loading $-56 to register r2
;move $-56 r2 	; { r0-><null> || r1-><null> || r2->$T56 || r3->$12 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T56 || r3->$12 }
; freeing unused variable r3
;STOREF $T56 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T56 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T56* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T56
;move r2 $-56 	; { r0-><null> || r1-><null> || r2->$T56* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label35 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label35 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label34 liveout: ; { $13 $14 a0 $15 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label34 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 5 $T57 liveout: ; { $13 $14 a0 $15 $T57 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T57 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T57 }
; loading $-57 to register r3
;move $-57 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T57 }
;move 5 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T57 }
;NEI $7 $T57 label36 liveout: ; { $13 $14 a0 $15 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T57* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T57* }
; ensure(): $T57 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T57* }
; spilling registers at the end of Basic Block
; spilling varialbe $T57
;move r3 $-57 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T57* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label36 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;WRITEF $13 liveout: ; { $13 maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $13 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
; loading $13 to register r3
;move $13 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
;sys writer r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
;WRITES space liveout: ; { $13 maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$13 }
;STOREF $13 $T58 liveout: ; { maxg $T58 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $13 has register r3
; ensure(): $T58 gets register r2 { r0-><null> || r1-><null> || r2->$T58 || r3->$13 }
; loading $-58 to register r2
;move $-58 r2 	; { r0-><null> || r1-><null> || r2->$T58 || r3->$13 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T58 || r3->$13 }
; freeing unused variable r3
;STOREF $T58 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T58 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T58* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T58
;move r2 $-58 	; { r0-><null> || r1-><null> || r2->$T58* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label37 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label37 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label36 liveout: ; { $14 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label36 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 6 $T59 liveout: ; { $14 a0 $15 maxg $7 $T59 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T59 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T59 }
; loading $-59 to register r3
;move $-59 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T59 }
;move 6 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T59 }
;NEI $7 $T59 label38 liveout: ; { $14 a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T59* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T59* }
; ensure(): $T59 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T59* }
; spilling registers at the end of Basic Block
; spilling varialbe $T59
;move r3 $-59 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T59* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label38 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;WRITEF $14 liveout: ; { $14 maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $14 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
; loading $14 to register r3
;move $14 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
;sys writer r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
;WRITES space liveout: ; { $14 maxg a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$14 }
;STOREF $14 $T60 liveout: ; { maxg a0 floatingMaxConstant a1 arraysize a2 $T60 a3 a4 ming a5 a6 a7  }
; ensure(): $14 has register r3
; ensure(): $T60 gets register r2 { r0-><null> || r1-><null> || r2->$T60 || r3->$14 }
; loading $-60 to register r2
;move $-60 r2 	; { r0-><null> || r1-><null> || r2->$T60 || r3->$14 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T60 || r3->$14 }
; freeing unused variable r3
;STOREF $T60 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T60 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T60* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T60
;move r2 $-60 	; { r0-><null> || r1-><null> || r2->$T60* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label39 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label39 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label38 liveout: ; { a0 $15 maxg $7 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label38 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 7 $T61 liveout: ; { a0 $T61 $15 maxg $7 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T61 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T61 }
; loading $-61 to register r3
;move $-61 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T61 }
;move 7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T61 }
;NEI $7 $T61 label40 liveout: ; { a0 $15 maxg floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $7 gets register r2 { r0-><null> || r1-><null> || r2->$7 || r3->$T61* }
; loading $7 to register r2
;move $7 r2 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T61* }
; ensure(): $T61 has register r3
;cmpi r2 r3 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T61* }
; spilling registers at the end of Basic Block
; spilling varialbe $T61
;move r3 $-61 	; { r0-><null> || r1-><null> || r2->$7 || r3->$T61* }
; spilling varialbe $7
;move r2 $7 	; { r0-><null> || r1-><null> || r2->$7 || r3-><null> }
;jne label40 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r2
; freeing unused variable r3
;WRITEF $15 liveout: ; { a0 $15 maxg floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $15 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$15 }
; loading $15 to register r3
;move $15 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$15 }
;sys writer r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$15 }
;WRITES space liveout: ; { a0 $15 maxg floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;sys writes space 	; { r0-><null> || r1-><null> || r2-><null> || r3->$15 }
;STOREF $15 $T62 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7 $T62  }
; ensure(): $15 has register r3
; ensure(): $T62 gets register r2 { r0-><null> || r1-><null> || r2->$T62 || r3->$15 }
; loading $-62 to register r2
;move $-62 r2 	; { r0-><null> || r1-><null> || r2->$T62 || r3->$15 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T62 || r3->$15 }
; freeing unused variable r3
;STOREF $T62 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T62 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T62* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T62
;move r2 $-62 	; { r0-><null> || r1-><null> || r2->$T62* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;JUMP label41 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;jmp label41 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label40 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label40 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label41 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label41 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label39 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label39 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label37 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label37 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label35 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label35 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label33 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label33 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label31 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label31 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label29 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label29 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label27 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; spilling registers at the end of Basic Block
;label label27 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T63 liveout: ; { a0 $T63 maxg floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T63 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T63 }
; loading $-63 to register r3
;move $-63 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T63 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T63 }
;STOREI $T63 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T63 has register r3
;move r3 $6 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T63* }
; freeing unused variable r3
; spilling varialbe $T63
;move r3 $-63 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T63* }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL SYSIN liveout: ; { maxg floatingMaxConstant arraysize $T24 ming  }
;label SYSIN 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LINK 4 liveout: ; { maxg floatingMaxConstant arraysize $T24 ming  }
;link 79 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 0 $T64 liveout: ; { maxg floatingMaxConstant arraysize $T24 ming $T64  }
; ensure(): $T64 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T64 }
; loading $-67 to register r3
;move $-67 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T64 }
;move 0 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T64 }
;STOREI $T64 $-1 liveout: ; { maxg floatingMaxConstant arraysize $T24 ming  }
; ensure(): $T64 has register r3
; ensure(): $-1 gets register r2 { r0-><null> || r1-><null> || r2->$-1 || r3->$T64* }
; loading $-1 to register r2
;move $-1 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T64* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-1 || r3->$T64* }
; freeing unused variable r3
; spilling varialbe $T64
;move r3 $-67 	; { r0-><null> || r1-><null> || r2->$-1* || r3->$T64* }
; freeing unused variable r2
; spilling varialbe $-1
;move r2 $-1 	; { r0-><null> || r1-><null> || r2->$-1* || r3-><null> }
;STOREI 8 $T65 liveout: ; { maxg floatingMaxConstant arraysize $T24 ming $T65  }
; ensure(): $T65 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T65 }
; loading $-68 to register r3
;move $-68 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T65 }
;move 8 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T65 }
;STOREI $T65 $-2 liveout: ; { maxg $-2 floatingMaxConstant arraysize $T24 ming  }
; ensure(): $T65 has register r3
; ensure(): $-2 gets register r2 { r0-><null> || r1-><null> || r2->$-2 || r3->$T65* }
; loading $-2 to register r2
;move $-2 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T65* }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$-2 || r3->$T65* }
; freeing unused variable r3
; spilling varialbe $T65
;move r3 $-68 	; { r0-><null> || r1-><null> || r2->$-2* || r3->$T65* }
;READF a0 liveout: ; { maxg $-2 a0 floatingMaxConstant arraysize $T24 ming  }
; ensure(): a0 gets register r3 { r0-><null> || r1-><null> || r2->$-2* || r3->a0 }
; loading a0 to register r3
;move a0 r3 	; { r0-><null> || r1-><null> || r2->$-2* || r3->a0 }
;sys readr r3 	; { r0-><null> || r1-><null> || r2->$-2* || r3->a0 }
;READF a1 liveout: ; { maxg $-2 a0 floatingMaxConstant a1 arraysize $T24 ming  }
; ensure(): a1 gets register r1 { r0-><null> || r1->a1 || r2->$-2* || r3->a0* }
; loading a1 to register r1
;move a1 r1 	; { r0-><null> || r1->a1 || r2->$-2* || r3->a0* }
;sys readr r1 	; { r0-><null> || r1->a1 || r2->$-2* || r3->a0* }
;READF a2 liveout: ; { maxg $-2 a0 floatingMaxConstant a1 arraysize a2 $T24 ming  }
; ensure(): a2 gets register r0 { r0->a2 || r1->a1* || r2->$-2* || r3->a0* }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->a1* || r2->$-2* || r3->a0* }
;sys readr r0 	; { r0->a2 || r1->a1* || r2->$-2* || r3->a0* }
;READF a3 liveout: ; { maxg $-2 a0 floatingMaxConstant a1 arraysize a2 a3 $T24 ming  }
; freeing unused variable r0
; spilling varialbe a2
;move r0 a2 	; { r0->a2* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->a1* || r2->$-2* || r3->a0* }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->a1* || r2->$-2* || r3->a0* }
;sys readr r0 	; { r0->a3 || r1->a1* || r2->$-2* || r3->a0* }
;READF a4 liveout: ; { maxg $-2 a0 floatingMaxConstant a1 arraysize a2 a3 a4 $T24 ming  }
; freeing unused variable r0
; spilling varialbe a3
;move r0 a3 	; { r0->a3* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill a4
; ensure(): a4 gets register r0 { r0->a4 || r1->a1* || r2->$-2* || r3->a0* }
; loading a4 to register r0
;move a4 r0 	; { r0->a4 || r1->a1* || r2->$-2* || r3->a0* }
;sys readr r0 	; { r0->a4 || r1->a1* || r2->$-2* || r3->a0* }
;READF a5 liveout: ; { maxg $-2 a0 floatingMaxConstant a1 arraysize a2 a3 a4 $T24 ming a5  }
; freeing unused variable r0
; spilling varialbe a4
;move r0 a4 	; { r0->a4* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill a5
; ensure(): a5 gets register r0 { r0->a5 || r1->a1* || r2->$-2* || r3->a0* }
; loading a5 to register r0
;move a5 r0 	; { r0->a5 || r1->a1* || r2->$-2* || r3->a0* }
;sys readr r0 	; { r0->a5 || r1->a1* || r2->$-2* || r3->a0* }
;READF a6 liveout: ; { a0 $T24 maxg $-2 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6  }
; freeing unused variable r0
; spilling varialbe a5
;move r0 a5 	; { r0->a5* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill a6
; ensure(): a6 gets register r0 { r0->a6 || r1->a1* || r2->$-2* || r3->a0* }
; loading a6 to register r0
;move a6 r0 	; { r0->a6 || r1->a1* || r2->$-2* || r3->a0* }
;sys readr r0 	; { r0->a6 || r1->a1* || r2->$-2* || r3->a0* }
;READF a7 liveout: ; { a0 $T24 maxg $-2 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; spilling varialbe a6
;move r0 a6 	; { r0->a6* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill a7
; ensure(): a7 gets register r0 { r0->a7 || r1->a1* || r2->$-2* || r3->a0* }
; loading a7 to register r0
;move a7 r0 	; { r0->a7 || r1->a1* || r2->$-2* || r3->a0* }
;sys readr r0 	; { r0->a7 || r1->a1* || r2->$-2* || r3->a0* }
;WRITES inputMessage liveout: ; { a0 $T24 maxg $-2 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes inputMessage 	; { r0->a7* || r1->a1* || r2->$-2* || r3->a0* }
;STOREI 0 $T66 liveout: ; { a0 $T24 $T66 maxg $-2 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; spilling varialbe a7
;move r0 a7 	; { r0->a7* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill $T66
; ensure(): $T66 gets register r0 { r0->$T66 || r1->a1* || r2->$-2* || r3->a0* }
; loading $-69 to register r0
;move $-69 r0 	; { r0->$T66 || r1->a1* || r2->$-2* || r3->a0* }
;move 0 r0 	; { r0->$T66 || r1->a1* || r2->$-2* || r3->a0* }
;STOREI $T66 $-1 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T66 has register r0
; freeing unused variable r1
; spilling varialbe a1
;move r1 a1 	; { r0->$T66* || r1->a1* || r2->$-2* || r3->a0* }
; allocate() has to spill $-1
; ensure(): $-1 gets register r1 { r0->$T66* || r1->$-1 || r2->$-2* || r3->a0* }
; loading $-1 to register r1
;move $-1 r1 	; { r0->$T66* || r1->$-1 || r2->$-2* || r3->a0* }
;move r0 r1 	; { r0->$T66* || r1->$-1 || r2->$-2* || r3->a0* }
; freeing unused variable r0
; spilling varialbe $T66
;move r0 $-69 	; { r0->$T66* || r1->$-1* || r2->$-2* || r3->a0* }
;LABEL label42 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
; spilling varialbe a0
;move r3 a0 	; { r0-><null> || r1->$-1* || r2->$-2* || r3->a0* }
; spilling varialbe $-2
;move r2 $-2 	; { r0-><null> || r1->$-1* || r2->$-2* || r3-><null> }
; spilling varialbe $-1
;move r1 $-1 	; { r0-><null> || r1->$-1* || r2-><null> || r3-><null> }
;label label42 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI 2 $T67 liveout: ; { a0 $T24 maxg $T67 $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T67 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$T67 }
; loading $-70 to register r3
;move $-70 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T67 }
;move 2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$T67 }
;DIVI arraysize $T67 $T68 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): arraysize gets register r2 { r0-><null> || r1-><null> || r2->arraysize || r3->$T67* }
; loading arraysize to register r2
;move arraysize r2 	; { r0-><null> || r1-><null> || r2->arraysize || r3->$T67* }
; ensure(): $T67 has register r3
; switching owner of register arraysize to $T68 { r0-><null> || r1-><null> || r2->arraysize || r3->$T67* }
;divi r3 r2 	; { r0-><null> || r1-><null> || r2->$T68 || r3->$T67* }
; freeing unused variable r3
; spilling varialbe $T67
;move r3 $-70 	; { r0-><null> || r1-><null> || r2->$T68* || r3->$T67* }
; freeing unused variable r2
; spilling varialbe $T68
;move r2 $-71 	; { r0-><null> || r1-><null> || r2->$T68* || r3-><null> }
;GEI $-1 $T24 label44 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; ensure(): $T24 gets register r2 { r0-><null> || r1-><null> || r2->$T24 || r3->$-1 }
; loading $-27 to register r2
;move $-27 r2 	; { r0-><null> || r1-><null> || r2->$T24 || r3->$-1 }
;cmpi r3 r2 	; { r0-><null> || r1-><null> || r2->$T24 || r3->$-1 }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2->$T24 || r3->$-1 }
; spilling varialbe $T24
;move r2 $-27 	; { r0-><null> || r1-><null> || r2->$T24 || r3-><null> }
;jge label44 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r3
; freeing unused variable r2
;PUSH a7 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): a7 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->a7 }
; loading a7 to register r3
;move a7 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->a7 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->a7 }
;PUSH a6 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 a5 ming a6 a7  }
; ensure(): a6 gets register r2 { r0-><null> || r1-><null> || r2->a6 || r3->a7 }
; loading a6 to register r2
;move a6 r2 	; { r0-><null> || r1-><null> || r2->a6 || r3->a7 }
;push r2 	; { r0-><null> || r1-><null> || r2->a6 || r3->a7 }
;PUSH a5 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): a5 gets register r1 { r0-><null> || r1->a5 || r2->a6 || r3->a7 }
; loading a5 to register r1
;move a5 r1 	; { r0-><null> || r1->a5 || r2->a6 || r3->a7 }
;push r1 	; { r0-><null> || r1->a5 || r2->a6 || r3->a7 }
;PUSH a4 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): a4 gets register r0 { r0->a4 || r1->a5 || r2->a6 || r3->a7 }
; loading a4 to register r0
;move a4 r0 	; { r0->a4 || r1->a5 || r2->a6 || r3->a7 }
;push r0 	; { r0->a4 || r1->a5 || r2->a6 || r3->a7 }
;PUSH a3 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->a5 || r2->a6 || r3->a7 }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->a5 || r2->a6 || r3->a7 }
;push r0 	; { r0->a3 || r1->a5 || r2->a6 || r3->a7 }
;PUSH a2 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a2
; ensure(): a2 gets register r0 { r0->a2 || r1->a5 || r2->a6 || r3->a7 }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->a5 || r2->a6 || r3->a7 }
;push r0 	; { r0->a2 || r1->a5 || r2->a6 || r3->a7 }
;PUSH a1 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a1
; ensure(): a1 gets register r0 { r0->a1 || r1->a5 || r2->a6 || r3->a7 }
; loading a1 to register r0
;move a1 r0 	; { r0->a1 || r1->a5 || r2->a6 || r3->a7 }
;push r0 	; { r0->a1 || r1->a5 || r2->a6 || r3->a7 }
;PUSH a0 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill a0
; ensure(): a0 gets register r0 { r0->a0 || r1->a5 || r2->a6 || r3->a7 }
; loading a0 to register r0
;move a0 r0 	; { r0->a0 || r1->a5 || r2->a6 || r3->a7 }
;push r0 	; { r0->a0 || r1->a5 || r2->a6 || r3->a7 }
;PUSH $-1 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; freeing unused variable r0
; allocate() has to spill $-1
; ensure(): $-1 gets register r0 { r0->$-1 || r1->a5 || r2->a6 || r3->a7 }
; loading $-1 to register r0
;move $-1 r0 	; { r0->$-1 || r1->a5 || r2->a6 || r3->a7 }
;push r0 	; { r0->$-1 || r1->a5 || r2->a6 || r3->a7 }
;PUSH  liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;push 	; { r0->$-1 || r1->a5 || r2->a6 || r3->a7 }
;PUSHREG liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;push r0 	; { r0->$-1 || r1->a5 || r2->a6 || r3->a7 }
;push r1 	; { r0->$-1 || r1->a5 || r2->a6 || r3->a7 }
;push r2 	; { r0->$-1 || r1->a5 || r2->a6 || r3->a7 }
;push r3 	; { r0->$-1 || r1->a5 || r2->a6 || r3->a7 }
;JSR PrintIndex liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; writing back global variables prior a function call
; spilling varialbe a7
;move r3 a7 	; { r0->$-1 || r1->a5 || r2->a6 || r3->a7 }
; spilling varialbe a6
;move r2 a6 	; { r0->$-1 || r1->a5 || r2->a6 || r3-><null> }
; spilling varialbe a5
;move r1 a5 	; { r0->$-1 || r1->a5 || r2-><null> || r3-><null> }
;jsr PrintIndex 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;POPREG liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;pop r2 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;pop r1 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;pop r0 	; { r0->$-1 || r1-><null> || r2-><null> || r3-><null> }
;POP $T71 liveout: ; { $T71 a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T71 gets register r3 { r0->$-1 || r1-><null> || r2-><null> || r3->$T71 }
; loading $-74 to register r3
;move $-74 r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T71 }
;pop r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T71 }
;POP  liveout: ; { $T71 a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T71* }
;POP  liveout: ; { $T71 a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T71* }
;POP  liveout: ; { $T71 a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T71* }
;POP  liveout: ; { $T71 a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T71* }
;POP  liveout: ; { $T71 a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T71* }
;POP  liveout: ; { $T71 a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T71* }
;POP  liveout: ; { $T71 a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T71* }
;POP  liveout: ; { $T71 a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T71* }
;POP  liveout: ; { $T71 a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T71* }
;STOREI $T71 $-3 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T71 has register r3
; ensure(): $-3 gets register r2 { r0->$-1 || r1-><null> || r2->$-3 || r3->$T71* }
; loading $-3 to register r2
;move $-3 r2 	; { r0->$-1 || r1-><null> || r2->$-3 || r3->$T71* }
;move r3 r2 	; { r0->$-1 || r1-><null> || r2->$-3 || r3->$T71* }
; freeing unused variable r3
; spilling varialbe $T71
;move r3 $-74 	; { r0->$-1 || r1-><null> || r2->$-3* || r3->$T71* }
; freeing unused variable r2
; spilling varialbe $-3
;move r2 $-3 	; { r0->$-1 || r1-><null> || r2->$-3* || r3-><null> }
;STOREI 1 $T69 liveout: ; { a0 $T24 $T69 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T69 gets register r3 { r0->$-1 || r1-><null> || r2-><null> || r3->$T69 }
; loading $-72 to register r3
;move $-72 r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T69 }
;move 1 r3 	; { r0->$-1 || r1-><null> || r2-><null> || r3->$T69 }
;ADDI $-1 $T69 $T70 liveout: ; { $T70 a0 $T24 maxg $-2 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $-1 has register r0
; ensure(): $T69 has register r3
; switching owner of register $-1 to $T70 { r0->$-1 || r1-><null> || r2-><null> || r3->$T69* }
;addi r3 r0 	; { r0->$T70 || r1-><null> || r2-><null> || r3->$T69* }
; freeing unused variable r3
; spilling varialbe $T69
;move r3 $-72 	; { r0->$T70* || r1-><null> || r2-><null> || r3->$T69* }
;STOREI $T70 $-1 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T70 has register r0
; ensure(): $-1 gets register r3 { r0->$T70* || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0->$T70* || r1-><null> || r2-><null> || r3->$-1 }
;move r0 r3 	; { r0->$T70* || r1-><null> || r2-><null> || r3->$-1 }
; freeing unused variable r0
; spilling varialbe $T70
;move r0 $-73 	; { r0->$T70* || r1-><null> || r2-><null> || r3->$-1* }
;JUMP label42 liveout: ; { a0 $T24 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1* }
;jmp label42 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label44 liveout: ; { maxg $-2 $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label44 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label45 liveout: ; { maxg $-2 $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label45 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI arraysize $T72 liveout: ; { a0 $T72 maxg $-2 $-1 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): arraysize gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->arraysize }
; loading arraysize to register r3
;move arraysize r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->arraysize }
; ensure(): $T72 gets register r2 { r0-><null> || r1-><null> || r2->$T72 || r3->arraysize }
; loading $-75 to register r2
;move $-75 r2 	; { r0-><null> || r1-><null> || r2->$T72 || r3->arraysize }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T72 || r3->arraysize }
;GEI $-1 $T72 label47 liveout: ; { maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $-1 gets register r1 { r0-><null> || r1->$-1 || r2->$T72* || r3->arraysize }
; loading $-1 to register r1
;move $-1 r1 	; { r0-><null> || r1->$-1 || r2->$T72* || r3->arraysize }
; ensure(): $T72 has register r2
;cmpi r1 r2 	; { r0-><null> || r1->$-1 || r2->$T72* || r3->arraysize }
; spilling registers at the end of Basic Block
; spilling varialbe arraysize
;move r3 arraysize 	; { r0-><null> || r1->$-1 || r2->$T72* || r3->arraysize }
; spilling varialbe $T72
;move r2 $-75 	; { r0-><null> || r1->$-1 || r2->$T72* || r3-><null> }
; spilling varialbe $-1
;move r1 $-1 	; { r0-><null> || r1->$-1 || r2-><null> || r3-><null> }
;jge label47 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
; freeing unused variable r1
; freeing unused variable r2
;PUSH $-1 liveout: ; { maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;PUSH  liveout: ; { maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;push 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;PUSHREG liveout: ; { maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;push r0 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r2 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;push r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;JSR INCRE liveout: ; { a0 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; writing back global variables prior a function call
;jsr INCRE 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;POPREG liveout: ; { a0 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r2 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;pop r0 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1 }
;POP $T73 liveout: ; { $T73 a0 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T73 gets register r2 { r0-><null> || r1-><null> || r2->$T73 || r3->$-1 }
; loading $-76 to register r2
;move $-76 r2 	; { r0-><null> || r1-><null> || r2->$T73 || r3->$-1 }
;pop r2 	; { r0-><null> || r1-><null> || r2->$T73 || r3->$-1 }
;POP  liveout: ; { $T73 a0 maxg $-2 $-1 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$-1 }
;PUSH a7 liveout: ; { $T73 maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): a7 gets register r1 { r0-><null> || r1->a7 || r2->$T73* || r3->$-1 }
; loading a7 to register r1
;move a7 r1 	; { r0-><null> || r1->a7 || r2->$T73* || r3->$-1 }
;push r1 	; { r0-><null> || r1->a7 || r2->$T73* || r3->$-1 }
;PUSH a6 liveout: ; { $T73 maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): a6 gets register r0 { r0->a6 || r1->a7 || r2->$T73* || r3->$-1 }
; loading a6 to register r0
;move a6 r0 	; { r0->a6 || r1->a7 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a6 || r1->a7 || r2->$T73* || r3->$-1 }
;PUSH a5 liveout: ; { $T73 maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill a5
; ensure(): a5 gets register r0 { r0->a5 || r1->a7 || r2->$T73* || r3->$-1 }
; loading a5 to register r0
;move a5 r0 	; { r0->a5 || r1->a7 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a5 || r1->a7 || r2->$T73* || r3->$-1 }
;PUSH a4 liveout: ; { $T73 maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill a4
; ensure(): a4 gets register r0 { r0->a4 || r1->a7 || r2->$T73* || r3->$-1 }
; loading a4 to register r0
;move a4 r0 	; { r0->a4 || r1->a7 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a4 || r1->a7 || r2->$T73* || r3->$-1 }
;PUSH a3 liveout: ; { $T73 maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill a3
; ensure(): a3 gets register r0 { r0->a3 || r1->a7 || r2->$T73* || r3->$-1 }
; loading a3 to register r0
;move a3 r0 	; { r0->a3 || r1->a7 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a3 || r1->a7 || r2->$T73* || r3->$-1 }
;PUSH a2 liveout: ; { $T73 maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill a2
; ensure(): a2 gets register r0 { r0->a2 || r1->a7 || r2->$T73* || r3->$-1 }
; loading a2 to register r0
;move a2 r0 	; { r0->a2 || r1->a7 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a2 || r1->a7 || r2->$T73* || r3->$-1 }
;PUSH a1 liveout: ; { $T73 maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill a1
; ensure(): a1 gets register r0 { r0->a1 || r1->a7 || r2->$T73* || r3->$-1 }
; loading a1 to register r0
;move a1 r0 	; { r0->a1 || r1->a7 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a1 || r1->a7 || r2->$T73* || r3->$-1 }
;PUSH a0 liveout: ; { $T73 maxg $-2 $-1 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; freeing unused variable r0
; allocate() has to spill a0
; ensure(): a0 gets register r0 { r0->a0 || r1->a7 || r2->$T73* || r3->$-1 }
; loading a0 to register r0
;move a0 r0 	; { r0->a0 || r1->a7 || r2->$T73* || r3->$-1 }
;push r0 	; { r0->a0 || r1->a7 || r2->$T73* || r3->$-1 }
;PUSH $-1 liveout: ; { $T73 maxg $-2 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $-1 has register r3
;push r3 	; { r0->a0 || r1->a7 || r2->$T73* || r3->$-1 }
; freeing unused variable r3
;PUSH  liveout: ; { $T73 maxg $-2 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;push 	; { r0->a0 || r1->a7 || r2->$T73* || r3-><null> }
;PUSHREG liveout: ; { $T73 maxg $-2 a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;push r0 	; { r0->a0 || r1->a7 || r2->$T73* || r3-><null> }
;push r1 	; { r0->a0 || r1->a7 || r2->$T73* || r3-><null> }
;push r2 	; { r0->a0 || r1->a7 || r2->$T73* || r3-><null> }
;push r3 	; { r0->a0 || r1->a7 || r2->$T73* || r3-><null> }
;JSR PrintIndex liveout: ; { $T73 maxg $-2 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; writing back global variables prior a function call
; spilling varialbe a7
;move r1 a7 	; { r0->a0 || r1->a7 || r2->$T73* || r3-><null> }
; spilling varialbe a0
;move r0 a0 	; { r0->a0 || r1-><null> || r2->$T73* || r3-><null> }
;jsr PrintIndex 	; { r0-><null> || r1-><null> || r2->$T73* || r3-><null> }
;POPREG liveout: ; { $T73 maxg $-2 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;pop r3 	; { r0-><null> || r1-><null> || r2->$T73* || r3-><null> }
;pop r2 	; { r0-><null> || r1-><null> || r2->$T73* || r3-><null> }
;pop r1 	; { r0-><null> || r1-><null> || r2->$T73* || r3-><null> }
;pop r0 	; { r0-><null> || r1-><null> || r2->$T73* || r3-><null> }
;POP $T74 liveout: ; { $T73 $T74 a0 maxg $-2 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T74 gets register r3 { r0-><null> || r1-><null> || r2->$T73* || r3->$T74 }
; loading $-77 to register r3
;move $-77 r3 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74 }
;pop r3 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74 }
;POP  liveout: ; { $T73 $T74 a0 maxg $-2 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 a0 maxg $-2 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 a0 maxg $-2 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 a0 maxg $-2 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 a0 maxg $-2 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 a0 maxg $-2 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 a0 maxg $-2 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 a0 maxg $-2 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;POP  liveout: ; { $T73 $T74 a0 maxg $-2 floatingMaxConstant arraysize a1 a2 a3 a4 ming a5 a6 a7  }
;pop 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$T74* }
;STOREI $T74 $-3 liveout: ; { $T73 maxg $-2 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T74 has register r3
; ensure(): $-3 gets register r1 { r0-><null> || r1->$-3 || r2->$T73* || r3->$T74* }
; loading $-3 to register r1
;move $-3 r1 	; { r0-><null> || r1->$-3 || r2->$T73* || r3->$T74* }
;move r3 r1 	; { r0-><null> || r1->$-3 || r2->$T73* || r3->$T74* }
; freeing unused variable r3
; spilling varialbe $T74
;move r3 $-77 	; { r0-><null> || r1->$-3* || r2->$T73* || r3->$T74* }
; freeing unused variable r1
; spilling varialbe $-3
;move r1 $-3 	; { r0-><null> || r1->$-3* || r2->$T73* || r3-><null> }
;STOREI $T73 $-1 liveout: ; { maxg $-2 $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $T73 has register r2
; ensure(): $-1 gets register r3 { r0-><null> || r1-><null> || r2->$T73* || r3->$-1 }
; loading $-1 to register r3
;move $-1 r3 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$-1 }
;move r2 r3 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$-1 }
; freeing unused variable r2
; spilling varialbe $T73
;move r2 $-76 	; { r0-><null> || r1-><null> || r2->$T73* || r3->$-1* }
;JUMP label45 liveout: ; { maxg $-2 $-1 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
; spilling varialbe $-1
;move r3 $-1 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-1* }
;jmp label45 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;LABEL label47 liveout: ; { maxg $-2 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; spilling registers at the end of Basic Block
;label label47 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;WRITES eol liveout: ; { maxg $-2 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
;sys writes eol 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;STOREI $-2 $T75 liveout: ; { maxg $T75 a0 floatingMaxConstant a1 arraysize a2 a3 a4 ming a5 a6 a7  }
; ensure(): $-2 gets register r3 { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; loading $-2 to register r3
;move $-2 r3 	; { r0-><null> || r1-><null> || r2-><null> || r3->$-2 }
; ensure(): $T75 gets register r2 { r0-><null> || r1-><null> || r2->$T75 || r3->$-2 }
; loading $-78 to register r2
;move $-78 r2 	; { r0-><null> || r1-><null> || r2->$T75 || r3->$-2 }
;move r3 r2 	; { r0-><null> || r1-><null> || r2->$T75 || r3->$-2 }
; freeing unused variable r3
;STOREI $T75 $6 liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; ensure(): $T75 has register r2
;move r2 $6 	; { r0-><null> || r1-><null> || r2->$T75* || r3-><null> }
; freeing unused variable r2
; spilling varialbe $T75
;move r2 $-78 	; { r0-><null> || r1-><null> || r2->$T75* || r3-><null> }
;UNLINK liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
;unlnk 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }
;RET liveout: ; { maxg a0 floatingMaxConstant arraysize a1 a2 a3 a4 a5 ming a6 a7  }
; writing back global variables prior a function call
;ret 	; { r0-><null> || r1-><null> || r2-><null> || r3-><null> }

str inputMessage "Inputs are: \n"
str sizeMessage "Array size is: "
str sortingMessage "Sorting... \n"
str space " "
str eol "\n"
str smS " isSmallerThan: "
str letS " isLargerThanOrEqualTo: "
var arraysize
var a0
var a1
var a2
var a3
var a4
var a5
var a6
var a7
var maxg
var ming
var floatingMaxConstant
push
push
push
push
push
jsr main
sys halt
label INCRE
link 76
move $-1 r3
move 1 r3
move $7 r2
addi r3 r2
move r3 $-1
move r2 $6
move r2 $-2
unlnk
ret
label main
link 77
move $-4 r3
move 1000.00 r3
move floatingMaxConstant r2
move r3 r2
move r3 $-4
push
push r0
push r1
push r2
push r3
move r2 floatingMaxConstant
jsr SYSIN
pop r3
pop r2
pop r1
pop r0
move $-5 r3
pop r3
move arraysize r2
move r3 r2
move r3 $-5
move a7 r3
push r3
move a6 r1
push r1
move a5 r0
push r0
move a4 r0
push r0
move a3 r0
push r0
move a2 r0
push r0
move a1 r0
push r0
move a0 r0
push r0
push
push r0
push r1
push r2
push r3
move r3 a7
move r2 arraysize
move r1 a6
move r0 a0
jsr findMin
pop r3
pop r2
pop r1
pop r0
move $-6 r3
pop r3
pop
pop
pop
pop
pop
pop
pop
pop
move $-1 r2
move r3 r2
move r3 $-6
sys writer r2
move r2 $-1
sys writes eol
unlnk
ret
label findMin
link 79
move $-9 r3
move 0 r3
move $14 r2
push r2
move $13 r1
push r1
move $12 r0
push r0
move $11 r0
push r0
move $10 r0
push r0
move $9 r0
push r0
move $8 r0
push r0
move $7 r0
push r0
push r3
move r3 $-9
push
push r0
push r1
push r2
push r3
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-10 r3
pop r3
pop
pop
pop
pop
pop
pop
pop
pop
pop
move $-2 r0
move r3 r0
move r3 $-10
move $-11 r3
move 0 r3
move r0 $-2
move $-1 r0
move r3 r0
move r3 $-11
move r2 $14
move r1 $13
move r0 $-1
label label1
move arraysize r3
move $-12 r2
move r3 r2
move $-1 r1
cmpi r1 r2
move r3 arraysize
move r2 $-12
move r1 $-1
jge label3
move $14 r3
push r3
move $13 r2
push r2
move $12 r1
push r1
move $11 r0
push r0
move $10 r0
push r0
move $9 r0
push r0
move $8 r0
push r0
move $7 r0
push r0
move $-1 r0
push r0
push
push r0
push r1
push r2
push r3
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-15 r0
pop r0
pop
pop
pop
pop
pop
pop
pop
pop
pop
move $-3 r1
move r0 r1
move r0 $-15
sys writer r1
sys writes space
move $-16 r0
move 1 r0
move r0 $-16
push r3
push r2
move $12 r0
push r0
move $11 r0
push r0
move $10 r0
push r0
move $9 r0
push r0
move $8 r0
push r0
move $7 r0
push r0
move $-1 r0
push r0
push
push r0
push r1
push r2
push r3
jsr GetValue
pop r3
pop r2
pop r1
pop r0
move $-17 r0
pop r0
pop
pop
pop
pop
pop
pop
pop
pop
pop
move r0 $-17
move $-2 r0
push r0
move $-17 r0
push r0
push
push r0
push r1
push r2
push r3
jsr IsSmallerThan
pop r3
pop r2
pop r1
pop r0
move $-18 r0
pop r0
pop
pop
move r0 $-18
move $-19 r0
move 1 r0
move r1 $-3
move $-18 r1
cmpi r0 r1
move r3 $14
move r2 $13
move r1 $-18
move r0 $-19
jne label4
move $-3 r3
move $-20 r2
move r3 r2
move $-2 r3
move r2 r3
move r2 $-20
move r3 $-2
jmp label5
label label4
label label5
move $-2 r3
sys writer r3
sys writes eol
move $-13 r2
move 1 r2
move $-1 r1
addi r2 r1
move r2 $-13
move $-1 r2
move r1 r2
move r1 $-14
move r3 $-2
move r2 $-1
jmp label1
label label3
move $-2 r3
move $-21 r2
move r3 r2
move r2 $6
move r2 $-21
unlnk
ret
label IsLargerThanOrEqualTo
link 77
move $8 r3
move $-20 r2
move r3 r2
move $7 r3
cmpr r3 r2
move r3 $7
move r2 $-20
jlt label6
move $-21 r3
move 1 r3
move $-1 r2
move r3 r2
move r3 $-21
sys writes space
sys writes letS
sys writei r2
move r2 $-1
sys writes space
move $-22 r3
move 1 r3
move r3 $6
move r3 $-22
unlnk
ret
jmp label7
label label6
label label7
move $-23 r3
move 0 r3
move $-1 r2
move r3 r2
move r3 $-23
sys writes space
sys writes letS
sys writei r2
move r2 $-1
sys writes space
move $-24 r3
move 0 r3
move r3 $6
move r3 $-24
unlnk
ret
label IsSmallerThan
link 77
move $8 r3
push r3
move $7 r3
push r3
push
push r0
push r1
push r2
push r3
jsr IsLargerThanOrEqualTo
pop r3
pop r2
pop r1
pop r0
move $-25 r3
pop r3
pop
pop
move $-26 r2
move 0 r2
cmpi r3 r2
move r3 $-25
move r2 $-26
jeq label8
move $-27 r3
move 0 r3
move $-1 r2
move r3 r2
move r3 $-27
sys writes space
sys writes smS
sys writei r2
move r2 $-1
sys writes space
move $-28 r3
move 0 r3
move r3 $6
move r3 $-28
unlnk
ret
jmp label9
label label8
label label9
move $-29 r3
move 1 r3
move $-1 r2
move r3 r2
move r3 $-29
sys writes space
sys writes smS
sys writei r2
move r2 $-1
sys writes space
move $-30 r3
move 1 r3
move r3 $6
move r3 $-30
unlnk
ret
label GetValue
link 76
move $-30 r3
move 0 r3
move $7 r2
cmpi r2 r3
move r3 $-30
move r2 $7
jne label10
move $8 r3
move $-31 r2
move r3 r2
move r2 $6
move r2 $-31
unlnk
ret
jmp label11
label label10
move $-32 r3
move 1 r3
move $7 r2
cmpi r2 r3
move r3 $-32
move r2 $7
jne label12
move $9 r3
move $-33 r2
move r3 r2
move r2 $6
move r2 $-33
unlnk
ret
jmp label13
label label12
move $-34 r3
move 2 r3
move $7 r2
cmpi r2 r3
move r3 $-34
move r2 $7
jne label14
move $10 r3
move $-35 r2
move r3 r2
move r2 $6
move r2 $-35
unlnk
ret
jmp label15
label label14
move $-36 r3
move 3 r3
move $7 r2
cmpi r2 r3
move r3 $-36
move r2 $7
jne label16
move $11 r3
move $-37 r2
move r3 r2
move r2 $6
move r2 $-37
unlnk
ret
jmp label17
label label16
move $-38 r3
move 4 r3
move $7 r2
cmpi r2 r3
move r3 $-38
move r2 $7
jne label18
move $12 r3
move $-39 r2
move r3 r2
move r2 $6
move r2 $-39
unlnk
ret
jmp label19
label label18
move $-40 r3
move 5 r3
move $7 r2
cmpi r2 r3
move r3 $-40
move r2 $7
jne label20
move $13 r3
move $-41 r2
move r3 r2
move r2 $6
move r2 $-41
unlnk
ret
jmp label21
label label20
move $-42 r3
move 6 r3
move $7 r2
cmpi r2 r3
move r3 $-42
move r2 $7
jne label22
move $14 r3
move $-43 r2
move r3 r2
move r2 $6
move r2 $-43
unlnk
ret
jmp label23
label label22
move $-44 r3
move 7 r3
move $7 r2
cmpi r2 r3
move r3 $-44
move r2 $7
jne label24
move $15 r3
move $-45 r2
move r3 r2
move r2 $6
move r2 $-45
unlnk
ret
jmp label25
label label24
label label25
label label23
label label21
label label19
label label17
label label15
label label13
label label11
move $-46 r3
move 0 r3
move r3 $6
move r3 $-46
unlnk
ret
label PrintIndex
link 76
move $-47 r3
move 0 r3
move $7 r2
cmpi r2 r3
move r3 $-47
move r2 $7
jne label26
move $8 r3
sys writer r3
sys writes space
move $-48 r2
move r3 r2
move r2 $6
move r2 $-48
unlnk
ret
jmp label27
label label26
move $-49 r3
move 1 r3
move $7 r2
cmpi r2 r3
move r3 $-49
move r2 $7
jne label28
move $9 r3
sys writer r3
sys writes space
move $-50 r2
move r3 r2
move r2 $6
move r2 $-50
unlnk
ret
jmp label29
label label28
move $-51 r3
move 2 r3
move $7 r2
cmpi r2 r3
move r3 $-51
move r2 $7
jne label30
move $10 r3
sys writer r3
sys writes space
move $-52 r2
move r3 r2
move r2 $6
move r2 $-52
unlnk
ret
jmp label31
label label30
move $-53 r3
move 3 r3
move $7 r2
cmpi r2 r3
move r3 $-53
move r2 $7
jne label32
move $11 r3
sys writer r3
sys writes space
move $-54 r2
move r3 r2
move r2 $6
move r2 $-54
unlnk
ret
jmp label33
label label32
move $-55 r3
move 4 r3
move $7 r2
cmpi r2 r3
move r3 $-55
move r2 $7
jne label34
move $12 r3
sys writer r3
sys writes space
move $-56 r2
move r3 r2
move r2 $6
move r2 $-56
unlnk
ret
jmp label35
label label34
move $-57 r3
move 5 r3
move $7 r2
cmpi r2 r3
move r3 $-57
move r2 $7
jne label36
move $13 r3
sys writer r3
sys writes space
move $-58 r2
move r3 r2
move r2 $6
move r2 $-58
unlnk
ret
jmp label37
label label36
move $-59 r3
move 6 r3
move $7 r2
cmpi r2 r3
move r3 $-59
move r2 $7
jne label38
move $14 r3
sys writer r3
sys writes space
move $-60 r2
move r3 r2
move r2 $6
move r2 $-60
unlnk
ret
jmp label39
label label38
move $-61 r3
move 7 r3
move $7 r2
cmpi r2 r3
move r3 $-61
move r2 $7
jne label40
move $15 r3
sys writer r3
sys writes space
move $-62 r2
move r3 r2
move r2 $6
move r2 $-62
unlnk
ret
jmp label41
label label40
label label41
label label39
label label37
label label35
label label33
label label31
label label29
label label27
move $-63 r3
move 0 r3
move r3 $6
move r3 $-63
unlnk
ret
label SYSIN
link 79
move $-67 r3
move 0 r3
move $-1 r2
move r3 r2
move r3 $-67
move r2 $-1
move $-68 r3
move 8 r3
move $-2 r2
move r3 r2
move r3 $-68
move a0 r3
sys readr r3
move a1 r1
sys readr r1
move a2 r0
sys readr r0
move r0 a2
move a3 r0
sys readr r0
move r0 a3
move a4 r0
sys readr r0
move r0 a4
move a5 r0
sys readr r0
move r0 a5
move a6 r0
sys readr r0
move r0 a6
move a7 r0
sys readr r0
sys writes inputMessage
move r0 a7
move $-69 r0
move 0 r0
move r1 a1
move $-1 r1
move r0 r1
move r0 $-69
move r3 a0
move r2 $-2
move r1 $-1
label label42
move $-70 r3
move 2 r3
move arraysize r2
divi r3 r2
move r3 $-70
move r2 $-71
move $-1 r3
move $-27 r2
cmpi r3 r2
move r3 $-1
move r2 $-27
jge label44
move a7 r3
push r3
move a6 r2
push r2
move a5 r1
push r1
move a4 r0
push r0
move a3 r0
push r0
move a2 r0
push r0
move a1 r0
push r0
move a0 r0
push r0
move $-1 r0
push r0
push
push r0
push r1
push r2
push r3
move r3 a7
move r2 a6
move r1 a5
jsr PrintIndex
pop r3
pop r2
pop r1
pop r0
move $-74 r3
pop r3
pop
pop
pop
pop
pop
pop
pop
pop
pop
move $-3 r2
move r3 r2
move r3 $-74
move r2 $-3
move $-72 r3
move 1 r3
addi r3 r0
move r3 $-72
move $-1 r3
move r0 r3
move r0 $-73
move r3 $-1
jmp label42
label label44
label label45
move arraysize r3
move $-75 r2
move r3 r2
move $-1 r1
cmpi r1 r2
move r3 arraysize
move r2 $-75
move r1 $-1
jge label47
move $-1 r3
push r3
push
push r0
push r1
push r2
push r3
jsr INCRE
pop r3
pop r2
pop r1
pop r0
move $-76 r2
pop r2
pop
move a7 r1
push r1
move a6 r0
push r0
move a5 r0
push r0
move a4 r0
push r0
move a3 r0
push r0
move a2 r0
push r0
move a1 r0
push r0
move a0 r0
push r0
push r3
push
push r0
push r1
push r2
push r3
move r1 a7
move r0 a0
jsr PrintIndex
pop r3
pop r2
pop r1
pop r0
move $-77 r3
pop r3
pop
pop
pop
pop
pop
pop
pop
pop
pop
move $-3 r1
move r3 r1
move r3 $-77
move r1 $-3
move $-1 r3
move r2 r3
move r2 $-76
move r3 $-1
jmp label45
label label47
sys writes eol
move $-2 r3
move $-78 r2
move r3 r2
move r2 $6
move r2 $-78
unlnk
ret
